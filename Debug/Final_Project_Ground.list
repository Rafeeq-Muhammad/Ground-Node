
Final_Project_Ground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000750c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079fc  080079fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a04  08007a04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000070  08007a7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08007a7c  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013112  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c7  00000000  00000000  000331b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00035780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00036498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a7c  00000000  00000000  000370c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa8f  00000000  00000000  0005eb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edffe  00000000  00000000  0006e5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c5d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000416c  00000000  00000000  0015c624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007684 	.word	0x08007684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007684 	.word	0x08007684

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000598:	b4b0      	push	{r4, r5, r7}
 800059a:	b08f      	sub	sp, #60	; 0x3c
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80005a0:	f240 13b1 	movw	r3, #433	; 0x1b1
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80005a6:	2307      	movs	r3, #7
 80005a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80005ac:	2307      	movs	r3, #7
 80005ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80005b2:	2301      	movs	r3, #1
 80005b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80005b8:	23ff      	movs	r3, #255	; 0xff
 80005ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80005c4:	2308      	movs	r3, #8
 80005c6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	461d      	mov	r5, r3
 80005cc:	f107 040c 	add.w	r4, r7, #12
 80005d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	373c      	adds	r7, #60	; 0x3c
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bcb0      	pop	{r4, r5, r7}
 80005e8:	4770      	bx	lr

080005ea <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6898      	ldr	r0, [r3, #8]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	899b      	ldrh	r3, [r3, #12]
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	f002 f82d 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f001 fccc 	bl	8001fa0 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6898      	ldr	r0, [r3, #8]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	899b      	ldrh	r3, [r3, #12]
 8000610:	2201      	movs	r2, #1
 8000612:	4619      	mov	r1, r3
 8000614:	f002 f822 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000618:	2064      	movs	r0, #100	; 0x64
 800061a:	f001 fcc1 	bl	8001fa0 <HAL_Delay>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000626:	b580      	push	{r7, lr}
 8000628:	b084      	sub	sp, #16
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000630:	2101      	movs	r1, #1
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f99f 	bl	8000976 <LoRa_read>
 8000638:	4603      	mov	r3, r0
 800063a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d107      	bne.n	8000656 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	f023 0307 	bic.w	r3, r3, #7
 800064c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
 8000654:	e03e      	b.n	80006d4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d10c      	bne.n	8000676 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800065c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000660:	f023 0307 	bic.w	r3, r3, #7
 8000664:	b25b      	sxtb	r3, r3
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	b25b      	sxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2201      	movs	r2, #1
 8000672:	61da      	str	r2, [r3, #28]
 8000674:	e02e      	b.n	80006d4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d10c      	bne.n	8000696 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800067c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000680:	f023 0307 	bic.w	r3, r3, #7
 8000684:	b25b      	sxtb	r3, r3
 8000686:	f043 0303 	orr.w	r3, r3, #3
 800068a:	b25b      	sxtb	r3, r3
 800068c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2203      	movs	r2, #3
 8000692:	61da      	str	r2, [r3, #28]
 8000694:	e01e      	b.n	80006d4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b05      	cmp	r3, #5
 800069a:	d10c      	bne.n	80006b6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800069c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a0:	f023 0307 	bic.w	r3, r3, #7
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	f043 0305 	orr.w	r3, r3, #5
 80006aa:	b25b      	sxtb	r3, r3
 80006ac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2205      	movs	r2, #5
 80006b2:	61da      	str	r2, [r3, #28]
 80006b4:	e00e      	b.n	80006d4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d10b      	bne.n	80006d4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	f043 0306 	orr.w	r3, r3, #6
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2206      	movs	r2, #6
 80006d2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	461a      	mov	r2, r3
 80006d8:	2101      	movs	r1, #1
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f965 	bl	80009aa <LoRa_write>
	//HAL_Delay(10);
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4613      	mov	r3, r2
 80006f6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	889b      	ldrh	r3, [r3, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f001 ffaa 	bl	800265c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6998      	ldr	r0, [r3, #24]
 800070c:	88fa      	ldrh	r2, [r7, #6]
 800070e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	f003 fb81 	bl	8003e1a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000718:	bf00      	nop
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4618      	mov	r0, r3
 8000720:	f004 f82c 	bl	800477c <HAL_SPI_GetState>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d1f7      	bne.n	800071a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6998      	ldr	r0, [r3, #24]
 800072e:	8b3a      	ldrh	r2, [r7, #24]
 8000730:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	f003 fcde 	bl	80040f6 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800073a:	bf00      	nop
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4618      	mov	r0, r3
 8000742:	f004 f81b 	bl	800477c <HAL_SPI_GetState>
 8000746:	4603      	mov	r3, r0
 8000748:	2b01      	cmp	r3, #1
 800074a:	d1f7      	bne.n	800073c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	889b      	ldrh	r3, [r3, #4]
 8000754:	2201      	movs	r2, #1
 8000756:	4619      	mov	r1, r3
 8000758:	f001 ff80 	bl	800265c <HAL_GPIO_WritePin>
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	4613      	mov	r3, r2
 8000772:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	4619      	mov	r1, r3
 8000780:	f001 ff6c 	bl	800265c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	6998      	ldr	r0, [r3, #24]
 8000788:	88fa      	ldrh	r2, [r7, #6]
 800078a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800078e:	68b9      	ldr	r1, [r7, #8]
 8000790:	f003 fb43 	bl	8003e1a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000794:	bf00      	nop
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4618      	mov	r0, r3
 800079c:	f003 ffee 	bl	800477c <HAL_SPI_GetState>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d1f7      	bne.n	8000796 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6998      	ldr	r0, [r3, #24]
 80007aa:	8b3a      	ldrh	r2, [r7, #24]
 80007ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007b0:	6839      	ldr	r1, [r7, #0]
 80007b2:	f003 fb32 	bl	8003e1a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007b6:	bf00      	nop
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 ffdd 	bl	800477c <HAL_SPI_GetState>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d1f7      	bne.n	80007b8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	889b      	ldrh	r3, [r3, #4]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4619      	mov	r1, r3
 80007d4:	f001 ff42 	bl	800265c <HAL_GPIO_WritePin>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	04db      	lsls	r3, r3, #19
 80007ee:	115b      	asrs	r3, r3, #5
 80007f0:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	0c1b      	lsrs	r3, r3, #16
 80007f6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	461a      	mov	r2, r3
 80007fc:	2106      	movs	r1, #6
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f8d3 	bl	80009aa <LoRa_write>
	HAL_Delay(5);
 8000804:	2005      	movs	r0, #5
 8000806:	f001 fbcb 	bl	8001fa0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000810:	7afb      	ldrb	r3, [r7, #11]
 8000812:	461a      	mov	r2, r3
 8000814:	2107      	movs	r1, #7
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f8c7 	bl	80009aa <LoRa_write>
	HAL_Delay(5);
 800081c:	2005      	movs	r0, #5
 800081e:	f001 fbbf 	bl	8001fa0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000826:	7afb      	ldrb	r3, [r7, #11]
 8000828:	461a      	mov	r2, r3
 800082a:	2108      	movs	r1, #8
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f8bc 	bl	80009aa <LoRa_write>
	HAL_Delay(5);
 8000832:	2005      	movs	r0, #5
 8000834:	f001 fbb4 	bl	8001fa0 <HAL_Delay>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	2b0c      	cmp	r3, #12
 800084e:	dd01      	ble.n	8000854 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000850:	230c      	movs	r3, #12
 8000852:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b06      	cmp	r3, #6
 8000858:	dc01      	bgt.n	800085e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800085a:	2307      	movs	r3, #7
 800085c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800085e:	211e      	movs	r1, #30
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 f888 	bl	8000976 <LoRa_read>
 8000866:	4603      	mov	r3, r0
 8000868:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800086a:	200a      	movs	r0, #10
 800086c:	f001 fb98 	bl	8001fa0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	b2da      	uxtb	r2, r3
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4413      	add	r3, r2
 8000882:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000884:	7bbb      	ldrb	r3, [r7, #14]
 8000886:	461a      	mov	r2, r3
 8000888:	211e      	movs	r1, #30
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f88d 	bl	80009aa <LoRa_write>
	HAL_Delay(10);
 8000890:	200a      	movs	r0, #10
 8000892:	f001 fb85 	bl	8001fa0 <HAL_Delay>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	460b      	mov	r3, r1
 80008a8:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	461a      	mov	r2, r3
 80008ae:	2109      	movs	r1, #9
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f87a 	bl	80009aa <LoRa_write>
	HAL_Delay(10);
 80008b6:	200a      	movs	r0, #10
 80008b8:	f001 fb72 	bl	8001fa0 <HAL_Delay>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b2c      	cmp	r3, #44	; 0x2c
 80008d8:	d801      	bhi.n	80008de <LoRa_setOCP+0x1a>
		current = 45;
 80008da:	232d      	movs	r3, #45	; 0x2d
 80008dc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	2bf0      	cmp	r3, #240	; 0xf0
 80008e2:	d901      	bls.n	80008e8 <LoRa_setOCP+0x24>
		current = 240;
 80008e4:	23f0      	movs	r3, #240	; 0xf0
 80008e6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b78      	cmp	r3, #120	; 0x78
 80008ec:	d809      	bhi.n	8000902 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	3b2d      	subs	r3, #45	; 0x2d
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <LoRa_setOCP+0x78>)
 80008f4:	fb82 1203 	smull	r1, r2, r2, r3
 80008f8:	1052      	asrs	r2, r2, #1
 80008fa:	17db      	asrs	r3, r3, #31
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	e00b      	b.n	800091a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	2bf0      	cmp	r3, #240	; 0xf0
 8000906:	d808      	bhi.n	800091a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	331e      	adds	r3, #30
 800090c:	4a0b      	ldr	r2, [pc, #44]	; (800093c <LoRa_setOCP+0x78>)
 800090e:	fb82 1203 	smull	r1, r2, r2, r3
 8000912:	1092      	asrs	r2, r2, #2
 8000914:	17db      	asrs	r3, r3, #31
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	3320      	adds	r3, #32
 800091e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	461a      	mov	r2, r3
 8000924:	210b      	movs	r1, #11
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 f83f 	bl	80009aa <LoRa_write>
	HAL_Delay(10);
 800092c:	200a      	movs	r0, #10
 800092e:	f001 fb37 	bl	8001fa0 <HAL_Delay>
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	66666667 	.word	0x66666667

08000940 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000948:	211e      	movs	r1, #30
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f813 	bl	8000976 <LoRa_read>
 8000950:	4603      	mov	r3, r0
 8000952:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f043 0307 	orr.w	r3, r3, #7
 800095a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800095c:	7bbb      	ldrb	r3, [r7, #14]
 800095e:	461a      	mov	r2, r3
 8000960:	211e      	movs	r1, #30
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f821 	bl	80009aa <LoRa_write>
	HAL_Delay(10);
 8000968:	200a      	movs	r0, #10
 800096a:	f001 fb19 	bl	8001fa0 <HAL_Delay>
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af02      	add	r7, sp, #8
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000982:	78fb      	ldrb	r3, [r7, #3]
 8000984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000988:	b2db      	uxtb	r3, r3
 800098a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800098c:	f107 030f 	add.w	r3, r7, #15
 8000990:	f107 010e 	add.w	r1, r7, #14
 8000994:	2201      	movs	r2, #1
 8000996:	9200      	str	r2, [sp, #0]
 8000998:	2201      	movs	r2, #1
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff fea4 	bl	80006e8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af02      	add	r7, sp, #8
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	70fb      	strb	r3, [r7, #3]
 80009b6:	4613      	mov	r3, r2
 80009b8:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	73bb      	strb	r3, [r7, #14]
	data = value;
 80009c4:	78bb      	ldrb	r3, [r7, #2]
 80009c6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80009c8:	f107 030f 	add.w	r3, r7, #15
 80009cc:	f107 010e 	add.w	r1, r7, #14
 80009d0:	2201      	movs	r2, #1
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	2201      	movs	r2, #1
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fec4 	bl	8000764 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	461a      	mov	r2, r3
 80009f0:	460b      	mov	r3, r1
 80009f2:	72fb      	strb	r3, [r7, #11]
 80009f4:	4613      	mov	r3, r2
 80009f6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	889b      	ldrh	r3, [r3, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f001 fe25 	bl	800265c <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6998      	ldr	r0, [r3, #24]
 8000a16:	f107 0117 	add.w	r1, r7, #23
 8000a1a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f003 f9fb 	bl	8003e1a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a24:	bf00      	nop
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 fea6 	bl	800477c <HAL_SPI_GetState>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d1f7      	bne.n	8000a26 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6998      	ldr	r0, [r3, #24]
 8000a3a:	7abb      	ldrb	r3, [r7, #10]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f003 f9e9 	bl	8003e1a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a48:	bf00      	nop
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fe94 	bl	800477c <HAL_SPI_GetState>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1f7      	bne.n	8000a4a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	889b      	ldrh	r3, [r3, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f001 fdf9 	bl	800265c <HAL_GPIO_WritePin>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]

	return 1;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	4611      	mov	r1, r2
 8000a94:	461a      	mov	r2, r3
 8000a96:	460b      	mov	r3, r1
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff fdbd 	bl	8000626 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000aac:	210e      	movs	r1, #14
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff ff61 	bl	8000976 <LoRa_read>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ab8:	7cfb      	ldrb	r3, [r7, #19]
 8000aba:	461a      	mov	r2, r3
 8000abc:	210d      	movs	r1, #13
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ff73 	bl	80009aa <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2122      	movs	r1, #34	; 0x22
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f7ff ff6d 	bl	80009aa <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff ff84 	bl	80009e4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000adc:	2103      	movs	r1, #3
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff fda1 	bl	8000626 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000ae4:	2112      	movs	r1, #18
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff45 	bl	8000976 <LoRa_read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000af0:	7cfb      	ldrb	r3, [r7, #19]
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00a      	beq.n	8000b10 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000afa:	22ff      	movs	r2, #255	; 0xff
 8000afc:	2112      	movs	r1, #18
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff ff53 	bl	80009aa <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000b04:	6979      	ldr	r1, [r7, #20]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f7ff fd8d 	bl	8000626 <LoRa_gotoMode>
			return 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e00f      	b.n	8000b30 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	80bb      	strh	r3, [r7, #4]
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d105      	bne.n	8000b28 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000b1c:	6979      	ldr	r1, [r7, #20]
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff fd81 	bl	8000626 <LoRa_gotoMode>
				return 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	e003      	b.n	8000b30 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f001 fa39 	bl	8001fa0 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000b2e:	e7d9      	b.n	8000ae4 <LoRa_transmit+0x5c>
	}

}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000b40:	2105      	movs	r1, #5
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff fd6f 	bl	8000626 <LoRa_gotoMode>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	e007      	b.n	8000b78 <LoRa_receive+0x28>
		data[i]=0;
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	3301      	adds	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf3      	blt.n	8000b68 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b80:	2101      	movs	r1, #1
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fd4f 	bl	8000626 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b88:	2112      	movs	r1, #18
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fef3 	bl	8000976 <LoRa_read>
 8000b90:	4603      	mov	r3, r0
 8000b92:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b94:	7cfb      	ldrb	r3, [r7, #19]
 8000b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d02f      	beq.n	8000bfe <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	2112      	movs	r1, #18
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff ff01 	bl	80009aa <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000ba8:	2113      	movs	r1, #19
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f7ff fee3 	bl	8000976 <LoRa_read>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff fedd 	bl	8000976 <LoRa_read>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000bc0:	7cfb      	ldrb	r3, [r7, #19]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	210d      	movs	r1, #13
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff feef 	bl	80009aa <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000bcc:	7cba      	ldrb	r2, [r7, #18]
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	bf28      	it	cs
 8000bd4:	4613      	movcs	r3, r2
 8000bd6:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e00b      	b.n	8000bf6 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	18d4      	adds	r4, r2, r3
 8000be4:	2100      	movs	r1, #0
 8000be6:	68f8      	ldr	r0, [r7, #12]
 8000be8:	f7ff fec5 	bl	8000976 <LoRa_read>
 8000bec:	4603      	mov	r3, r0
 8000bee:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	7ffb      	ldrb	r3, [r7, #31]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dbef      	blt.n	8000bde <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000bfe:	2105      	movs	r1, #5
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f7ff fd10 	bl	8000626 <LoRa_gotoMode>
    return min;
 8000c06:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3724      	adds	r7, #36	; 0x24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd90      	pop	{r4, r7, pc}

08000c10 <LoRa_getRSSI>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Returns the RSSI value of last received packet.
\* ----------------------------------------------------------------------------- */
int LoRa_getRSSI(LoRa* _LoRa){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	uint8_t read;
	read = LoRa_read(_LoRa, RegPktRssiValue);
 8000c18:	211a      	movs	r1, #26
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff feab 	bl	8000976 <LoRa_read>
 8000c20:	4603      	mov	r3, r0
 8000c22:	73fb      	strb	r3, [r7, #15]
	return -164 + read;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	3ba4      	subs	r3, #164	; 0xa4
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff1a 	bl	8000a72 <LoRa_isvalid>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 8093 	beq.w	8000d6c <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000c46:	2100      	movs	r1, #0
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fcec 	bl	8000626 <LoRa_gotoMode>
			HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f001 f9a6 	bl	8001fa0 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000c54:	2101      	movs	r1, #1
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fe8d 	bl	8000976 <LoRa_read>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000c60:	200a      	movs	r0, #10
 8000c62:	f001 f99d 	bl	8001fa0 <HAL_Delay>
			data = read | 0x80;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c6c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000c6e:	7bbb      	ldrb	r3, [r7, #14]
 8000c70:	461a      	mov	r2, r3
 8000c72:	2101      	movs	r1, #1
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fe98 	bl	80009aa <LoRa_write>
			HAL_Delay(100);
 8000c7a:	2064      	movs	r0, #100	; 0x64
 8000c7c:	f001 f990 	bl	8001fa0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff fdaa 	bl	80007e0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000c92:	4619      	mov	r1, r3
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fe02 	bl	800089e <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fe0e 	bl	80008c4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000ca8:	2223      	movs	r2, #35	; 0x23
 8000caa:	210c      	movs	r1, #12
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fe7c 	bl	80009aa <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fe44 	bl	8000940 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fdbd 	bl	8000840 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000cc6:	22ff      	movs	r2, #255	; 0xff
 8000cc8:	211f      	movs	r1, #31
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fe6d 	bl	80009aa <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	4413      	add	r3, r2
 8000cea:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	211d      	movs	r1, #29
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fe59 	bl	80009aa <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	2120      	movs	r1, #32
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fe4f 	bl	80009aa <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	2121      	movs	r1, #33	; 0x21
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fe47 	bl	80009aa <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fe29 	bl	8000976 <LoRa_read>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000d2e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	461a      	mov	r2, r3
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fe37 	bl	80009aa <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fc71 	bl	8000626 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f001 f928 	bl	8001fa0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000d50:	2142      	movs	r1, #66	; 0x42
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fe0f 	bl	8000976 <LoRa_read>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d101      	bne.n	8000d66 <LoRa_init+0x136>
				return LORA_OK;
 8000d62:	23c8      	movs	r3, #200	; 0xc8
 8000d64:	e004      	b.n	8000d70 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000d66:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000d6a:	e001      	b.n	8000d70 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000d6c:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	b0bd      	sub	sp, #244	; 0xf4
 8000d7c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char local_message[100] = { 0 }; //Reusable buffer to store messages to be printed to usart.
 8000d7e:	2300      	movs	r3, #0
 8000d80:	677b      	str	r3, [r7, #116]	; 0x74
 8000d82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000d86:	2260      	movs	r2, #96	; 0x60
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f005 fa36 	bl	80061fc <memset>
	char commandArray[3][10]; //Holds the parsed command.
	char translatedCommandArray[30]; // The array of encoded commands that I'm sending to remote.

	//Clear command arrays.
	memset(&translatedCommandArray, 0, strlen((char*) translatedCommandArray));
 8000d90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fa25 	bl	80001e4 <strlen>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f005 fa2a 	bl	80061fc <memset>
	for (int i = 0; i < 3; i++) {
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000dae:	e01f      	b.n	8000df0 <main+0x78>
		memset(&commandArray[i], 0, strlen((char*) commandArray[i]));
 8000db0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000db4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	18cc      	adds	r4, r1, r3
 8000dc2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000dc6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	440b      	add	r3, r1
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fa05 	bl	80001e4 <strlen>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	4620      	mov	r0, r4
 8000de2:	f005 fa0b 	bl	80061fc <memset>
	for (int i = 0; i < 3; i++) {
 8000de6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000dea:	3301      	adds	r3, #1
 8000dec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000df0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	dddb      	ble.n	8000db0 <main+0x38>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000df8:	f001 f856 	bl	8001ea8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dfc:	f000 fbe8 	bl	80015d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e00:	f000 fca6 	bl	8001750 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000e04:	f000 fc74 	bl	80016f0 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000e08:	f000 fc34 	bl	8001674 <MX_SPI1_Init>
	 * and I can start typing into the terminal.

	 *As for why this message has to show up twice, I don't know why that is. I'm not transmitting it twice.
	 *This is one of those "weird errors". My theory is that this has to do with the flashing.
	 */
	strcpy((char*) tx_buff,
 8000e0c:	4bca      	ldr	r3, [pc, #808]	; (8001138 <main+0x3c0>)
 8000e0e:	4acb      	ldr	r2, [pc, #812]	; (800113c <main+0x3c4>)
 8000e10:	4614      	mov	r4, r2
 8000e12:	469c      	mov	ip, r3
 8000e14:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e18:	4665      	mov	r5, ip
 8000e1a:	4626      	mov	r6, r4
 8000e1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e1e:	6028      	str	r0, [r5, #0]
 8000e20:	6069      	str	r1, [r5, #4]
 8000e22:	60aa      	str	r2, [r5, #8]
 8000e24:	60eb      	str	r3, [r5, #12]
 8000e26:	3410      	adds	r4, #16
 8000e28:	f10c 0c10 	add.w	ip, ip, #16
 8000e2c:	4574      	cmp	r4, lr
 8000e2e:	d1f3      	bne.n	8000e18 <main+0xa0>
 8000e30:	4665      	mov	r5, ip
 8000e32:	4623      	mov	r3, r4
 8000e34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e36:	6028      	str	r0, [r5, #0]
 8000e38:	6069      	str	r1, [r5, #4]
 8000e3a:	60aa      	str	r2, [r5, #8]
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	81ab      	strh	r3, [r5, #12]
			"\r\nGround node ready for use. You may begin typing commands.\r\n");
	HAL_UART_Transmit(&huart2, tx_buff, strlen((char*) tx_buff), 500);
 8000e40:	48bd      	ldr	r0, [pc, #756]	; (8001138 <main+0x3c0>)
 8000e42:	f7ff f9cf 	bl	80001e4 <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e4e:	49ba      	ldr	r1, [pc, #744]	; (8001138 <main+0x3c0>)
 8000e50:	48bb      	ldr	r0, [pc, #748]	; (8001140 <main+0x3c8>)
 8000e52:	f003 feab 	bl	8004bac <HAL_UART_Transmit>

	/*
	 * This is the initialization of PuTTy receiving a character. It tells PuTTy, "hey,..
	 * receive the next character I'm about to type."
	 */
	HAL_UART_Receive_IT(&huart2, rx_char, 1); //Start listening for interrupts.
 8000e56:	2201      	movs	r2, #1
 8000e58:	49ba      	ldr	r1, [pc, #744]	; (8001144 <main+0x3cc>)
 8000e5a:	48b9      	ldr	r0, [pc, #740]	; (8001140 <main+0x3c8>)
 8000e5c:	f003 ff3a 	bl	8004cd4 <HAL_UART_Receive_IT>

	//------------LORA STUFF-----------------------------------------------------

	/* MODULE SETTINGS */
	myLoRa = newLoRa();
 8000e60:	4cb9      	ldr	r4, [pc, #740]	; (8001148 <main+0x3d0>)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fb97 	bl	8000598 <newLoRa>
 8000e6a:	4625      	mov	r5, r4
 8000e6c:	463c      	mov	r4, r7
 8000e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e76:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000e7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.hSPIx = &hspi1;
 8000e7e:	4bb2      	ldr	r3, [pc, #712]	; (8001148 <main+0x3d0>)
 8000e80:	4ab2      	ldr	r2, [pc, #712]	; (800114c <main+0x3d4>)
 8000e82:	619a      	str	r2, [r3, #24]
	myLoRa.CS_port = GPIOB;
 8000e84:	4bb0      	ldr	r3, [pc, #704]	; (8001148 <main+0x3d0>)
 8000e86:	4ab2      	ldr	r2, [pc, #712]	; (8001150 <main+0x3d8>)
 8000e88:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = CS_Pin;
 8000e8a:	4baf      	ldr	r3, [pc, #700]	; (8001148 <main+0x3d0>)
 8000e8c:	2240      	movs	r2, #64	; 0x40
 8000e8e:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = GPIOB;
 8000e90:	4bad      	ldr	r3, [pc, #692]	; (8001148 <main+0x3d0>)
 8000e92:	4aaf      	ldr	r2, [pc, #700]	; (8001150 <main+0x3d8>)
 8000e94:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = reset_Pin;
 8000e96:	4bac      	ldr	r3, [pc, #688]	; (8001148 <main+0x3d0>)
 8000e98:	2210      	movs	r2, #16
 8000e9a:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = dio0_GPIO_Port;
 8000e9c:	4baa      	ldr	r3, [pc, #680]	; (8001148 <main+0x3d0>)
 8000e9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ea2:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = dio0_Pin;
 8000ea4:	4ba8      	ldr	r3, [pc, #672]	; (8001148 <main+0x3d0>)
 8000ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eaa:	829a      	strh	r2, [r3, #20]

	myLoRa.frequency = 433;                              // default = 433 MHz
 8000eac:	4ba6      	ldr	r3, [pc, #664]	; (8001148 <main+0x3d0>)
 8000eae:	f240 12b1 	movw	r2, #433	; 0x1b1
 8000eb2:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_7;                            // default = SF_7
 8000eb4:	4ba4      	ldr	r3, [pc, #656]	; (8001148 <main+0x3d0>)
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth = BW_62_5KHz;                  // default = BW_125KHz
 8000ebc:	4ba2      	ldr	r3, [pc, #648]	; (8001148 <main+0x3d0>)
 8000ebe:	2206      	movs	r2, #6
 8000ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate = CR_4_5;                        // default = CR_4_5
 8000ec4:	4ba0      	ldr	r3, [pc, #640]	; (8001148 <main+0x3d0>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power = POWER_20db;                // default = 20db
 8000ecc:	4b9e      	ldr	r3, [pc, #632]	; (8001148 <main+0x3d0>)
 8000ece:	22ff      	movs	r2, #255	; 0xff
 8000ed0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 120;                      // default = 100 mA
 8000ed4:	4b9c      	ldr	r3, [pc, #624]	; (8001148 <main+0x3d0>)
 8000ed6:	2278      	movs	r2, #120	; 0x78
 8000ed8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble = 10;                              // default = 8;
 8000edc:	4b9a      	ldr	r3, [pc, #616]	; (8001148 <main+0x3d0>)
 8000ede:	220a      	movs	r2, #10
 8000ee0:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8000ee2:	4899      	ldr	r0, [pc, #612]	; (8001148 <main+0x3d0>)
 8000ee4:	f7ff fb81 	bl	80005ea <LoRa_reset>
	LoRa_init(&myLoRa);
 8000ee8:	4897      	ldr	r0, [pc, #604]	; (8001148 <main+0x3d0>)
 8000eea:	f7ff fea1 	bl	8000c30 <LoRa_init>

	/*The following buffer holds the number of transmissions that were attempted.*/
	//uint8_t tx_num = 0;
	/* START CONTINUOUS RECEIVING */
	LoRa_startReceiving(&myLoRa);
 8000eee:	4896      	ldr	r0, [pc, #600]	; (8001148 <main+0x3d0>)
 8000ef0:	f7ff fe22 	bl	8000b38 <LoRa_startReceiving>
	while (1) {

		/*
		 * If I get a enter key, rx_complete is true.
		 */
		if (rx_complete == 1) {
 8000ef4:	4b97      	ldr	r3, [pc, #604]	; (8001154 <main+0x3dc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d1fb      	bne.n	8000ef4 <main+0x17c>

			//Initializations
			int commandExists = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

			//Clear the command arrays in each completed-command iteration.
			for (int i = 0; i < 3; i++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000f08:	e01f      	b.n	8000f4a <main+0x1d2>
				memset(&commandArray[i], 0, strlen((char*) commandArray[i]));
 8000f0a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000f0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	18cc      	adds	r4, r1, r3
 8000f1c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000f20:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	440b      	add	r3, r1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f958 	bl	80001e4 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f005 f95e 	bl	80061fc <memset>
			for (int i = 0; i < 3; i++) {
 8000f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f44:	3301      	adds	r3, #1
 8000f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	dddb      	ble.n	8000f0a <main+0x192>
			}
			memset(&translatedCommandArray, 0,
 8000f52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff f944 	bl	80001e4 <strlen>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 f949 	bl	80061fc <memset>
			strlen((char*) translatedCommandArray));

			//Turning the raw data into tokens. Store these tokens in commandArray. Commands have a max of three tokens. Tokens have a max length of 10 characters -------------------------------------------------------
			const char s[2] = " ";
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	863b      	strh	r3, [r7, #48]	; 0x30
			char *token;
			/*Define where I'm getting tokens from*/
			token = strtok((char*) safe_buff, s);
 8000f6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f72:	4619      	mov	r1, r3
 8000f74:	4878      	ldr	r0, [pc, #480]	; (8001158 <main+0x3e0>)
 8000f76:	f005 f9b5 	bl	80062e4 <strtok>
 8000f7a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
			/* Walk through other tokens, store them to the subsequent positions of commandArray */
			int i = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			while (token != NULL) {
 8000f84:	e01a      	b.n	8000fbc <main+0x244>
				strcpy(commandArray[i], token);
 8000f86:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000f8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	440b      	add	r3, r1
 8000f98:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f005 f998 	bl	80062d2 <strcpy>
				i++;
 8000fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				/*Get the next token*/
				token = strtok(NULL, s);
 8000fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f005 f996 	bl	80062e4 <strtok>
 8000fb8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
			while (token != NULL) {
 8000fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1e0      	bne.n	8000f86 <main+0x20e>
			}

			//Show the user the three tokens they inputted.
			snprintf((char*) local_message, sizeof(local_message), "\r\nToken 0: %s\r\n", commandArray[0]);
 8000fc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fc8:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000fcc:	4a63      	ldr	r2, [pc, #396]	; (800115c <main+0x3e4>)
 8000fce:	2164      	movs	r1, #100	; 0x64
 8000fd0:	f005 f91c 	bl	800620c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) local_message, 	strlen(local_message), 200);
 8000fd4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f903 	bl	80001e4 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000fe6:	23c8      	movs	r3, #200	; 0xc8
 8000fe8:	4855      	ldr	r0, [pc, #340]	; (8001140 <main+0x3c8>)
 8000fea:	f003 fddf 	bl	8004bac <HAL_UART_Transmit>
			snprintf((char*) local_message, sizeof(local_message), "Token 1: %s\r\n", commandArray[1]);
 8000fee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff2:	330a      	adds	r3, #10
 8000ff4:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000ff8:	4a59      	ldr	r2, [pc, #356]	; (8001160 <main+0x3e8>)
 8000ffa:	2164      	movs	r1, #100	; 0x64
 8000ffc:	f005 f906 	bl	800620c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) local_message, strlen(local_message), 200);
 8001000:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f8ed 	bl	80001e4 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001012:	23c8      	movs	r3, #200	; 0xc8
 8001014:	484a      	ldr	r0, [pc, #296]	; (8001140 <main+0x3c8>)
 8001016:	f003 fdc9 	bl	8004bac <HAL_UART_Transmit>
			snprintf((char*) local_message, sizeof(local_message), 	"Token 2: %s\r\n", commandArray[2]);
 800101a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800101e:	3314      	adds	r3, #20
 8001020:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001024:	4a4f      	ldr	r2, [pc, #316]	; (8001164 <main+0x3ec>)
 8001026:	2164      	movs	r1, #100	; 0x64
 8001028:	f005 f8f0 	bl	800620c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) local_message, strlen(local_message), 200);
 800102c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8d7 	bl	80001e4 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800103e:	23c8      	movs	r3, #200	; 0xc8
 8001040:	483f      	ldr	r0, [pc, #252]	; (8001140 <main+0x3c8>)
 8001042:	f003 fdb3 	bl	8004bac <HAL_UART_Transmit>

			//Convert the commandArray (array of words) to translatedCommandArray (array of integers that will be sent to ground.)--------------------------------------------
			if (strcmp(commandArray[0], "led") == 0) {
 8001046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800104a:	4947      	ldr	r1, [pc, #284]	; (8001168 <main+0x3f0>)
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff f8bf 	bl	80001d0 <strcmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d149      	bne.n	80010ec <main+0x374>
				strcat(translatedCommandArray, "0");
 8001058:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f8c1 	bl	80001e4 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800106a:	4413      	add	r3, r2
 800106c:	493f      	ldr	r1, [pc, #252]	; (800116c <main+0x3f4>)
 800106e:	461a      	mov	r2, r3
 8001070:	460b      	mov	r3, r1
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	8013      	strh	r3, [r2, #0]
				if (strcmp(commandArray[1], "on") == 0) {
 8001076:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800107a:	330a      	adds	r3, #10
 800107c:	493c      	ldr	r1, [pc, #240]	; (8001170 <main+0x3f8>)
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f8a6 	bl	80001d0 <strcmp>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d112      	bne.n	80010b0 <main+0x338>
					strcat(translatedCommandArray, "0");
 800108a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f8a8 	bl	80001e4 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800109c:	4413      	add	r3, r2
 800109e:	4933      	ldr	r1, [pc, #204]	; (800116c <main+0x3f4>)
 80010a0:	461a      	mov	r2, r3
 80010a2:	460b      	mov	r3, r1
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	8013      	strh	r3, [r2, #0]
					commandExists = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80010ae:	e1ec      	b.n	800148a <main+0x712>
				} else if (strcmp(commandArray[1], "off") == 0) {
 80010b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b4:	330a      	adds	r3, #10
 80010b6:	492f      	ldr	r1, [pc, #188]	; (8001174 <main+0x3fc>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f889 	bl	80001d0 <strcmp>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f040 81e2 	bne.w	800148a <main+0x712>
					strcat(translatedCommandArray, "1");
 80010c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f88a 	bl	80001e4 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010d8:	4413      	add	r3, r2
 80010da:	4927      	ldr	r1, [pc, #156]	; (8001178 <main+0x400>)
 80010dc:	461a      	mov	r2, r3
 80010de:	460b      	mov	r3, r1
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	8013      	strh	r3, [r2, #0]
					commandExists = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80010ea:	e1ce      	b.n	800148a <main+0x712>
				}
			} else if (strcmp(commandArray[0], "transmit") == 0) {
 80010ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010f0:	4922      	ldr	r1, [pc, #136]	; (800117c <main+0x404>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f86c 	bl	80001d0 <strcmp>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d140      	bne.n	8001180 <main+0x408>
				strcat(translatedCommandArray, "1");
 80010fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f86e 	bl	80001e4 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001110:	4413      	add	r3, r2
 8001112:	4919      	ldr	r1, [pc, #100]	; (8001178 <main+0x400>)
 8001114:	461a      	mov	r2, r3
 8001116:	460b      	mov	r3, r1
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	8013      	strh	r3, [r2, #0]
				strcat(translatedCommandArray, commandArray[1]);
 800111c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001120:	f103 020a 	add.w	r2, r3, #10
 8001124:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f005 f8c2 	bl	80062b4 <strcat>
				commandExists = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001136:	e1a8      	b.n	800148a <main+0x712>
 8001138:	2000018c 	.word	0x2000018c
 800113c:	0800769c 	.word	0x0800769c
 8001140:	200005d8 	.word	0x200005d8
 8001144:	20000110 	.word	0x20000110
 8001148:	2000065c 	.word	0x2000065c
 800114c:	20000574 	.word	0x20000574
 8001150:	48000400 	.word	0x48000400
 8001154:	20000114 	.word	0x20000114
 8001158:	2000008c 	.word	0x2000008c
 800115c:	080076dc 	.word	0x080076dc
 8001160:	080076ec 	.word	0x080076ec
 8001164:	080076fc 	.word	0x080076fc
 8001168:	0800770c 	.word	0x0800770c
 800116c:	08007710 	.word	0x08007710
 8001170:	08007714 	.word	0x08007714
 8001174:	08007718 	.word	0x08007718
 8001178:	0800771c 	.word	0x0800771c
 800117c:	08007720 	.word	0x08007720
			} else if (strcmp(commandArray[0], "read") == 0) {
 8001180:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001184:	49cd      	ldr	r1, [pc, #820]	; (80014bc <main+0x744>)
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f822 	bl	80001d0 <strcmp>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d166      	bne.n	8001260 <main+0x4e8>
				strcat(translatedCommandArray, "2");
 8001192:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f824 	bl	80001e4 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011a4:	4413      	add	r3, r2
 80011a6:	49c6      	ldr	r1, [pc, #792]	; (80014c0 <main+0x748>)
 80011a8:	461a      	mov	r2, r3
 80011aa:	460b      	mov	r3, r1
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	8013      	strh	r3, [r2, #0]
				if (strcmp(commandArray[1], "temp") == 0) {
 80011b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b4:	330a      	adds	r3, #10
 80011b6:	49c3      	ldr	r1, [pc, #780]	; (80014c4 <main+0x74c>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f809 	bl	80001d0 <strcmp>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d112      	bne.n	80011ea <main+0x472>
					strcat(translatedCommandArray, "1");
 80011c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f80b 	bl	80001e4 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011d6:	4413      	add	r3, r2
 80011d8:	49bb      	ldr	r1, [pc, #748]	; (80014c8 <main+0x750>)
 80011da:	461a      	mov	r2, r3
 80011dc:	460b      	mov	r3, r1
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	8013      	strh	r3, [r2, #0]
					commandExists = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80011e8:	e14f      	b.n	800148a <main+0x712>
				} else if (strcmp(commandArray[1], "photo") == 0) {
 80011ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ee:	330a      	adds	r3, #10
 80011f0:	49b6      	ldr	r1, [pc, #728]	; (80014cc <main+0x754>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7fe ffec 	bl	80001d0 <strcmp>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d112      	bne.n	8001224 <main+0x4ac>
					strcat(translatedCommandArray, "2");
 80011fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001202:	4618      	mov	r0, r3
 8001204:	f7fe ffee 	bl	80001e4 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001210:	4413      	add	r3, r2
 8001212:	49ab      	ldr	r1, [pc, #684]	; (80014c0 <main+0x748>)
 8001214:	461a      	mov	r2, r3
 8001216:	460b      	mov	r3, r1
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	8013      	strh	r3, [r2, #0]
					commandExists = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001222:	e132      	b.n	800148a <main+0x712>
				} else if (strcmp(commandArray[1], "buzz") == 0) {
 8001224:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001228:	330a      	adds	r3, #10
 800122a:	49a9      	ldr	r1, [pc, #676]	; (80014d0 <main+0x758>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7fe ffcf 	bl	80001d0 <strcmp>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	f040 8128 	bne.w	800148a <main+0x712>
					strcat(translatedCommandArray, "3");
 800123a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800123e:	4618      	mov	r0, r3
 8001240:	f7fe ffd0 	bl	80001e4 <strlen>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	4413      	add	r3, r2
 800124e:	49a1      	ldr	r1, [pc, #644]	; (80014d4 <main+0x75c>)
 8001250:	461a      	mov	r2, r3
 8001252:	460b      	mov	r3, r1
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	8013      	strh	r3, [r2, #0]
					commandExists = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800125e:	e114      	b.n	800148a <main+0x712>
				}
			}
				//For the math, copy the two last tokens in command array into the two last positions of translatedCommandArray
				else if (strcmp(commandArray[0], "add") == 0) {
 8001260:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001264:	499c      	ldr	r1, [pc, #624]	; (80014d8 <main+0x760>)
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe ffb2 	bl	80001d0 <strcmp>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d126      	bne.n	80012c0 <main+0x548>
					strcat(translatedCommandArray, "3");
 8001272:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001276:	4618      	mov	r0, r3
 8001278:	f7fe ffb4 	bl	80001e4 <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001284:	4413      	add	r3, r2
 8001286:	4993      	ldr	r1, [pc, #588]	; (80014d4 <main+0x75c>)
 8001288:	461a      	mov	r2, r3
 800128a:	460b      	mov	r3, r1
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	8013      	strh	r3, [r2, #0]
					strcat(translatedCommandArray, commandArray[1]); //argument 1 of the add command
 8001290:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001294:	f103 020a 	add.w	r2, r3, #10
 8001298:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 f808 	bl	80062b4 <strcat>
					strcat(translatedCommandArray, commandArray[2]); //argument 2 of the add command
 80012a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a8:	f103 0214 	add.w	r2, r3, #20
 80012ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fffe 	bl	80062b4 <strcat>
					commandExists = 1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80012be:	e0e4      	b.n	800148a <main+0x712>
				} else if (strcmp(commandArray[0], "subtract") == 0) {
 80012c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c4:	4985      	ldr	r1, [pc, #532]	; (80014dc <main+0x764>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ff82 	bl	80001d0 <strcmp>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d126      	bne.n	8001320 <main+0x5a8>
					strcat(translatedCommandArray, "4");
 80012d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ff84 	bl	80001e4 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012e4:	4413      	add	r3, r2
 80012e6:	497e      	ldr	r1, [pc, #504]	; (80014e0 <main+0x768>)
 80012e8:	461a      	mov	r2, r3
 80012ea:	460b      	mov	r3, r1
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	8013      	strh	r3, [r2, #0]
					strcat(translatedCommandArray, commandArray[1]);
 80012f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012f4:	f103 020a 	add.w	r2, r3, #10
 80012f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 ffd8 	bl	80062b4 <strcat>
					strcat(translatedCommandArray, commandArray[2]);
 8001304:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001308:	f103 0214 	add.w	r2, r3, #20
 800130c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f004 ffce 	bl	80062b4 <strcat>
					commandExists = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800131e:	e0b4      	b.n	800148a <main+0x712>
				} else if (strcmp(commandArray[0], "multiply") == 0) {
 8001320:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001324:	496f      	ldr	r1, [pc, #444]	; (80014e4 <main+0x76c>)
 8001326:	4618      	mov	r0, r3
 8001328:	f7fe ff52 	bl	80001d0 <strcmp>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d126      	bne.n	8001380 <main+0x608>
					strcat(translatedCommandArray, "5");
 8001332:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ff54 	bl	80001e4 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001344:	4413      	add	r3, r2
 8001346:	4968      	ldr	r1, [pc, #416]	; (80014e8 <main+0x770>)
 8001348:	461a      	mov	r2, r3
 800134a:	460b      	mov	r3, r1
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	8013      	strh	r3, [r2, #0]
					strcat(translatedCommandArray, commandArray[1]);
 8001350:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001354:	f103 020a 	add.w	r2, r3, #10
 8001358:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f004 ffa8 	bl	80062b4 <strcat>
					strcat(translatedCommandArray, commandArray[2]);
 8001364:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001368:	f103 0214 	add.w	r2, r3, #20
 800136c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f004 ff9e 	bl	80062b4 <strcat>
					commandExists = 1;
 8001378:	2301      	movs	r3, #1
 800137a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800137e:	e084      	b.n	800148a <main+0x712>
				} else if (strcmp(commandArray[0], "divide") == 0) {
 8001380:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001384:	4959      	ldr	r1, [pc, #356]	; (80014ec <main+0x774>)
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff22 	bl	80001d0 <strcmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d126      	bne.n	80013e0 <main+0x668>
					strcat(translatedCommandArray, "6");
 8001392:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ff24 	bl	80001e4 <strlen>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013a4:	4413      	add	r3, r2
 80013a6:	4952      	ldr	r1, [pc, #328]	; (80014f0 <main+0x778>)
 80013a8:	461a      	mov	r2, r3
 80013aa:	460b      	mov	r3, r1
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	8013      	strh	r3, [r2, #0]
					strcat(translatedCommandArray, commandArray[1]);
 80013b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b4:	f103 020a 	add.w	r2, r3, #10
 80013b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 ff78 	bl	80062b4 <strcat>
					strcat(translatedCommandArray, commandArray[2]);
 80013c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c8:	f103 0214 	add.w	r2, r3, #20
 80013cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 ff6e 	bl	80062b4 <strcat>
					commandExists = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80013de:	e054      	b.n	800148a <main+0x712>
				} else if (strcmp(commandArray[0], "exponent") == 0) {
 80013e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e4:	4943      	ldr	r1, [pc, #268]	; (80014f4 <main+0x77c>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe fef2 	bl	80001d0 <strcmp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d126      	bne.n	8001440 <main+0x6c8>
					strcat(translatedCommandArray, "7");
 80013f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe fef4 	bl	80001e4 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001404:	4413      	add	r3, r2
 8001406:	493c      	ldr	r1, [pc, #240]	; (80014f8 <main+0x780>)
 8001408:	461a      	mov	r2, r3
 800140a:	460b      	mov	r3, r1
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	8013      	strh	r3, [r2, #0]
					strcat(translatedCommandArray, commandArray[1]);
 8001410:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001414:	f103 020a 	add.w	r2, r3, #10
 8001418:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f004 ff48 	bl	80062b4 <strcat>
					strcat(translatedCommandArray, commandArray[2]);
 8001424:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001428:	f103 0214 	add.w	r2, r3, #20
 800142c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f004 ff3e 	bl	80062b4 <strcat>
					commandExists = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800143e:	e024      	b.n	800148a <main+0x712>
				}
				//Take the factorial of the second token.
				else if (strcmp(commandArray[0], "factorial") == 0) {
 8001440:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001444:	492d      	ldr	r1, [pc, #180]	; (80014fc <main+0x784>)
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe fec2 	bl	80001d0 <strcmp>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11b      	bne.n	800148a <main+0x712>
					strcat(translatedCommandArray, "8");
 8001452:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe fec4 	bl	80001e4 <strlen>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001464:	4413      	add	r3, r2
 8001466:	4926      	ldr	r1, [pc, #152]	; (8001500 <main+0x788>)
 8001468:	461a      	mov	r2, r3
 800146a:	460b      	mov	r3, r1
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	8013      	strh	r3, [r2, #0]
					strcat(translatedCommandArray, commandArray[1]);
 8001470:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001474:	f103 020a 	add.w	r2, r3, #10
 8001478:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f004 ff18 	bl	80062b4 <strcat>
					commandExists = 1;
 8001484:	2301      	movs	r3, #1
 8001486:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8




				//Processing on what to do whether or not the command exists or not.
				if (commandExists == 0) { //The command does not exist.
 800148a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d13c      	bne.n	800150c <main+0x794>

					snprintf((char*) local_message, sizeof(local_message), "\r\nThat command does not exist. Please try again.\r\n\r\n");
 8001492:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <main+0x78c>)
 8001498:	2164      	movs	r1, #100	; 0x64
 800149a:	4618      	mov	r0, r3
 800149c:	f004 feb6 	bl	800620c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) local_message, strlen(local_message), 200);
 80014a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe fe9d 	bl	80001e4 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80014b2:	23c8      	movs	r3, #200	; 0xc8
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <main+0x790>)
 80014b6:	f003 fb79 	bl	8004bac <HAL_UART_Transmit>
 80014ba:	e076      	b.n	80015aa <main+0x832>
 80014bc:	0800772c 	.word	0x0800772c
 80014c0:	08007734 	.word	0x08007734
 80014c4:	08007738 	.word	0x08007738
 80014c8:	0800771c 	.word	0x0800771c
 80014cc:	08007740 	.word	0x08007740
 80014d0:	08007748 	.word	0x08007748
 80014d4:	08007750 	.word	0x08007750
 80014d8:	08007754 	.word	0x08007754
 80014dc:	08007758 	.word	0x08007758
 80014e0:	08007764 	.word	0x08007764
 80014e4:	08007768 	.word	0x08007768
 80014e8:	08007774 	.word	0x08007774
 80014ec:	08007778 	.word	0x08007778
 80014f0:	08007780 	.word	0x08007780
 80014f4:	08007784 	.word	0x08007784
 80014f8:	08007790 	.word	0x08007790
 80014fc:	08007794 	.word	0x08007794
 8001500:	080077a0 	.word	0x080077a0
 8001504:	080077a4 	.word	0x080077a4
 8001508:	200005d8 	.word	0x200005d8

				} else { //The command exists.

					//Print the contents of the translatedCommandArray.
					snprintf((char*) local_message, sizeof(local_message), "translatedCommandArray: %s\r\n", translatedCommandArray);
 800150c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001510:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <main+0x83c>)
 8001516:	2164      	movs	r1, #100	; 0x64
 8001518:	f004 fe78 	bl	800620c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) local_message, strlen(local_message), 200);
 800151c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe fe5f 	bl	80001e4 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800152e:	23c8      	movs	r3, #200	; 0xc8
 8001530:	4821      	ldr	r0, [pc, #132]	; (80015b8 <main+0x840>)
 8001532:	f003 fb3b 	bl	8004bac <HAL_UART_Transmit>

					snprintf((char*) local_message, sizeof(local_message), "\r\nThat command exists.\r\n");
 8001536:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800153a:	4a20      	ldr	r2, [pc, #128]	; (80015bc <main+0x844>)
 800153c:	2164      	movs	r1, #100	; 0x64
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fe64 	bl	800620c <sniprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) local_message, strlen(local_message), 200);
 8001544:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fe4b 	bl	80001e4 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	b29a      	uxth	r2, r3
 8001552:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001556:	23c8      	movs	r3, #200	; 0xc8
 8001558:	4817      	ldr	r0, [pc, #92]	; (80015b8 <main+0x840>)
 800155a:	f003 fb27 	bl	8004bac <HAL_UART_Transmit>

					//LoRa functionality
					uint8_t tx_res = LoRa_transmit(&myLoRa, (uint8_t*) translatedCommandArray, strlen((char*) translatedCommandArray), 1000);
 800155e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fe3e 	bl	80001e4 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	b2da      	uxtb	r2, r3
 800156c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <main+0x848>)
 8001576:	f7ff fa87 	bl	8000a88 <LoRa_transmit>
 800157a:	4603      	mov	r3, r0
 800157c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
					sprintf((char*) tx_buff, "\r\nTx Result: %u\r\n\r\n", tx_res);
 8001580:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001584:	461a      	mov	r2, r3
 8001586:	490f      	ldr	r1, [pc, #60]	; (80015c4 <main+0x84c>)
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <main+0x850>)
 800158a:	f004 fe73 	bl	8006274 <siprintf>
					HAL_UART_Transmit(&huart2, tx_buff, strlen((char*) tx_buff), 1000);
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <main+0x850>)
 8001590:	f7fe fe28 	bl	80001e4 <strlen>
 8001594:	4603      	mov	r3, r0
 8001596:	b29a      	uxth	r2, r3
 8001598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159c:	490a      	ldr	r1, [pc, #40]	; (80015c8 <main+0x850>)
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <main+0x840>)
 80015a0:	f003 fb04 	bl	8004bac <HAL_UART_Transmit>
					LoRa_startReceiving(&myLoRa);
 80015a4:	4806      	ldr	r0, [pc, #24]	; (80015c0 <main+0x848>)
 80015a6:	f7ff fac7 	bl	8000b38 <LoRa_startReceiving>
				}

				/*
				 * IMPORTANT. Reset rx_complete. Otherwise the rx complete code will run all the time.
				 */
				rx_complete = 0;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <main+0x854>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
		if (rx_complete == 1) {
 80015b0:	e4a0      	b.n	8000ef4 <main+0x17c>
 80015b2:	bf00      	nop
 80015b4:	080077dc 	.word	0x080077dc
 80015b8:	200005d8 	.word	0x200005d8
 80015bc:	080077fc 	.word	0x080077fc
 80015c0:	2000065c 	.word	0x2000065c
 80015c4:	08007818 	.word	0x08007818
 80015c8:	2000018c 	.word	0x2000018c
 80015cc:	20000114 	.word	0x20000114

080015d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b096      	sub	sp, #88	; 0x58
 80015d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2244      	movs	r2, #68	; 0x44
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 fe0c 	bl	80061fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015f6:	f001 f86f 	bl	80026d8 <HAL_PWREx_ControlVoltageScaling>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001600:	f000 fa20 	bl	8001a44 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001604:	2302      	movs	r3, #2
 8001606:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160e:	2310      	movs	r3, #16
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001616:	2302      	movs	r3, #2
 8001618:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800161e:	230a      	movs	r3, #10
 8001620:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001622:	2307      	movs	r3, #7
 8001624:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001626:	2302      	movs	r3, #2
 8001628:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800162a:	2302      	movs	r3, #2
 800162c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4618      	mov	r0, r3
 8001634:	f001 f8a6 	bl	8002784 <HAL_RCC_OscConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x72>
		Error_Handler();
 800163e:	f000 fa01 	bl	8001a44 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001642:	230f      	movs	r3, #15
 8001644:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001646:	2303      	movs	r3, #3
 8001648:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001656:	463b      	mov	r3, r7
 8001658:	2104      	movs	r1, #4
 800165a:	4618      	mov	r0, r3
 800165c:	f001 fc78 	bl	8002f50 <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x9a>
		Error_Handler();
 8001666:	f000 f9ed 	bl	8001a44 <Error_Handler>
	}
}
 800166a:	bf00      	nop
 800166c:	3758      	adds	r7, #88	; 0x58
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <MX_SPI1_Init+0x74>)
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <MX_SPI1_Init+0x78>)
 800167c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_SPI1_Init+0x74>)
 8001680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001684:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_SPI1_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_SPI1_Init+0x74>)
 800168e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001692:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_SPI1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_SPI1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_SPI1_Init+0x74>)
 80016a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_SPI1_Init+0x74>)
 80016aa:	2238      	movs	r2, #56	; 0x38
 80016ac:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_SPI1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_SPI1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_SPI1_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_SPI1_Init+0x74>)
 80016c2:	2207      	movs	r2, #7
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_SPI1_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_SPI1_Init+0x74>)
 80016ce:	2208      	movs	r2, #8
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_SPI1_Init+0x74>)
 80016d4:	f002 fafe 	bl	8003cd4 <HAL_SPI_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_SPI1_Init+0x6e>
		Error_Handler();
 80016de:	f000 f9b1 	bl	8001a44 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000574 	.word	0x20000574
 80016ec:	40013000 	.word	0x40013000

080016f0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USART2_UART_Init+0x58>)
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <MX_USART2_UART_Init+0x5c>)
 80016f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_USART2_UART_Init+0x58>)
 80016fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001700:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_USART2_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART2_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART2_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001734:	f003 f9ec 	bl	8004b10 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800173e:	f000 f981 	bl	8001a44 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200005d8 	.word	0x200005d8
 800174c:	40004400 	.word	0x40004400

08001750 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <MX_GPIO_Init+0xf0>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a35      	ldr	r2, [pc, #212]	; (8001840 <MX_GPIO_Init+0xf0>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b33      	ldr	r3, [pc, #204]	; (8001840 <MX_GPIO_Init+0xf0>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <MX_GPIO_Init+0xf0>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <MX_GPIO_Init+0xf0>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <MX_GPIO_Init+0xf0>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <MX_GPIO_Init+0xf0>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a29      	ldr	r2, [pc, #164]	; (8001840 <MX_GPIO_Init+0xf0>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <MX_GPIO_Init+0xf0>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <MX_GPIO_Init+0xf0>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <MX_GPIO_Init+0xf0>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <MX_GPIO_Init+0xf0>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, reset_Pin | CS_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2150      	movs	r1, #80	; 0x50
 80017ca:	481e      	ldr	r0, [pc, #120]	; (8001844 <MX_GPIO_Init+0xf4>)
 80017cc:	f000 ff46 	bl	800265c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80017d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	4818      	ldr	r0, [pc, #96]	; (8001848 <MX_GPIO_Init+0xf8>)
 80017e8:	f000 fd8e 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pin : dio0_Pin */
	GPIO_InitStruct.Pin = dio0_Pin;
 80017ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(dio0_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f000 fd7f 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pins : reset_Pin CS_Pin */
	GPIO_InitStruct.Pin = reset_Pin | CS_Pin;
 800180a:	2350      	movs	r3, #80	; 0x50
 800180c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <MX_GPIO_Init+0xf4>)
 8001822:	f000 fd71 	bl	8002308 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2028      	movs	r0, #40	; 0x28
 800182c:	f000 fcb7 	bl	800219e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001830:	2028      	movs	r0, #40	; 0x28
 8001832:	f000 fcd0 	bl	80021d6 <HAL_NVIC_EnableIRQ>

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	48000400 	.word	0x48000400
 8001848:	48000800 	.word	0x48000800

0800184c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	; 0x40
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <HAL_UART_RxCpltCallback+0x104>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d173      	bne.n	8001948 <HAL_UART_RxCpltCallback+0xfc>

		switch (*rx_char) {
 8001860:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <HAL_UART_RxCpltCallback+0x108>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b0d      	cmp	r3, #13
 8001866:	dc10      	bgt.n	800188a <HAL_UART_RxCpltCallback+0x3e>
 8001868:	2b00      	cmp	r3, #0
 800186a:	db44      	blt.n	80018f6 <HAL_UART_RxCpltCallback+0xaa>
 800186c:	461a      	mov	r2, r3
 800186e:	2301      	movs	r3, #1
 8001870:	fa03 f202 	lsl.w	r2, r3, r2
 8001874:	f242 4301 	movw	r3, #9217	; 0x2401
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d103      	bne.n	8001890 <HAL_UART_RxCpltCallback+0x44>
 8001888:	e035      	b.n	80018f6 <HAL_UART_RxCpltCallback+0xaa>
 800188a:	2b7f      	cmp	r3, #127	; 0x7f
 800188c:	d010      	beq.n	80018b0 <HAL_UART_RxCpltCallback+0x64>
 800188e:	e032      	b.n	80018f6 <HAL_UART_RxCpltCallback+0xaa>
		// if we receive a carriage return, newline, or null terminator, then we have received a complete command
		case '\r':
		case '\n':
		case '\0': {

			strcpy((char*) safe_buff, (char*) rx_buff);
 8001890:	4931      	ldr	r1, [pc, #196]	; (8001958 <HAL_UART_RxCpltCallback+0x10c>)
 8001892:	4832      	ldr	r0, [pc, #200]	; (800195c <HAL_UART_RxCpltCallback+0x110>)
 8001894:	f004 fd1d 	bl	80062d2 <strcpy>

			memset(rx_buff, 0, sizeof(rx_buff));
 8001898:	2264      	movs	r2, #100	; 0x64
 800189a:	2100      	movs	r1, #0
 800189c:	482e      	ldr	r0, [pc, #184]	; (8001958 <HAL_UART_RxCpltCallback+0x10c>)
 800189e:	f004 fcad 	bl	80061fc <memset>
			rx_count = 0;
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_UART_RxCpltCallback+0x114>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

			rx_complete = 1;
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_UART_RxCpltCallback+0x118>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

			break;
 80018ae:	e043      	b.n	8001938 <HAL_UART_RxCpltCallback+0xec>
			//case '\b':
		case 127: {
			// set current buffer position to 0; if we are not already at index 0 then move back one index and set that value to 0 as well
			//if (rx_count > 0)

			if (rx_count > 0) {
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_UART_RxCpltCallback+0x114>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dd3e      	ble.n	8001936 <HAL_UART_RxCpltCallback+0xea>
				rx_count--;
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_UART_RxCpltCallback+0x114>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3b01      	subs	r3, #1
 80018be:	4a28      	ldr	r2, [pc, #160]	; (8001960 <HAL_UART_RxCpltCallback+0x114>)
 80018c0:	6013      	str	r3, [r2, #0]
				rx_buff[rx_count] = 0;
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_UART_RxCpltCallback+0x114>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_UART_RxCpltCallback+0x10c>)
 80018c8:	2100      	movs	r1, #0
 80018ca:	54d1      	strb	r1, [r2, r3]
				uint8_t show_input[50];
				strcpy((char*) show_input, (char*) rx_char);
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4920      	ldr	r1, [pc, #128]	; (8001954 <HAL_UART_RxCpltCallback+0x108>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fcfd 	bl	80062d2 <strcpy>
				HAL_UART_Transmit(&huart2, show_input,
						strlen((char*) show_input), 1000);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fc81 	bl	80001e4 <strlen>
 80018e2:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, show_input,
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f107 010c 	add.w	r1, r7, #12
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	4818      	ldr	r0, [pc, #96]	; (8001950 <HAL_UART_RxCpltCallback+0x104>)
 80018f0:	f003 f95c 	bl	8004bac <HAL_UART_Transmit>
			}
			//rx_buff[rx_count] = 0;

			break;
 80018f4:	e01f      	b.n	8001936 <HAL_UART_RxCpltCallback+0xea>
		}

			// we have received some other character, store it to the array
		default: {
			rx_buff[rx_count] = *rx_char;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_UART_RxCpltCallback+0x114>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_UART_RxCpltCallback+0x108>)
 80018fc:	7811      	ldrb	r1, [r2, #0]
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_UART_RxCpltCallback+0x10c>)
 8001900:	54d1      	strb	r1, [r2, r3]
			rx_count++;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_UART_RxCpltCallback+0x114>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a15      	ldr	r2, [pc, #84]	; (8001960 <HAL_UART_RxCpltCallback+0x114>)
 800190a:	6013      	str	r3, [r2, #0]
			uint8_t show_input[50];
			strcpy((char*) show_input, (char*) rx_char);
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4910      	ldr	r1, [pc, #64]	; (8001954 <HAL_UART_RxCpltCallback+0x108>)
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fcdd 	bl	80062d2 <strcpy>
			HAL_UART_Transmit(&huart2, show_input, strlen((char*) show_input),
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fc61 	bl	80001e4 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	b29a      	uxth	r2, r3
 8001926:	f107 010c 	add.w	r1, r7, #12
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x104>)
 8001930:	f003 f93c 	bl	8004bac <HAL_UART_Transmit>
					1000);
			break;
 8001934:	e000      	b.n	8001938 <HAL_UART_RxCpltCallback+0xec>
			break;
 8001936:	bf00      	nop
		}
		}

		*rx_char = 0; //In the switch statement, one of the cases is a 0, so I assume this is necessary.
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_UART_RxCpltCallback+0x108>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
		/*
		 * Leave the following line in the function. If I remove it, the user will only
		 * be able to call a single interrupt, thus only be able to type a single
		 * character into putty.
		 */
		HAL_UART_Receive_IT(&huart2, rx_char, 1);
 800193e:	2201      	movs	r2, #1
 8001940:	4904      	ldr	r1, [pc, #16]	; (8001954 <HAL_UART_RxCpltCallback+0x108>)
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <HAL_UART_RxCpltCallback+0x104>)
 8001944:	f003 f9c6 	bl	8004cd4 <HAL_UART_Receive_IT>
	}
}
 8001948:	bf00      	nop
 800194a:	3740      	adds	r7, #64	; 0x40
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200005d8 	.word	0x200005d8
 8001954:	20000110 	.word	0x20000110
 8001958:	200000ac 	.word	0x200000ac
 800195c:	2000008c 	.word	0x2000008c
 8001960:	20000118 	.word	0x20000118
 8001964:	20000114 	.word	0x20000114

08001968 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001968:	b580      	push	{r7, lr}
 800196a:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 800196e:	af00      	add	r7, sp, #0
 8001970:	4602      	mov	r2, r0
 8001972:	1dbb      	adds	r3, r7, #6
 8001974:	801a      	strh	r2, [r3, #0]
	//INITIALIZATION OF VARIABLES
	char local_message[100]; //Local buffer used for displaying general messages.
	int rssi = LoRa_getRSSI(&myLoRa); //Local variable for the "Received Signal Strength Indicator"
 8001976:	482e      	ldr	r0, [pc, #184]	; (8001a30 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001978:	f7ff f94a 	bl	8000c10 <LoRa_getRSSI>
 800197c:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
	char *received_data[128]; //Initialize/create a pointer to a character buffer called received_data of size 30.
	memset(received_data, 0, 128); //Copies 0 to all 30 cells of my received_data buffer.
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fc37 	bl	80061fc <memset>
	uint8_t packet_size = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	packet_size = LoRa_receive(&myLoRa, received_data, 30);
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	221e      	movs	r2, #30
 800199a:	4619      	mov	r1, r3
 800199c:	4824      	ldr	r0, [pc, #144]	; (8001a30 <HAL_GPIO_EXTI_Callback+0xc8>)
 800199e:	f7ff f8d7 	bl	8000b50 <LoRa_receive>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273

	//PRINTING INFORMATION ABOUT THE RAW DATA RECEIVED.
	snprintf((char*) local_message, sizeof(local_message),
 80019a8:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80019ac:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_GPIO_EXTI_Callback+0xcc>)
 80019b2:	2164      	movs	r1, #100	; 0x64
 80019b4:	f004 fc2a 	bl	800620c <sniprintf>
			"Packet size: %d\n\r", packet_size);
	HAL_UART_Transmit(&huart2, (uint8_t*) local_message, strlen(local_message),
 80019b8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fc11 	bl	80001e4 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80019ca:	23c8      	movs	r3, #200	; 0xc8
 80019cc:	481a      	ldr	r0, [pc, #104]	; (8001a38 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019ce:	f003 f8ed 	bl	8004bac <HAL_UART_Transmit>
			200);
	snprintf((char*) local_message, sizeof(local_message),
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_GPIO_EXTI_Callback+0xd4>)
 80019dc:	2164      	movs	r1, #100	; 0x64
 80019de:	f004 fc15 	bl	800620c <sniprintf>
			"Received data: %s\n\r", received_data);
	HAL_UART_Transmit(&huart2, (uint8_t*) local_message, strlen(local_message),
 80019e2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fbfc 	bl	80001e4 <strlen>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80019f4:	23c8      	movs	r3, #200	; 0xc8
 80019f6:	4810      	ldr	r0, [pc, #64]	; (8001a38 <HAL_GPIO_EXTI_Callback+0xd0>)
 80019f8:	f003 f8d8 	bl	8004bac <HAL_UART_Transmit>
			200);
	snprintf((char*) local_message, sizeof(local_message), "RSSI value: %d\n\r",
 80019fc:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8001a00:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001a06:	2164      	movs	r1, #100	; 0x64
 8001a08:	f004 fc00 	bl	800620c <sniprintf>
			rssi);
	HAL_UART_Transmit(&huart2, (uint8_t*) local_message, strlen(local_message),
 8001a0c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fbe7 	bl	80001e4 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8001a1e:	23c8      	movs	r3, #200	; 0xc8
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001a22:	f003 f8c3 	bl	8004bac <HAL_UART_Transmit>
			200);

}
 8001a26:	bf00      	nop
 8001a28:	f507 771e 	add.w	r7, r7, #632	; 0x278
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000065c 	.word	0x2000065c
 8001a34:	0800782c 	.word	0x0800782c
 8001a38:	200005d8 	.word	0x200005d8
 8001a3c:	08007840 	.word	0x08007840
 8001a40:	08007854 	.word	0x08007854

08001a44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_MspInit+0x44>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_MspInit+0x44>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6613      	str	r3, [r2, #96]	; 0x60
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_MspInit+0x44>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_MspInit+0x44>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_MspInit+0x44>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_MspInit+0x44>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_SPI_MspInit+0x7c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d128      	bne.n	8001b0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_SPI_MspInit+0x80>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abe:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a10      	ldr	r2, [pc, #64]	; (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_SPI_MspInit+0x80>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aea:	23e0      	movs	r3, #224	; 0xe0
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001afa:	2305      	movs	r3, #5
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b08:	f000 fbfe 	bl	8002308 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40013000 	.word	0x40013000
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0ac      	sub	sp, #176	; 0xb0
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2288      	movs	r2, #136	; 0x88
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 fb5d 	bl	80061fc <memset>
  if(huart->Instance==USART2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a25      	ldr	r2, [pc, #148]	; (8001bdc <HAL_UART_MspInit+0xc0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d143      	bne.n	8001bd4 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fbff 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b64:	f7ff ff6e 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b72:	6593      	str	r3, [r2, #88]	; 0x58
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f000 fba2 	bl	8002308 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2026      	movs	r0, #38	; 0x26
 8001bca:	f000 fae8 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bce:	2026      	movs	r0, #38	; 0x26
 8001bd0:	f000 fb01 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	37b0      	adds	r7, #176	; 0xb0
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	40021000 	.word	0x40021000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f996 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <USART2_IRQHandler+0x10>)
 8001c3e:	f003 f89f 	bl	8004d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200005d8 	.word	0x200005d8

08001c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(dio0_Pin);
 8001c50:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c54:	f000 fd1a 	bl	800268c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c5c:	f000 fd16 	bl	800268c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
	return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_kill>:

int _kill(int pid, int sig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c7e:	f004 fa93 	bl	80061a8 <__errno>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2216      	movs	r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
	return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_exit>:

void _exit (int status)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffe7 	bl	8001c74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ca6:	e7fe      	b.n	8001ca6 <_exit+0x12>

08001ca8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e00a      	b.n	8001cd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cba:	f3af 8000 	nop.w
 8001cbe:	4601      	mov	r1, r0
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	60ba      	str	r2, [r7, #8]
 8001cc6:	b2ca      	uxtb	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbf0      	blt.n	8001cba <_read+0x12>
	}

return len;
 8001cd8:	687b      	ldr	r3, [r7, #4]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e009      	b.n	8001d08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60ba      	str	r2, [r7, #8]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf1      	blt.n	8001cf4 <_write+0x12>
	}
	return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_close>:

int _close(int file)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
	return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d42:	605a      	str	r2, [r3, #4]
	return 0;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_isatty>:

int _isatty(int file)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
	return 1;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
	return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f004 f9f8 	bl	80061a8 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20018000 	.word	0x20018000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	2000011c 	.word	0x2000011c
 8001dec:	200006a0 	.word	0x200006a0

08001df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <SystemInit+0x5c>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <SystemInit+0x5c>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <SystemInit+0x60>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <SystemInit+0x60>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <SystemInit+0x60>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <SystemInit+0x60>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <SystemInit+0x60>)
 8001e1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <SystemInit+0x60>)
 8001e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <SystemInit+0x60>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <SystemInit+0x60>)
 8001e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SystemInit+0x60>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00
 8001e50:	40021000 	.word	0x40021000

08001e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e58:	f7ff ffca 	bl	8001df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e5e:	e003      	b.n	8001e68 <LoopCopyDataInit>

08001e60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e66:	3104      	adds	r1, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e68:	480a      	ldr	r0, [pc, #40]	; (8001e94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e70:	d3f6      	bcc.n	8001e60 <CopyDataInit>
	ldr	r2, =_sbss
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e74:	e002      	b.n	8001e7c <LoopFillZerobss>

08001e76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e78:	f842 3b04 	str.w	r3, [r2], #4

08001e7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <LoopForever+0x16>)
	cmp	r2, r3
 8001e7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e80:	d3f9      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e82:	f004 f997 	bl	80061b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e86:	f7fe ff77 	bl	8000d78 <main>

08001e8a <LoopForever>:

LoopForever:
    b LoopForever
 8001e8a:	e7fe      	b.n	8001e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001e90:	08007a0c 	.word	0x08007a0c
	ldr	r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e98:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001e9c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001ea0:	2000069c 	.word	0x2000069c

08001ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC1_2_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_Init+0x3c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_Init+0x3c>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebe:	2003      	movs	r0, #3
 8001ec0:	f000 f962 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f000 f80f 	bl	8001ee8 <HAL_InitTick>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	e001      	b.n	8001eda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ed6:	f7ff fdbb 	bl	8001a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eda:	79fb      	ldrb	r3, [r7, #7]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_InitTick+0x6c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d023      	beq.n	8001f44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_InitTick+0x70>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_InitTick+0x6c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f96d 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d809      	bhi.n	8001f38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f24:	2200      	movs	r2, #0
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f000 f937 	bl	800219e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_InitTick+0x74>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e007      	b.n	8001f48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e004      	b.n	8001f48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e001      	b.n	8001f48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000688 	.word	0x20000688

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000688 	.word	0x20000688

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000008 	.word	0x20000008

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	; (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff3e 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff31 	bl	800204c <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d008      	beq.n	8002234 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2204      	movs	r2, #4
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e022      	b.n	800227a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 020e 	bic.w	r2, r2, #14
 8002242:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f003 021c 	and.w	r2, r3, #28
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d005      	beq.n	80022aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e029      	b.n	80022fe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 020e 	bic.w	r2, r2, #14
 80022b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f003 021c 	and.w	r2, r3, #28
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
    }
  }
  return status;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002316:	e17f      	b.n	8002618 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8171 	beq.w	8002612 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d005      	beq.n	8002348 <HAL_GPIO_Init+0x40>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d130      	bne.n	80023aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800237e:	2201      	movs	r2, #1
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 0201 	and.w	r2, r3, #1
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d118      	bne.n	80023e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023bc:	2201      	movs	r2, #1
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	f003 0201 	and.w	r2, r3, #1
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d017      	beq.n	8002424 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d123      	bne.n	8002478 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	6939      	ldr	r1, [r7, #16]
 8002474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0203 	and.w	r2, r3, #3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80ac 	beq.w	8002612 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	4b5f      	ldr	r3, [pc, #380]	; (8002638 <HAL_GPIO_Init+0x330>)
 80024bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024be:	4a5e      	ldr	r2, [pc, #376]	; (8002638 <HAL_GPIO_Init+0x330>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6613      	str	r3, [r2, #96]	; 0x60
 80024c6:	4b5c      	ldr	r3, [pc, #368]	; (8002638 <HAL_GPIO_Init+0x330>)
 80024c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024d2:	4a5a      	ldr	r2, [pc, #360]	; (800263c <HAL_GPIO_Init+0x334>)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024fc:	d025      	beq.n	800254a <HAL_GPIO_Init+0x242>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4f      	ldr	r2, [pc, #316]	; (8002640 <HAL_GPIO_Init+0x338>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01f      	beq.n	8002546 <HAL_GPIO_Init+0x23e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4e      	ldr	r2, [pc, #312]	; (8002644 <HAL_GPIO_Init+0x33c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d019      	beq.n	8002542 <HAL_GPIO_Init+0x23a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4d      	ldr	r2, [pc, #308]	; (8002648 <HAL_GPIO_Init+0x340>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0x236>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4c      	ldr	r2, [pc, #304]	; (800264c <HAL_GPIO_Init+0x344>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00d      	beq.n	800253a <HAL_GPIO_Init+0x232>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4b      	ldr	r2, [pc, #300]	; (8002650 <HAL_GPIO_Init+0x348>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x22e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4a      	ldr	r2, [pc, #296]	; (8002654 <HAL_GPIO_Init+0x34c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_GPIO_Init+0x22a>
 800252e:	2306      	movs	r3, #6
 8002530:	e00c      	b.n	800254c <HAL_GPIO_Init+0x244>
 8002532:	2307      	movs	r3, #7
 8002534:	e00a      	b.n	800254c <HAL_GPIO_Init+0x244>
 8002536:	2305      	movs	r3, #5
 8002538:	e008      	b.n	800254c <HAL_GPIO_Init+0x244>
 800253a:	2304      	movs	r3, #4
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x244>
 800253e:	2303      	movs	r3, #3
 8002540:	e004      	b.n	800254c <HAL_GPIO_Init+0x244>
 8002542:	2302      	movs	r3, #2
 8002544:	e002      	b.n	800254c <HAL_GPIO_Init+0x244>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x244>
 800254a:	2300      	movs	r3, #0
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	f002 0203 	and.w	r2, r2, #3
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	4093      	lsls	r3, r2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800255c:	4937      	ldr	r1, [pc, #220]	; (800263c <HAL_GPIO_Init+0x334>)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_GPIO_Init+0x350>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800258e:	4a32      	ldr	r2, [pc, #200]	; (8002658 <HAL_GPIO_Init+0x350>)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <HAL_GPIO_Init+0x350>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025b8:	4a27      	ldr	r2, [pc, #156]	; (8002658 <HAL_GPIO_Init+0x350>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025be:	4b26      	ldr	r3, [pc, #152]	; (8002658 <HAL_GPIO_Init+0x350>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_GPIO_Init+0x350>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_GPIO_Init+0x350>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800260c:	4a12      	ldr	r2, [pc, #72]	; (8002658 <HAL_GPIO_Init+0x350>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	f47f ae78 	bne.w	8002318 <HAL_GPIO_Init+0x10>
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	40010000 	.word	0x40010000
 8002640:	48000400 	.word	0x48000400
 8002644:	48000800 	.word	0x48000800
 8002648:	48000c00 	.word	0x48000c00
 800264c:	48001000 	.word	0x48001000
 8002650:	48001400 	.word	0x48001400
 8002654:	48001800 	.word	0x48001800
 8002658:	40010400 	.word	0x40010400

0800265c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]
 8002668:	4613      	mov	r3, r2
 800266a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800266c:	787b      	ldrb	r3, [r7, #1]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002678:	e002      	b.n	8002680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f95c 	bl	8001968 <HAL_GPIO_EXTI_Callback>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40010400 	.word	0x40010400

080026bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40007000 	.word	0x40007000

080026d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e6:	d130      	bne.n	800274a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f4:	d038      	beq.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026fe:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002706:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2232      	movs	r2, #50	; 0x32
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0c9b      	lsrs	r3, r3, #18
 8002718:	3301      	adds	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271c:	e002      	b.n	8002724 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3b01      	subs	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002730:	d102      	bne.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f2      	bne.n	800271e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002744:	d110      	bne.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e00f      	b.n	800276a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002756:	d007      	beq.n	8002768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002760:	4a05      	ldr	r2, [pc, #20]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002766:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40007000 	.word	0x40007000
 800277c:	20000000 	.word	0x20000000
 8002780:	431bde83 	.word	0x431bde83

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e3d4      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	4ba1      	ldr	r3, [pc, #644]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a0:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80e4 	beq.w	8002980 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_RCC_OscConfig+0x4a>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	f040 808b 	bne.w	80028dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 8087 	bne.w	80028dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ce:	4b93      	ldr	r3, [pc, #588]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_RCC_OscConfig+0x62>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e3ac      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	4b8c      	ldr	r3, [pc, #560]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_RCC_OscConfig+0x7c>
 80027f6:	4b89      	ldr	r3, [pc, #548]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fe:	e005      	b.n	800280c <HAL_RCC_OscConfig+0x88>
 8002800:	4b86      	ldr	r3, [pc, #536]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800280c:	4293      	cmp	r3, r2
 800280e:	d223      	bcs.n	8002858 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fd41 	bl	800329c <RCC_SetFlashLatencyFromMSIRange>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e38d      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002824:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7c      	ldr	r2, [pc, #496]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4977      	ldr	r1, [pc, #476]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	4972      	ldr	r1, [pc, #456]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
 8002856:	e025      	b.n	80028a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002858:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a6f      	ldr	r2, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	496a      	ldr	r1, [pc, #424]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002876:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	4965      	ldr	r1, [pc, #404]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fd01 	bl	800329c <RCC_SetFlashLatencyFromMSIRange>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e34d      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a4:	f000 fc36 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b5c      	ldr	r3, [pc, #368]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	495a      	ldr	r1, [pc, #360]	; (8002a20 <HAL_RCC_OscConfig+0x29c>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_RCC_OscConfig+0x2a0>)
 80028c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028c4:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <HAL_RCC_OscConfig+0x2a4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fb0d 	bl	8001ee8 <HAL_InitTick>
 80028ce:	4603      	mov	r3, r0
 80028d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d052      	beq.n	800297e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	e331      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d032      	beq.n	800294a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e4:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a4c      	ldr	r2, [pc, #304]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f0:	f7ff fb4a 	bl	8001f88 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f8:	f7ff fb46 	bl	8001f88 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e31a      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800290a:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a40      	ldr	r2, [pc, #256]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 800291c:	f043 0308 	orr.w	r3, r3, #8
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	493b      	ldr	r1, [pc, #236]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002934:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	4936      	ldr	r1, [pc, #216]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
 8002948:	e01a      	b.n	8002980 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800294a:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a33      	ldr	r2, [pc, #204]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002956:	f7ff fb17 	bl	8001f88 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800295e:	f7ff fb13 	bl	8001f88 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e2e7      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x1da>
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800297e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d074      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b08      	cmp	r3, #8
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x21a>
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d10e      	bne.n	80029b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d10b      	bne.n	80029b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299e:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d064      	beq.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d160      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e2c4      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x24a>
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e01d      	b.n	8002a0a <HAL_RCC_OscConfig+0x286>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d6:	d10c      	bne.n	80029f2 <HAL_RCC_OscConfig+0x26e>
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80029de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0c      	ldr	r2, [pc, #48]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e00b      	b.n	8002a0a <HAL_RCC_OscConfig+0x286>
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <HAL_RCC_OscConfig+0x298>)
 8002a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7ff fab9 	bl	8001f88 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a18:	e011      	b.n	8002a3e <HAL_RCC_OscConfig+0x2ba>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	08007868 	.word	0x08007868
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7ff faac 	bl	8001f88 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e280      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3e:	4baf      	ldr	r3, [pc, #700]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x2a8>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7ff fa9c 	bl	8001f88 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7ff fa98 	bl	8001f88 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e26c      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a66:	4ba5      	ldr	r3, [pc, #660]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2d0>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d060      	beq.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x310>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d119      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d116      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a94:	4b99      	ldr	r3, [pc, #612]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x328>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e249      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b93      	ldr	r3, [pc, #588]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	4990      	ldr	r1, [pc, #576]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac0:	e040      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d023      	beq.n	8002b12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aca:	4b8c      	ldr	r3, [pc, #560]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a8b      	ldr	r2, [pc, #556]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fa57 	bl	8001f88 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ade:	f7ff fa53 	bl	8001f88 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e227      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af0:	4b82      	ldr	r3, [pc, #520]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	497c      	ldr	r1, [pc, #496]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
 8002b10:	e018      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a79      	ldr	r2, [pc, #484]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7ff fa33 	bl	8001f88 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b26:	f7ff fa2f 	bl	8001f88 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e203      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b38:	4b70      	ldr	r3, [pc, #448]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d03c      	beq.n	8002bca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b58:	4b68      	ldr	r3, [pc, #416]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5e:	4a67      	ldr	r2, [pc, #412]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7ff fa0e 	bl	8001f88 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b70:	f7ff fa0a 	bl	8001f88 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1de      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b82:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ef      	beq.n	8002b70 <HAL_RCC_OscConfig+0x3ec>
 8002b90:	e01b      	b.n	8002bca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b92:	4b5a      	ldr	r3, [pc, #360]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b98:	4a58      	ldr	r2, [pc, #352]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7ff f9f1 	bl	8001f88 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002baa:	f7ff f9ed 	bl	8001f88 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1c1      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ef      	bne.n	8002baa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80a6 	beq.w	8002d24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bdc:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10d      	bne.n	8002c04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b44      	ldr	r3, [pc, #272]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf4:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCC_OscConfig+0x57c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d118      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_OscConfig+0x57c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a3a      	ldr	r2, [pc, #232]	; (8002d00 <HAL_RCC_OscConfig+0x57c>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1c:	f7ff f9b4 	bl	8001f88 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c24:	f7ff f9b0 	bl	8001f88 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e184      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_RCC_OscConfig+0x57c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4d8>
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c5a:	e024      	b.n	8002ca6 <HAL_RCC_OscConfig+0x522>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d110      	bne.n	8002c86 <HAL_RCC_OscConfig+0x502>
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c84:	e00f      	b.n	8002ca6 <HAL_RCC_OscConfig+0x522>
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d016      	beq.n	8002cdc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7ff f96b 	bl	8001f88 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7ff f967 	bl	8001f88 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e139      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_OscConfig+0x578>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0ed      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x532>
 8002cda:	e01a      	b.n	8002d12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7ff f954 	bl	8001f88 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce2:	e00f      	b.n	8002d04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7ff f950 	bl	8001f88 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d906      	bls.n	8002d04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e122      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d04:	4b90      	ldr	r3, [pc, #576]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1e8      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b8b      	ldr	r3, [pc, #556]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	4a8a      	ldr	r2, [pc, #552]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8108 	beq.w	8002f3e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	f040 80d0 	bne.w	8002ed8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d38:	4b83      	ldr	r3, [pc, #524]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d130      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	3b01      	subs	r3, #1
 8002d58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d127      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11f      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d78:	2a07      	cmp	r2, #7
 8002d7a:	bf14      	ite	ne
 8002d7c:	2201      	movne	r2, #1
 8002d7e:	2200      	moveq	r2, #0
 8002d80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d113      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	3b01      	subs	r3, #1
 8002d94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	3b01      	subs	r3, #1
 8002da8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d06e      	beq.n	8002e8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d069      	beq.n	8002e88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002db4:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0b7      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b5d      	ldr	r3, [pc, #372]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a5c      	ldr	r2, [pc, #368]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ddc:	f7ff f8d4 	bl	8001f88 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7ff f8d0 	bl	8001f88 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0a4      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df6:	4b54      	ldr	r3, [pc, #336]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e02:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	4b51      	ldr	r3, [pc, #324]	; (8002f4c <HAL_RCC_OscConfig+0x7c8>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e12:	3a01      	subs	r2, #1
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	4311      	orrs	r1, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e1c:	0212      	lsls	r2, r2, #8
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e24:	0852      	lsrs	r2, r2, #1
 8002e26:	3a01      	subs	r2, #1
 8002e28:	0552      	lsls	r2, r2, #21
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e30:	0852      	lsrs	r2, r2, #1
 8002e32:	3a01      	subs	r2, #1
 8002e34:	0652      	lsls	r2, r2, #25
 8002e36:	4311      	orrs	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e3c:	0912      	lsrs	r2, r2, #4
 8002e3e:	0452      	lsls	r2, r2, #17
 8002e40:	430a      	orrs	r2, r1
 8002e42:	4941      	ldr	r1, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e48:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a3e      	ldr	r2, [pc, #248]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e54:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a3b      	ldr	r2, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e60:	f7ff f892 	bl	8001f88 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7ff f88e 	bl	8001f88 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e062      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e86:	e05a      	b.n	8002f3e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e059      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d152      	bne.n	8002f3e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a2a      	ldr	r2, [pc, #168]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a27      	ldr	r2, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eb0:	f7ff f86a 	bl	8001f88 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7ff f866 	bl	8001f88 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e03a      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x734>
 8002ed6:	e032      	b.n	8002f3e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d02d      	beq.n	8002f3a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002ee4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002efc:	f023 0303 	bic.w	r3, r3, #3
 8002f00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002f08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7ff f839 	bl	8001f88 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7ff f835 	bl	8001f88 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e009      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x7c4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCC_OscConfig+0x796>
 8002f38:	e001      	b.n	8002f3e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3720      	adds	r7, #32
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	f99d808c 	.word	0xf99d808c

08002f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0c8      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_RCC_ClockConfig+0x1b0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d910      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <HAL_RCC_ClockConfig+0x1b0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 0207 	bic.w	r2, r3, #7
 8002f7a:	4961      	ldr	r1, [pc, #388]	; (8003100 <HAL_RCC_ClockConfig+0x1b0>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b5f      	ldr	r3, [pc, #380]	; (8003100 <HAL_RCC_ClockConfig+0x1b0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b0      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d04c      	beq.n	800303a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa8:	4b56      	ldr	r3, [pc, #344]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d121      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e09e      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d115      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e092      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fd8:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e086      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe8:	4b46      	ldr	r3, [pc, #280]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e07e      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff8:	4b42      	ldr	r3, [pc, #264]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f023 0203 	bic.w	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	493f      	ldr	r1, [pc, #252]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300a:	f7fe ffbd 	bl	8001f88 <HAL_GetTick>
 800300e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003010:	e00a      	b.n	8003028 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003012:	f7fe ffb9 	bl	8001f88 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e066      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 020c 	and.w	r2, r3, #12
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	429a      	cmp	r2, r3
 8003038:	d1eb      	bne.n	8003012 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003046:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	492c      	ldr	r1, [pc, #176]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003058:	4b29      	ldr	r3, [pc, #164]	; (8003100 <HAL_RCC_ClockConfig+0x1b0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d210      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <HAL_RCC_ClockConfig+0x1b0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 0207 	bic.w	r2, r3, #7
 800306e:	4924      	ldr	r1, [pc, #144]	; (8003100 <HAL_RCC_ClockConfig+0x1b0>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b22      	ldr	r3, [pc, #136]	; (8003100 <HAL_RCC_ClockConfig+0x1b0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e036      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4918      	ldr	r1, [pc, #96]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4910      	ldr	r1, [pc, #64]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030c6:	f000 f825 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_RCC_ClockConfig+0x1b4>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490c      	ldr	r1, [pc, #48]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fefc 	bl	8001ee8 <HAL_InitTick>
 80030f0:	4603      	mov	r3, r0
 80030f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80030f4:	7afb      	ldrb	r3, [r7, #11]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40022000 	.word	0x40022000
 8003104:	40021000 	.word	0x40021000
 8003108:	08007868 	.word	0x08007868
 800310c:	20000000 	.word	0x20000000
 8003110:	20000004 	.word	0x20000004

08003114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312c:	4b3b      	ldr	r3, [pc, #236]	; (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x34>
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b0c      	cmp	r3, #12
 8003140:	d121      	bne.n	8003186 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d11e      	bne.n	8003186 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003148:	4b34      	ldr	r3, [pc, #208]	; (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d107      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003154:	4b31      	ldr	r3, [pc, #196]	; (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 8003156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e005      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003164:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003170:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003178:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10d      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003184:	e00a      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d102      	bne.n	8003192 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_RCC_GetSysClockFreq+0x110>)
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e004      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d101      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003198:	4b23      	ldr	r3, [pc, #140]	; (8003228 <HAL_RCC_GetSysClockFreq+0x114>)
 800319a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d134      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031a2:	4b1e      	ldr	r3, [pc, #120]	; (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d003      	beq.n	80031ba <HAL_RCC_GetSysClockFreq+0xa6>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d003      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0xac>
 80031b8:	e005      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_RCC_GetSysClockFreq+0x110>)
 80031bc:	617b      	str	r3, [r7, #20]
      break;
 80031be:	e005      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_GetSysClockFreq+0x114>)
 80031c2:	617b      	str	r3, [r7, #20]
      break;
 80031c4:	e002      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	617b      	str	r3, [r7, #20]
      break;
 80031ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	3301      	adds	r3, #1
 80031d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	fb02 f203 	mul.w	r2, r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_GetSysClockFreq+0x108>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	0e5b      	lsrs	r3, r3, #25
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	3301      	adds	r3, #1
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800320c:	69bb      	ldr	r3, [r7, #24]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3724      	adds	r7, #36	; 0x24
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	08007880 	.word	0x08007880
 8003224:	00f42400 	.word	0x00f42400
 8003228:	007a1200 	.word	0x007a1200

0800322c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_RCC_GetHCLKFreq+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003248:	f7ff fff0 	bl	800322c <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4904      	ldr	r1, [pc, #16]	; (800326c <HAL_RCC_GetPCLK1Freq+0x28>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	08007878 	.word	0x08007878

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003274:	f7ff ffda 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0adb      	lsrs	r3, r3, #11
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	08007878 	.word	0x08007878

0800329c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032a8:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032b4:	f7ff fa02 	bl	80026bc <HAL_PWREx_GetVoltageRange>
 80032b8:	6178      	str	r0, [r7, #20]
 80032ba:	e014      	b.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	4a24      	ldr	r2, [pc, #144]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c6:	6593      	str	r3, [r2, #88]	; 0x58
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032d4:	f7ff f9f2 	bl	80026bc <HAL_PWREx_GetVoltageRange>
 80032d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d10b      	bne.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b80      	cmp	r3, #128	; 0x80
 80032f2:	d919      	bls.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2ba0      	cmp	r3, #160	; 0xa0
 80032f8:	d902      	bls.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032fa:	2302      	movs	r3, #2
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e013      	b.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003300:	2301      	movs	r3, #1
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e010      	b.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b80      	cmp	r3, #128	; 0x80
 800330a:	d902      	bls.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800330c:	2303      	movs	r3, #3
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	e00a      	b.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d102      	bne.n	800331e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003318:	2302      	movs	r3, #2
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	e004      	b.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d101      	bne.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003324:	2301      	movs	r3, #1
 8003326:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 0207 	bic.w	r2, r3, #7
 8003330:	4909      	ldr	r1, [pc, #36]	; (8003358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	40022000 	.word	0x40022000

0800335c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003364:	2300      	movs	r3, #0
 8003366:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003368:	2300      	movs	r3, #0
 800336a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003374:	2b00      	cmp	r3, #0
 8003376:	d041      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800337c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003380:	d02a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003382:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003386:	d824      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003388:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800338c:	d008      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800338e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003392:	d81e      	bhi.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800339c:	d010      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800339e:	e018      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033a0:	4b86      	ldr	r3, [pc, #536]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a85      	ldr	r2, [pc, #532]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ac:	e015      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fabb 	bl	8003930 <RCCEx_PLLSAI1_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033be:	e00c      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3320      	adds	r3, #32
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fba6 	bl	8003b18 <RCCEx_PLLSAI2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d0:	e003      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	74fb      	strb	r3, [r7, #19]
      break;
 80033d6:	e000      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033da:	7cfb      	ldrb	r3, [r7, #19]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e0:	4b76      	ldr	r3, [pc, #472]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ee:	4973      	ldr	r1, [pc, #460]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033f6:	e001      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d041      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800340c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003410:	d02a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003412:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003416:	d824      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800341c:	d008      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800341e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003422:	d81e      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342c:	d010      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800342e:	e018      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003430:	4b62      	ldr	r3, [pc, #392]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a61      	ldr	r2, [pc, #388]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800343c:	e015      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3304      	adds	r3, #4
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fa73 	bl	8003930 <RCCEx_PLLSAI1_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800344e:	e00c      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3320      	adds	r3, #32
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fb5e 	bl	8003b18 <RCCEx_PLLSAI2_Config>
 800345c:	4603      	mov	r3, r0
 800345e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003460:	e003      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	74fb      	strb	r3, [r7, #19]
      break;
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800346a:	7cfb      	ldrb	r3, [r7, #19]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003470:	4b52      	ldr	r3, [pc, #328]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347e:	494f      	ldr	r1, [pc, #316]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003486:	e001      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a0 	beq.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800349e:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b41      	ldr	r3, [pc, #260]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4a40      	ldr	r2, [pc, #256]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
 80034c0:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034cc:	2301      	movs	r3, #1
 80034ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d0:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3a      	ldr	r2, [pc, #232]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034dc:	f7fe fd54 	bl	8001f88 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034e2:	e009      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e4:	f7fe fd50 	bl	8001f88 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d902      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	74fb      	strb	r3, [r7, #19]
        break;
 80034f6:	e005      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f8:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ef      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d15c      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003514:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01f      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	429a      	cmp	r2, r3
 8003526:	d019      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003528:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003532:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	4a20      	ldr	r2, [pc, #128]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003554:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7fe fd0f 	bl	8001f88 <HAL_GetTick>
 800356a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356c:	e00b      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fe fd0b 	bl	8001f88 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	; 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d902      	bls.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	74fb      	strb	r3, [r7, #19]
            break;
 8003584:	e006      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ec      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10c      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035aa:	4904      	ldr	r1, [pc, #16]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035b2:	e009      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
 80035b8:	e006      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c8:	7c7b      	ldrb	r3, [r7, #17]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d105      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ce:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	4a9d      	ldr	r2, [pc, #628]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e6:	4b98      	ldr	r3, [pc, #608]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f023 0203 	bic.w	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	4994      	ldr	r1, [pc, #592]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003608:	4b8f      	ldr	r3, [pc, #572]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f023 020c 	bic.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	498c      	ldr	r1, [pc, #560]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800362a:	4b87      	ldr	r3, [pc, #540]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	4983      	ldr	r1, [pc, #524]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800364c:	4b7e      	ldr	r3, [pc, #504]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	497b      	ldr	r1, [pc, #492]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800366e:	4b76      	ldr	r3, [pc, #472]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367c:	4972      	ldr	r1, [pc, #456]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003690:	4b6d      	ldr	r3, [pc, #436]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369e:	496a      	ldr	r1, [pc, #424]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b2:	4b65      	ldr	r3, [pc, #404]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	4961      	ldr	r1, [pc, #388]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036d4:	4b5c      	ldr	r3, [pc, #368]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e2:	4959      	ldr	r1, [pc, #356]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f6:	4b54      	ldr	r3, [pc, #336]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003704:	4950      	ldr	r1, [pc, #320]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003718:	4b4b      	ldr	r3, [pc, #300]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	4948      	ldr	r1, [pc, #288]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800373a:	4b43      	ldr	r3, [pc, #268]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	493f      	ldr	r1, [pc, #252]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d028      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800375c:	4b3a      	ldr	r3, [pc, #232]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376a:	4937      	ldr	r1, [pc, #220]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800377a:	d106      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800377c:	4b32      	ldr	r3, [pc, #200]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4a31      	ldr	r2, [pc, #196]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003786:	60d3      	str	r3, [r2, #12]
 8003788:	e011      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003792:	d10c      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	2101      	movs	r1, #1
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f8c8 	bl	8003930 <RCCEx_PLLSAI1_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d028      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	491f      	ldr	r1, [pc, #124]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d8:	d106      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e4:	60d3      	str	r3, [r2, #12]
 80037e6:	e011      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f0:	d10c      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3304      	adds	r3, #4
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f899 	bl	8003930 <RCCEx_PLLSAI1_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003802:	7cfb      	ldrb	r3, [r7, #19]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02b      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003826:	4908      	ldr	r1, [pc, #32]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003836:	d109      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a02      	ldr	r2, [pc, #8]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003842:	60d3      	str	r3, [r2, #12]
 8003844:	e014      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003854:	d10c      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f867 	bl	8003930 <RCCEx_PLLSAI1_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d02f      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388a:	4928      	ldr	r1, [pc, #160]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800389a:	d10d      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f844 	bl	8003930 <RCCEx_PLLSAI1_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ac:	7cfb      	ldrb	r3, [r7, #19]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	74bb      	strb	r3, [r7, #18]
 80038b6:	e011      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3320      	adds	r3, #32
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f925 	bl	8003b18 <RCCEx_PLLSAI2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038e8:	4b10      	ldr	r3, [pc, #64]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f6:	490d      	ldr	r1, [pc, #52]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391a:	4904      	ldr	r1, [pc, #16]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003922:	7cbb      	ldrb	r3, [r7, #18]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000

08003930 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800393e:	4b75      	ldr	r3, [pc, #468]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d018      	beq.n	800397c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800394a:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0203 	and.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d10d      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
       ||
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003962:	4b6c      	ldr	r3, [pc, #432]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
       ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d047      	beq.n	8003a06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e044      	b.n	8003a06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d018      	beq.n	80039b6 <RCCEx_PLLSAI1_Config+0x86>
 8003984:	2b03      	cmp	r3, #3
 8003986:	d825      	bhi.n	80039d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <RCCEx_PLLSAI1_Config+0x62>
 800398c:	2b02      	cmp	r3, #2
 800398e:	d009      	beq.n	80039a4 <RCCEx_PLLSAI1_Config+0x74>
 8003990:	e020      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003992:	4b60      	ldr	r3, [pc, #384]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11d      	bne.n	80039da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a2:	e01a      	b.n	80039da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a4:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b4:	e013      	b.n	80039de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039b6:	4b57      	ldr	r3, [pc, #348]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039d2:	e006      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e004      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039da:	bf00      	nop
 80039dc:	e002      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10d      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ea:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	430b      	orrs	r3, r1
 8003a00:	4944      	ldr	r1, [pc, #272]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d17d      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a0c:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a40      	ldr	r2, [pc, #256]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fe fab6 	bl	8001f88 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a20:	f7fe fab2 	bl	8001f88 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
        break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a34:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ef      	bne.n	8003a20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d160      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d111      	bne.n	8003a70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4c:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	0211      	lsls	r1, r2, #8
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	0912      	lsrs	r2, r2, #4
 8003a64:	0452      	lsls	r2, r2, #17
 8003a66:	430a      	orrs	r2, r1
 8003a68:	492a      	ldr	r1, [pc, #168]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	610b      	str	r3, [r1, #16]
 8003a6e:	e027      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d112      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a76:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6892      	ldr	r2, [r2, #8]
 8003a86:	0211      	lsls	r1, r2, #8
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6912      	ldr	r2, [r2, #16]
 8003a8c:	0852      	lsrs	r2, r2, #1
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	0552      	lsls	r2, r2, #21
 8003a92:	430a      	orrs	r2, r1
 8003a94:	491f      	ldr	r1, [pc, #124]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	610b      	str	r3, [r1, #16]
 8003a9a:	e011      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6892      	ldr	r2, [r2, #8]
 8003aac:	0211      	lsls	r1, r2, #8
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6952      	ldr	r2, [r2, #20]
 8003ab2:	0852      	lsrs	r2, r2, #1
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	0652      	lsls	r2, r2, #25
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	4916      	ldr	r1, [pc, #88]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fe fa5c 	bl	8001f88 <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ad2:	e009      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad4:	f7fe fa58 	bl	8001f88 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ae6:	e005      	b.n	8003af4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	4904      	ldr	r1, [pc, #16]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000

08003b18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b26:	4b6a      	ldr	r3, [pc, #424]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d018      	beq.n	8003b64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b32:	4b67      	ldr	r3, [pc, #412]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0203 	and.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d10d      	bne.n	8003b5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
       ||
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b4a:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
       ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d047      	beq.n	8003bee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	e044      	b.n	8003bee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d018      	beq.n	8003b9e <RCCEx_PLLSAI2_Config+0x86>
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d825      	bhi.n	8003bbc <RCCEx_PLLSAI2_Config+0xa4>
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d002      	beq.n	8003b7a <RCCEx_PLLSAI2_Config+0x62>
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d009      	beq.n	8003b8c <RCCEx_PLLSAI2_Config+0x74>
 8003b78:	e020      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b7a:	4b55      	ldr	r3, [pc, #340]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d11d      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8a:	e01a      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b8c:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d116      	bne.n	8003bc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9c:	e013      	b.n	8003bc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b9e:	4b4c      	ldr	r3, [pc, #304]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10f      	bne.n	8003bca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003baa:	4b49      	ldr	r3, [pc, #292]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bba:	e006      	b.n	8003bca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc0:	e004      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e002      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e000      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	430b      	orrs	r3, r1
 8003be8:	4939      	ldr	r1, [pc, #228]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d167      	bne.n	8003cc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fe f9c2 	bl	8001f88 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c06:	e009      	b.n	8003c1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c08:	f7fe f9be 	bl	8001f88 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d902      	bls.n	8003c1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	73fb      	strb	r3, [r7, #15]
        break;
 8003c1a:	e005      	b.n	8003c28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c1c:	4b2c      	ldr	r3, [pc, #176]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ef      	bne.n	8003c08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d14a      	bne.n	8003cc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d111      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c34:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6892      	ldr	r2, [r2, #8]
 8003c44:	0211      	lsls	r1, r2, #8
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68d2      	ldr	r2, [r2, #12]
 8003c4a:	0912      	lsrs	r2, r2, #4
 8003c4c:	0452      	lsls	r2, r2, #17
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	491f      	ldr	r1, [pc, #124]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	614b      	str	r3, [r1, #20]
 8003c56:	e011      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6892      	ldr	r2, [r2, #8]
 8003c68:	0211      	lsls	r1, r2, #8
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6912      	ldr	r2, [r2, #16]
 8003c6e:	0852      	lsrs	r2, r2, #1
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0652      	lsls	r2, r2, #25
 8003c74:	430a      	orrs	r2, r1
 8003c76:	4916      	ldr	r1, [pc, #88]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fe f97e 	bl	8001f88 <HAL_GetTick>
 8003c8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c8e:	e009      	b.n	8003ca4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c90:	f7fe f97a 	bl	8001f88 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d902      	bls.n	8003ca4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ca2:	e005      	b.n	8003cb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ef      	beq.n	8003c90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4904      	ldr	r1, [pc, #16]	; (8003cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000

08003cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e095      	b.n	8003e12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d108      	bne.n	8003d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf6:	d009      	beq.n	8003d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	61da      	str	r2, [r3, #28]
 8003cfe:	e005      	b.n	8003d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd feb6 	bl	8001a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d4c:	d902      	bls.n	8003d54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e002      	b.n	8003d5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d62:	d007      	beq.n	8003d74 <HAL_SPI_Init+0xa0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d6c:	d002      	beq.n	8003d74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	ea42 0103 	orr.w	r1, r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	f003 0204 	and.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003df0:	ea42 0103 	orr.w	r1, r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b088      	sub	sp, #32
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_SPI_Transmit+0x22>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e158      	b.n	80040ee <HAL_SPI_Transmit+0x2d4>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e44:	f7fe f8a0 	bl	8001f88 <HAL_GetTick>
 8003e48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e5e:	e13d      	b.n	80040dc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Transmit+0x52>
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e70:	e134      	b.n	80040dc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2203      	movs	r2, #3
 8003e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebc:	d10f      	bne.n	8003ede <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ecc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003edc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d007      	beq.n	8003efc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f04:	d94b      	bls.n	8003f9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_Transmit+0xfa>
 8003f0e:	8afb      	ldrh	r3, [r7, #22]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d13e      	bne.n	8003f92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f38:	e02b      	b.n	8003f92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d112      	bne.n	8003f6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	1c9a      	adds	r2, r3, #2
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f6c:	e011      	b.n	8003f92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f6e:	f7fe f80b 	bl	8001f88 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d803      	bhi.n	8003f86 <HAL_SPI_Transmit+0x16c>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d102      	bne.n	8003f8c <HAL_SPI_Transmit+0x172>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f90:	e0a4      	b.n	80040dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ce      	bne.n	8003f3a <HAL_SPI_Transmit+0x120>
 8003f9c:	e07c      	b.n	8004098 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Transmit+0x192>
 8003fa6:	8afb      	ldrh	r3, [r7, #22]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d170      	bne.n	800408e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d912      	bls.n	8003fdc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	1c9a      	adds	r2, r3, #2
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b02      	subs	r3, #2
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fda:	e058      	b.n	800408e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	7812      	ldrb	r2, [r2, #0]
 8003fe8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004002:	e044      	b.n	800408e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b02      	cmp	r3, #2
 8004010:	d12b      	bne.n	800406a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d912      	bls.n	8004042 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	1c9a      	adds	r2, r3, #2
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b02      	subs	r3, #2
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004040:	e025      	b.n	800408e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004068:	e011      	b.n	800408e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406a:	f7fd ff8d 	bl	8001f88 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d803      	bhi.n	8004082 <HAL_SPI_Transmit+0x268>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d102      	bne.n	8004088 <HAL_SPI_Transmit+0x26e>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800408c:	e026      	b.n	80040dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1b5      	bne.n	8004004 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fcf1 	bl	8004a84 <SPI_EndRxTxTransaction>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e000      	b.n	80040dc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80040da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b088      	sub	sp, #32
 80040fa:	af02      	add	r7, sp, #8
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004112:	d112      	bne.n	800413a <HAL_SPI_Receive+0x44>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10e      	bne.n	800413a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2204      	movs	r2, #4
 8004120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004124:	88fa      	ldrh	r2, [r7, #6]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f910 	bl	8004356 <HAL_SPI_TransmitReceive>
 8004136:	4603      	mov	r3, r0
 8004138:	e109      	b.n	800434e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_SPI_Receive+0x52>
 8004144:	2302      	movs	r3, #2
 8004146:	e102      	b.n	800434e <HAL_SPI_Receive+0x258>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004150:	f7fd ff1a 	bl	8001f88 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d002      	beq.n	8004168 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004162:	2302      	movs	r3, #2
 8004164:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004166:	e0e9      	b.n	800433c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_SPI_Receive+0x7e>
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004178:	e0e0      	b.n	800433c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2204      	movs	r2, #4
 800417e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c4:	d908      	bls.n	80041d8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	e007      	b.n	80041e8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f0:	d10f      	bne.n	8004212 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004210:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d007      	beq.n	8004230 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800422e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004238:	d867      	bhi.n	800430a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800423a:	e030      	b.n	800429e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b01      	cmp	r3, #1
 8004248:	d117      	bne.n	800427a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f103 020c 	add.w	r2, r3, #12
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	7812      	ldrb	r2, [r2, #0]
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004278:	e011      	b.n	800429e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800427a:	f7fd fe85 	bl	8001f88 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d803      	bhi.n	8004292 <HAL_SPI_Receive+0x19c>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d102      	bne.n	8004298 <HAL_SPI_Receive+0x1a2>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800429c:	e04e      	b.n	800433c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1c8      	bne.n	800423c <HAL_SPI_Receive+0x146>
 80042aa:	e034      	b.n	8004316 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d115      	bne.n	80042e6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	b292      	uxth	r2, r2
 80042c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	1c9a      	adds	r2, r3, #2
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80042e4:	e011      	b.n	800430a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042e6:	f7fd fe4f 	bl	8001f88 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d803      	bhi.n	80042fe <HAL_SPI_Receive+0x208>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d102      	bne.n	8004304 <HAL_SPI_Receive+0x20e>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d102      	bne.n	800430a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004308:	e018      	b.n	800433c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1ca      	bne.n	80042ac <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	6839      	ldr	r1, [r7, #0]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fb5a 	bl	80049d4 <SPI_EndRxTransaction>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
 8004338:	e000      	b.n	800433c <HAL_SPI_Receive+0x246>
  }

error :
 800433a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800434c:	7dfb      	ldrb	r3, [r7, #23]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b08a      	sub	sp, #40	; 0x28
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004364:	2301      	movs	r3, #1
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_SPI_TransmitReceive+0x26>
 8004378:	2302      	movs	r3, #2
 800437a:	e1fb      	b.n	8004774 <HAL_SPI_TransmitReceive+0x41e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004384:	f7fd fe00 	bl	8001f88 <HAL_GetTick>
 8004388:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004390:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043a0:	7efb      	ldrb	r3, [r7, #27]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d00e      	beq.n	80043c4 <HAL_SPI_TransmitReceive+0x6e>
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ac:	d106      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x66>
 80043b6:	7efb      	ldrb	r3, [r7, #27]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d003      	beq.n	80043c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043c2:	e1cd      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x80>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x80>
 80043d0:	887b      	ldrh	r3, [r7, #2]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043dc:	e1c0      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d003      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2205      	movs	r2, #5
 80043ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	887a      	ldrh	r2, [r7, #2]
 8004402:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	887a      	ldrh	r2, [r7, #2]
 800440a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	887a      	ldrh	r2, [r7, #2]
 800441e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004434:	d802      	bhi.n	800443c <HAL_SPI_TransmitReceive+0xe6>
 8004436:	8a3b      	ldrh	r3, [r7, #16]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d908      	bls.n	800444e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800444a:	605a      	str	r2, [r3, #4]
 800444c:	e007      	b.n	800445e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800445c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d007      	beq.n	800447c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004484:	d97c      	bls.n	8004580 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_SPI_TransmitReceive+0x13e>
 800448e:	8a7b      	ldrh	r3, [r7, #18]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d169      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	1c9a      	adds	r2, r3, #2
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044b8:	e056      	b.n	8004568 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d11b      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x1aa>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <HAL_SPI_TransmitReceive+0x1aa>
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d113      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	881a      	ldrh	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	1c9a      	adds	r2, r3, #2
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d11c      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x1f2>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	b292      	uxth	r2, r2
 8004526:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	1c9a      	adds	r2, r3, #2
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004544:	2301      	movs	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004548:	f7fd fd1e 	bl	8001f88 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004554:	429a      	cmp	r2, r3
 8004556:	d807      	bhi.n	8004568 <HAL_SPI_TransmitReceive+0x212>
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d003      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004566:	e0fb      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1a3      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x164>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d19d      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x164>
 800457e:	e0df      	b.n	8004740 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_SPI_TransmitReceive+0x23a>
 8004588:	8a7b      	ldrh	r3, [r7, #18]
 800458a:	2b01      	cmp	r3, #1
 800458c:	f040 80cb 	bne.w	8004726 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d912      	bls.n	80045c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b02      	subs	r3, #2
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045be:	e0b2      	b.n	8004726 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045e6:	e09e      	b.n	8004726 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d134      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x30a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d02f      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x30a>
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	2b01      	cmp	r3, #1
 8004604:	d12c      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d912      	bls.n	8004636 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	881a      	ldrh	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	1c9a      	adds	r2, r3, #2
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b02      	subs	r3, #2
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004634:	e012      	b.n	800465c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d148      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x3aa>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d042      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d923      	bls.n	80046ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	b292      	uxth	r2, r2
 8004692:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	1c9a      	adds	r2, r3, #2
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b02      	subs	r3, #2
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d81f      	bhi.n	80046fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	e016      	b.n	80046fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f103 020c 	add.w	r2, r3, #12
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046fc:	2301      	movs	r3, #1
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004700:	f7fd fc42 	bl	8001f88 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470c:	429a      	cmp	r2, r3
 800470e:	d803      	bhi.n	8004718 <HAL_SPI_TransmitReceive+0x3c2>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d102      	bne.n	800471e <HAL_SPI_TransmitReceive+0x3c8>
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004724:	e01c      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f af5b 	bne.w	80045e8 <HAL_SPI_TransmitReceive+0x292>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	f47f af54 	bne.w	80045e8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f99d 	bl	8004a84 <SPI_EndRxTxTransaction>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	661a      	str	r2, [r3, #96]	; 0x60
 800475c:	e000      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800475e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	; 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800478a:	b2db      	uxtb	r3, r3
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047a8:	f7fd fbee 	bl	8001f88 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047b8:	f7fd fbe6 	bl	8001f88 <HAL_GetTick>
 80047bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047be:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	015b      	lsls	r3, r3, #5
 80047c4:	0d1b      	lsrs	r3, r3, #20
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	fb02 f303 	mul.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ce:	e054      	b.n	800487a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d050      	beq.n	800487a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047d8:	f7fd fbd6 	bl	8001f88 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d902      	bls.n	80047ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13d      	bne.n	800486a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004806:	d111      	bne.n	800482c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004810:	d004      	beq.n	800481c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481a:	d107      	bne.n	800482c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004834:	d10f      	bne.n	8004856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e017      	b.n	800489a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3b01      	subs	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4013      	ands	r3, r2
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	429a      	cmp	r2, r3
 8004896:	d19b      	bne.n	80047d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000000 	.word	0x20000000

080048a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	; 0x28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048ba:	f7fd fb65 	bl	8001f88 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	4413      	add	r3, r2
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80048ca:	f7fd fb5d 	bl	8001f88 <HAL_GetTick>
 80048ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048d8:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	00da      	lsls	r2, r3, #3
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	0d1b      	lsrs	r3, r3, #20
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048f0:	e060      	b.n	80049b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048f8:	d107      	bne.n	800490a <SPI_WaitFifoStateUntilTimeout+0x62>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004908:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d050      	beq.n	80049b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004912:	f7fd fb39 	bl	8001f88 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	429a      	cmp	r2, r3
 8004920:	d902      	bls.n	8004928 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d13d      	bne.n	80049a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004936:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004940:	d111      	bne.n	8004966 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494a:	d004      	beq.n	8004956 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004954:	d107      	bne.n	8004966 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004964:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496e:	d10f      	bne.n	8004990 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800498e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e010      	b.n	80049c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d196      	bne.n	80048f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3728      	adds	r7, #40	; 0x28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000000 	.word	0x20000000

080049d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e8:	d111      	bne.n	8004a0e <SPI_EndRxTransaction+0x3a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f2:	d004      	beq.n	80049fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fc:	d107      	bne.n	8004a0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a0c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff febd 	bl	8004798 <SPI_WaitFlagStateUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e023      	b.n	8004a7c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a3c:	d11d      	bne.n	8004a7a <SPI_EndRxTransaction+0xa6>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a46:	d004      	beq.n	8004a52 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d113      	bne.n	8004a7a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ff22 	bl	80048a8 <SPI_WaitFifoStateUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e000      	b.n	8004a7c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7ff ff03 	bl	80048a8 <SPI_WaitFifoStateUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aac:	f043 0220 	orr.w	r2, r3, #32
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e027      	b.n	8004b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fe68 	bl	8004798 <SPI_WaitFlagStateUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e014      	b.n	8004b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff fedc 	bl	80048a8 <SPI_WaitFifoStateUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e000      	b.n	8004b08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e040      	b.n	8004ba4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc fff2 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2224      	movs	r2, #36	; 0x24
 8004b3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0201 	bic.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fc18 	bl	8005384 <UART_SetConfig>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e022      	b.n	8004ba4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fe96 	bl	8005898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 ff1d 	bl	80059dc <UART_CheckIdleState>
 8004ba2:	4603      	mov	r3, r0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	f040 8082 	bne.w	8004cca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_UART_Transmit+0x26>
 8004bcc:	88fb      	ldrh	r3, [r7, #6]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e07a      	b.n	8004ccc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_UART_Transmit+0x38>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e073      	b.n	8004ccc <HAL_UART_Transmit+0x120>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2221      	movs	r2, #33	; 0x21
 8004bf8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bfa:	f7fd f9c5 	bl	8001f88 <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d108      	bne.n	8004c2c <HAL_UART_Transmit+0x80>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	e003      	b.n	8004c34 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c3c:	e02d      	b.n	8004c9a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	2180      	movs	r1, #128	; 0x80
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 ff10 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e039      	b.n	8004ccc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10b      	bne.n	8004c76 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	3302      	adds	r3, #2
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e008      	b.n	8004c88 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	b292      	uxth	r2, r2
 8004c80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3301      	adds	r3, #1
 8004c86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1cb      	bne.n	8004c3e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2200      	movs	r2, #0
 8004cae:	2140      	movs	r1, #64	; 0x40
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fedc 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e005      	b.n	8004ccc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004cca:	2302      	movs	r3, #2
  }
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d142      	bne.n	8004d70 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_UART_Receive_IT+0x22>
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e03b      	b.n	8004d72 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_UART_Receive_IT+0x34>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e034      	b.n	8004d72 <HAL_UART_Receive_IT+0x9e>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <HAL_UART_Receive_IT+0xa8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d01f      	beq.n	8004d60 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d018      	beq.n	8004d60 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	69f9      	ldr	r1, [r7, #28]
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e6      	bne.n	8004d2e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	461a      	mov	r2, r3
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 ff46 	bl	8005bf8 <UART_Start_Receive_IT>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	e000      	b.n	8004d72 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
  }
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3728      	adds	r7, #40	; 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40008000 	.word	0x40008000

08004d80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b0ba      	sub	sp, #232	; 0xe8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004da6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004daa:	f640 030f 	movw	r3, #2063	; 0x80f
 8004dae:	4013      	ands	r3, r2
 8004db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d115      	bne.n	8004de8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00f      	beq.n	8004de8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d009      	beq.n	8004de8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 82a6 	beq.w	800532a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
      }
      return;
 8004de6:	e2a0      	b.n	800532a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8117 	beq.w	8005020 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004dfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e02:	4b85      	ldr	r3, [pc, #532]	; (8005018 <HAL_UART_IRQHandler+0x298>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 810a 	beq.w	8005020 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d011      	beq.n	8004e3c <HAL_UART_IRQHandler+0xbc>
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00b      	beq.n	8004e3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e32:	f043 0201 	orr.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d011      	beq.n	8004e6c <HAL_UART_IRQHandler+0xec>
 8004e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e62:	f043 0204 	orr.w	r2, r3, #4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d011      	beq.n	8004e9c <HAL_UART_IRQHandler+0x11c>
 8004e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e92:	f043 0202 	orr.w	r2, r3, #2
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d017      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ece:	f043 0208 	orr.w	r2, r3, #8
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d012      	beq.n	8004f0a <HAL_UART_IRQHandler+0x18a>
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00c      	beq.n	8004f0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f00:	f043 0220 	orr.w	r2, r3, #32
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 820c 	beq.w	800532e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00d      	beq.n	8004f3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d005      	beq.n	8004f62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d04f      	beq.n	8005002 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 ff12 	bl	8005d8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d141      	bne.n	8004ffa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1d9      	bne.n	8004f76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d013      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	4a13      	ldr	r2, [pc, #76]	; (800501c <HAL_UART_IRQHandler+0x29c>)
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fd f955 	bl	8002286 <HAL_DMA_Abort_IT>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d017      	beq.n	8005012 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004fec:	4610      	mov	r0, r2
 8004fee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	e00f      	b.n	8005012 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f9b0 	bl	8005358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	e00b      	b.n	8005012 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f9ac 	bl	8005358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005000:	e007      	b.n	8005012 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f9a8 	bl	8005358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005010:	e18d      	b.n	800532e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005012:	bf00      	nop
    return;
 8005014:	e18b      	b.n	800532e <HAL_UART_IRQHandler+0x5ae>
 8005016:	bf00      	nop
 8005018:	04000120 	.word	0x04000120
 800501c:	08005e53 	.word	0x08005e53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	2b01      	cmp	r3, #1
 8005026:	f040 8146 	bne.w	80052b6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800502a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 813f 	beq.w	80052b6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 8138 	beq.w	80052b6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2210      	movs	r2, #16
 800504c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	f040 80b4 	bne.w	80051c6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800506a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 815f 	beq.w	8005332 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800507a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800507e:	429a      	cmp	r2, r3
 8005080:	f080 8157 	bcs.w	8005332 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800508a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 8085 	bne.w	80051aa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1da      	bne.n	80050a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800510e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005112:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005116:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e1      	bne.n	80050ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3308      	adds	r3, #8
 800512c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3308      	adds	r3, #8
 8005146:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800514a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800514c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005150:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e3      	bne.n	8005126 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800517a:	f023 0310 	bic.w	r3, r3, #16
 800517e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800518c:	65bb      	str	r3, [r7, #88]	; 0x58
 800518e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005192:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005194:	e841 2300 	strex	r3, r2, [r1]
 8005198:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800519a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e4      	bne.n	800516a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fd f830 	bl	800220a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f8d4 	bl	800536c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051c4:	e0b5      	b.n	8005332 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 80a7 	beq.w	8005336 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80051e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80a2 	beq.w	8005336 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005214:	647b      	str	r3, [r7, #68]	; 0x44
 8005216:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800521a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e4      	bne.n	80051f2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	623b      	str	r3, [r7, #32]
   return(result);
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3308      	adds	r3, #8
 8005248:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800524c:	633a      	str	r2, [r7, #48]	; 0x30
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e3      	bne.n	8005228 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0310 	bic.w	r3, r3, #16
 8005286:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	69b9      	ldr	r1, [r7, #24]
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	617b      	str	r3, [r7, #20]
   return(result);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e4      	bne.n	8005272 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f85c 	bl	800536c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052b4:	e03f      	b.n	8005336 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00e      	beq.n	80052e0 <HAL_UART_IRQHandler+0x560>
 80052c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 ff5a 	bl	8006192 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052de:	e02d      	b.n	800533c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80052e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80052ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01c      	beq.n	800533a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	4798      	blx	r3
    }
    return;
 8005308:	e017      	b.n	800533a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d012      	beq.n	800533c <HAL_UART_IRQHandler+0x5bc>
 8005316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00c      	beq.n	800533c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fdab 	bl	8005e7e <UART_EndTransmit_IT>
    return;
 8005328:	e008      	b.n	800533c <HAL_UART_IRQHandler+0x5bc>
      return;
 800532a:	bf00      	nop
 800532c:	e006      	b.n	800533c <HAL_UART_IRQHandler+0x5bc>
    return;
 800532e:	bf00      	nop
 8005330:	e004      	b.n	800533c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <HAL_UART_IRQHandler+0x5bc>
    return;
 800533a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800533c:	37e8      	adds	r7, #232	; 0xe8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop

08005344 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005384:	b5b0      	push	{r4, r5, r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4bad      	ldr	r3, [pc, #692]	; (8005664 <UART_SetConfig+0x2e0>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	69f9      	ldr	r1, [r7, #28]
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4aa2      	ldr	r2, [pc, #648]	; (8005668 <UART_SetConfig+0x2e4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a99      	ldr	r2, [pc, #612]	; (800566c <UART_SetConfig+0x2e8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d121      	bne.n	800544e <UART_SetConfig+0xca>
 800540a:	4b99      	ldr	r3, [pc, #612]	; (8005670 <UART_SetConfig+0x2ec>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	2b03      	cmp	r3, #3
 8005416:	d817      	bhi.n	8005448 <UART_SetConfig+0xc4>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0x9c>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005431 	.word	0x08005431
 8005424:	0800543d 	.word	0x0800543d
 8005428:	08005437 	.word	0x08005437
 800542c:	08005443 	.word	0x08005443
 8005430:	2301      	movs	r3, #1
 8005432:	76fb      	strb	r3, [r7, #27]
 8005434:	e0e7      	b.n	8005606 <UART_SetConfig+0x282>
 8005436:	2302      	movs	r3, #2
 8005438:	76fb      	strb	r3, [r7, #27]
 800543a:	e0e4      	b.n	8005606 <UART_SetConfig+0x282>
 800543c:	2304      	movs	r3, #4
 800543e:	76fb      	strb	r3, [r7, #27]
 8005440:	e0e1      	b.n	8005606 <UART_SetConfig+0x282>
 8005442:	2308      	movs	r3, #8
 8005444:	76fb      	strb	r3, [r7, #27]
 8005446:	e0de      	b.n	8005606 <UART_SetConfig+0x282>
 8005448:	2310      	movs	r3, #16
 800544a:	76fb      	strb	r3, [r7, #27]
 800544c:	e0db      	b.n	8005606 <UART_SetConfig+0x282>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a88      	ldr	r2, [pc, #544]	; (8005674 <UART_SetConfig+0x2f0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d132      	bne.n	80054be <UART_SetConfig+0x13a>
 8005458:	4b85      	ldr	r3, [pc, #532]	; (8005670 <UART_SetConfig+0x2ec>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d828      	bhi.n	80054b8 <UART_SetConfig+0x134>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <UART_SetConfig+0xe8>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080054b9 	.word	0x080054b9
 8005474:	080054b9 	.word	0x080054b9
 8005478:	080054b9 	.word	0x080054b9
 800547c:	080054ad 	.word	0x080054ad
 8005480:	080054b9 	.word	0x080054b9
 8005484:	080054b9 	.word	0x080054b9
 8005488:	080054b9 	.word	0x080054b9
 800548c:	080054a7 	.word	0x080054a7
 8005490:	080054b9 	.word	0x080054b9
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054b9 	.word	0x080054b9
 800549c:	080054b3 	.word	0x080054b3
 80054a0:	2300      	movs	r3, #0
 80054a2:	76fb      	strb	r3, [r7, #27]
 80054a4:	e0af      	b.n	8005606 <UART_SetConfig+0x282>
 80054a6:	2302      	movs	r3, #2
 80054a8:	76fb      	strb	r3, [r7, #27]
 80054aa:	e0ac      	b.n	8005606 <UART_SetConfig+0x282>
 80054ac:	2304      	movs	r3, #4
 80054ae:	76fb      	strb	r3, [r7, #27]
 80054b0:	e0a9      	b.n	8005606 <UART_SetConfig+0x282>
 80054b2:	2308      	movs	r3, #8
 80054b4:	76fb      	strb	r3, [r7, #27]
 80054b6:	e0a6      	b.n	8005606 <UART_SetConfig+0x282>
 80054b8:	2310      	movs	r3, #16
 80054ba:	76fb      	strb	r3, [r7, #27]
 80054bc:	e0a3      	b.n	8005606 <UART_SetConfig+0x282>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6d      	ldr	r2, [pc, #436]	; (8005678 <UART_SetConfig+0x2f4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d120      	bne.n	800550a <UART_SetConfig+0x186>
 80054c8:	4b69      	ldr	r3, [pc, #420]	; (8005670 <UART_SetConfig+0x2ec>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054d2:	2b30      	cmp	r3, #48	; 0x30
 80054d4:	d013      	beq.n	80054fe <UART_SetConfig+0x17a>
 80054d6:	2b30      	cmp	r3, #48	; 0x30
 80054d8:	d814      	bhi.n	8005504 <UART_SetConfig+0x180>
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d009      	beq.n	80054f2 <UART_SetConfig+0x16e>
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d810      	bhi.n	8005504 <UART_SetConfig+0x180>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <UART_SetConfig+0x168>
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d006      	beq.n	80054f8 <UART_SetConfig+0x174>
 80054ea:	e00b      	b.n	8005504 <UART_SetConfig+0x180>
 80054ec:	2300      	movs	r3, #0
 80054ee:	76fb      	strb	r3, [r7, #27]
 80054f0:	e089      	b.n	8005606 <UART_SetConfig+0x282>
 80054f2:	2302      	movs	r3, #2
 80054f4:	76fb      	strb	r3, [r7, #27]
 80054f6:	e086      	b.n	8005606 <UART_SetConfig+0x282>
 80054f8:	2304      	movs	r3, #4
 80054fa:	76fb      	strb	r3, [r7, #27]
 80054fc:	e083      	b.n	8005606 <UART_SetConfig+0x282>
 80054fe:	2308      	movs	r3, #8
 8005500:	76fb      	strb	r3, [r7, #27]
 8005502:	e080      	b.n	8005606 <UART_SetConfig+0x282>
 8005504:	2310      	movs	r3, #16
 8005506:	76fb      	strb	r3, [r7, #27]
 8005508:	e07d      	b.n	8005606 <UART_SetConfig+0x282>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a5b      	ldr	r2, [pc, #364]	; (800567c <UART_SetConfig+0x2f8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d120      	bne.n	8005556 <UART_SetConfig+0x1d2>
 8005514:	4b56      	ldr	r3, [pc, #344]	; (8005670 <UART_SetConfig+0x2ec>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800551e:	2bc0      	cmp	r3, #192	; 0xc0
 8005520:	d013      	beq.n	800554a <UART_SetConfig+0x1c6>
 8005522:	2bc0      	cmp	r3, #192	; 0xc0
 8005524:	d814      	bhi.n	8005550 <UART_SetConfig+0x1cc>
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d009      	beq.n	800553e <UART_SetConfig+0x1ba>
 800552a:	2b80      	cmp	r3, #128	; 0x80
 800552c:	d810      	bhi.n	8005550 <UART_SetConfig+0x1cc>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <UART_SetConfig+0x1b4>
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d006      	beq.n	8005544 <UART_SetConfig+0x1c0>
 8005536:	e00b      	b.n	8005550 <UART_SetConfig+0x1cc>
 8005538:	2300      	movs	r3, #0
 800553a:	76fb      	strb	r3, [r7, #27]
 800553c:	e063      	b.n	8005606 <UART_SetConfig+0x282>
 800553e:	2302      	movs	r3, #2
 8005540:	76fb      	strb	r3, [r7, #27]
 8005542:	e060      	b.n	8005606 <UART_SetConfig+0x282>
 8005544:	2304      	movs	r3, #4
 8005546:	76fb      	strb	r3, [r7, #27]
 8005548:	e05d      	b.n	8005606 <UART_SetConfig+0x282>
 800554a:	2308      	movs	r3, #8
 800554c:	76fb      	strb	r3, [r7, #27]
 800554e:	e05a      	b.n	8005606 <UART_SetConfig+0x282>
 8005550:	2310      	movs	r3, #16
 8005552:	76fb      	strb	r3, [r7, #27]
 8005554:	e057      	b.n	8005606 <UART_SetConfig+0x282>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a49      	ldr	r2, [pc, #292]	; (8005680 <UART_SetConfig+0x2fc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d125      	bne.n	80055ac <UART_SetConfig+0x228>
 8005560:	4b43      	ldr	r3, [pc, #268]	; (8005670 <UART_SetConfig+0x2ec>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800556e:	d017      	beq.n	80055a0 <UART_SetConfig+0x21c>
 8005570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005574:	d817      	bhi.n	80055a6 <UART_SetConfig+0x222>
 8005576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557a:	d00b      	beq.n	8005594 <UART_SetConfig+0x210>
 800557c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005580:	d811      	bhi.n	80055a6 <UART_SetConfig+0x222>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <UART_SetConfig+0x20a>
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	d006      	beq.n	800559a <UART_SetConfig+0x216>
 800558c:	e00b      	b.n	80055a6 <UART_SetConfig+0x222>
 800558e:	2300      	movs	r3, #0
 8005590:	76fb      	strb	r3, [r7, #27]
 8005592:	e038      	b.n	8005606 <UART_SetConfig+0x282>
 8005594:	2302      	movs	r3, #2
 8005596:	76fb      	strb	r3, [r7, #27]
 8005598:	e035      	b.n	8005606 <UART_SetConfig+0x282>
 800559a:	2304      	movs	r3, #4
 800559c:	76fb      	strb	r3, [r7, #27]
 800559e:	e032      	b.n	8005606 <UART_SetConfig+0x282>
 80055a0:	2308      	movs	r3, #8
 80055a2:	76fb      	strb	r3, [r7, #27]
 80055a4:	e02f      	b.n	8005606 <UART_SetConfig+0x282>
 80055a6:	2310      	movs	r3, #16
 80055a8:	76fb      	strb	r3, [r7, #27]
 80055aa:	e02c      	b.n	8005606 <UART_SetConfig+0x282>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a2d      	ldr	r2, [pc, #180]	; (8005668 <UART_SetConfig+0x2e4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d125      	bne.n	8005602 <UART_SetConfig+0x27e>
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <UART_SetConfig+0x2ec>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055c4:	d017      	beq.n	80055f6 <UART_SetConfig+0x272>
 80055c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ca:	d817      	bhi.n	80055fc <UART_SetConfig+0x278>
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	d00b      	beq.n	80055ea <UART_SetConfig+0x266>
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d6:	d811      	bhi.n	80055fc <UART_SetConfig+0x278>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <UART_SetConfig+0x260>
 80055dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e0:	d006      	beq.n	80055f0 <UART_SetConfig+0x26c>
 80055e2:	e00b      	b.n	80055fc <UART_SetConfig+0x278>
 80055e4:	2300      	movs	r3, #0
 80055e6:	76fb      	strb	r3, [r7, #27]
 80055e8:	e00d      	b.n	8005606 <UART_SetConfig+0x282>
 80055ea:	2302      	movs	r3, #2
 80055ec:	76fb      	strb	r3, [r7, #27]
 80055ee:	e00a      	b.n	8005606 <UART_SetConfig+0x282>
 80055f0:	2304      	movs	r3, #4
 80055f2:	76fb      	strb	r3, [r7, #27]
 80055f4:	e007      	b.n	8005606 <UART_SetConfig+0x282>
 80055f6:	2308      	movs	r3, #8
 80055f8:	76fb      	strb	r3, [r7, #27]
 80055fa:	e004      	b.n	8005606 <UART_SetConfig+0x282>
 80055fc:	2310      	movs	r3, #16
 80055fe:	76fb      	strb	r3, [r7, #27]
 8005600:	e001      	b.n	8005606 <UART_SetConfig+0x282>
 8005602:	2310      	movs	r3, #16
 8005604:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a17      	ldr	r2, [pc, #92]	; (8005668 <UART_SetConfig+0x2e4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	f040 8087 	bne.w	8005720 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005612:	7efb      	ldrb	r3, [r7, #27]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d837      	bhi.n	8005688 <UART_SetConfig+0x304>
 8005618:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <UART_SetConfig+0x29c>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005645 	.word	0x08005645
 8005624:	08005689 	.word	0x08005689
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005689 	.word	0x08005689
 8005630:	08005653 	.word	0x08005653
 8005634:	08005689 	.word	0x08005689
 8005638:	08005689 	.word	0x08005689
 800563c:	08005689 	.word	0x08005689
 8005640:	0800565b 	.word	0x0800565b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7fd fdfe 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8005648:	6178      	str	r0, [r7, #20]
        break;
 800564a:	e022      	b.n	8005692 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <UART_SetConfig+0x300>)
 800564e:	617b      	str	r3, [r7, #20]
        break;
 8005650:	e01f      	b.n	8005692 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005652:	f7fd fd5f 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 8005656:	6178      	str	r0, [r7, #20]
        break;
 8005658:	e01b      	b.n	8005692 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565e:	617b      	str	r3, [r7, #20]
        break;
 8005660:	e017      	b.n	8005692 <UART_SetConfig+0x30e>
 8005662:	bf00      	nop
 8005664:	efff69f3 	.word	0xefff69f3
 8005668:	40008000 	.word	0x40008000
 800566c:	40013800 	.word	0x40013800
 8005670:	40021000 	.word	0x40021000
 8005674:	40004400 	.word	0x40004400
 8005678:	40004800 	.word	0x40004800
 800567c:	40004c00 	.word	0x40004c00
 8005680:	40005000 	.word	0x40005000
 8005684:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	76bb      	strb	r3, [r7, #26]
        break;
 8005690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80f1 	beq.w	800587c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4413      	add	r3, r2
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d305      	bcc.n	80056b6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d902      	bls.n	80056bc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	76bb      	strb	r3, [r7, #26]
 80056ba:	e0df      	b.n	800587c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4618      	mov	r0, r3
 80056c0:	f04f 0100 	mov.w	r1, #0
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	020b      	lsls	r3, r1, #8
 80056ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056d2:	0202      	lsls	r2, r0, #8
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	6849      	ldr	r1, [r1, #4]
 80056d8:	0849      	lsrs	r1, r1, #1
 80056da:	4608      	mov	r0, r1
 80056dc:	f04f 0100 	mov.w	r1, #0
 80056e0:	1814      	adds	r4, r2, r0
 80056e2:	eb43 0501 	adc.w	r5, r3, r1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	4620      	mov	r0, r4
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7fa fdd4 	bl	80002a0 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4613      	mov	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005706:	d308      	bcc.n	800571a <UART_SetConfig+0x396>
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570e:	d204      	bcs.n	800571a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	e0b0      	b.n	800587c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	76bb      	strb	r3, [r7, #26]
 800571e:	e0ad      	b.n	800587c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005728:	d15b      	bne.n	80057e2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800572a:	7efb      	ldrb	r3, [r7, #27]
 800572c:	2b08      	cmp	r3, #8
 800572e:	d828      	bhi.n	8005782 <UART_SetConfig+0x3fe>
 8005730:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <UART_SetConfig+0x3b4>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005765 	.word	0x08005765
 8005740:	0800576d 	.word	0x0800576d
 8005744:	08005783 	.word	0x08005783
 8005748:	08005773 	.word	0x08005773
 800574c:	08005783 	.word	0x08005783
 8005750:	08005783 	.word	0x08005783
 8005754:	08005783 	.word	0x08005783
 8005758:	0800577b 	.word	0x0800577b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575c:	f7fd fd72 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8005760:	6178      	str	r0, [r7, #20]
        break;
 8005762:	e013      	b.n	800578c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fd fd84 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8005768:	6178      	str	r0, [r7, #20]
        break;
 800576a:	e00f      	b.n	800578c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800576c:	4b49      	ldr	r3, [pc, #292]	; (8005894 <UART_SetConfig+0x510>)
 800576e:	617b      	str	r3, [r7, #20]
        break;
 8005770:	e00c      	b.n	800578c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005772:	f7fd fccf 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 8005776:	6178      	str	r0, [r7, #20]
        break;
 8005778:	e008      	b.n	800578c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800577e:	617b      	str	r3, [r7, #20]
        break;
 8005780:	e004      	b.n	800578c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	76bb      	strb	r3, [r7, #26]
        break;
 800578a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d074      	beq.n	800587c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	005a      	lsls	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	441a      	add	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b0f      	cmp	r3, #15
 80057ac:	d916      	bls.n	80057dc <UART_SetConfig+0x458>
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b4:	d212      	bcs.n	80057dc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f023 030f 	bic.w	r3, r3, #15
 80057be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	89fb      	ldrh	r3, [r7, #14]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	89fa      	ldrh	r2, [r7, #14]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	e04f      	b.n	800587c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	76bb      	strb	r3, [r7, #26]
 80057e0:	e04c      	b.n	800587c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057e2:	7efb      	ldrb	r3, [r7, #27]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d828      	bhi.n	800583a <UART_SetConfig+0x4b6>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <UART_SetConfig+0x46c>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005815 	.word	0x08005815
 80057f4:	0800581d 	.word	0x0800581d
 80057f8:	08005825 	.word	0x08005825
 80057fc:	0800583b 	.word	0x0800583b
 8005800:	0800582b 	.word	0x0800582b
 8005804:	0800583b 	.word	0x0800583b
 8005808:	0800583b 	.word	0x0800583b
 800580c:	0800583b 	.word	0x0800583b
 8005810:	08005833 	.word	0x08005833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005814:	f7fd fd16 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8005818:	6178      	str	r0, [r7, #20]
        break;
 800581a:	e013      	b.n	8005844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800581c:	f7fd fd28 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8005820:	6178      	str	r0, [r7, #20]
        break;
 8005822:	e00f      	b.n	8005844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <UART_SetConfig+0x510>)
 8005826:	617b      	str	r3, [r7, #20]
        break;
 8005828:	e00c      	b.n	8005844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582a:	f7fd fc73 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 800582e:	6178      	str	r0, [r7, #20]
        break;
 8005830:	e008      	b.n	8005844 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005836:	617b      	str	r3, [r7, #20]
        break;
 8005838:	e004      	b.n	8005844 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	76bb      	strb	r3, [r7, #26]
        break;
 8005842:	bf00      	nop
    }

    if (pclk != 0U)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d018      	beq.n	800587c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	085a      	lsrs	r2, r3, #1
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	441a      	add	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b0f      	cmp	r3, #15
 8005862:	d909      	bls.n	8005878 <UART_SetConfig+0x4f4>
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586a:	d205      	bcs.n	8005878 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	b29a      	uxth	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60da      	str	r2, [r3, #12]
 8005876:	e001      	b.n	800587c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005888:	7ebb      	ldrb	r3, [r7, #26]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3720      	adds	r7, #32
 800588e:	46bd      	mov	sp, r7
 8005890:	bdb0      	pop	{r4, r5, r7, pc}
 8005892:	bf00      	nop
 8005894:	00f42400 	.word	0x00f42400

08005898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005996:	d10a      	bne.n	80059ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059ec:	f7fc facc 	bl	8001f88 <HAL_GetTick>
 80059f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d10e      	bne.n	8005a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f82d 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e023      	b.n	8005a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d10e      	bne.n	8005a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f817 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e00d      	b.n	8005a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b09c      	sub	sp, #112	; 0x70
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7e:	e0a5      	b.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	f000 80a1 	beq.w	8005bcc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7fc fa7d 	bl	8001f88 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d13e      	bne.n	8005b1e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ac0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e6      	bne.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3308      	adds	r3, #8
 8005af0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005af2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005af4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e5      	bne.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e067      	b.n	8005bee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d04f      	beq.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3a:	d147      	bne.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b44:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
 8005b66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e6      	bne.n	8005b46 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	613b      	str	r3, [r7, #16]
   return(result);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b98:	623a      	str	r2, [r7, #32]
 8005b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	69f9      	ldr	r1, [r7, #28]
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e010      	b.n	8005bee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	f43f af4a 	beq.w	8005a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3770      	adds	r7, #112	; 0x70
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b097      	sub	sp, #92	; 0x5c
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2a:	d10e      	bne.n	8005c4a <UART_Start_Receive_IT+0x52>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <UART_Start_Receive_IT+0x48>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c3e:	e02d      	b.n	8005c9c <UART_Start_Receive_IT+0xa4>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	22ff      	movs	r2, #255	; 0xff
 8005c44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c48:	e028      	b.n	8005c9c <UART_Start_Receive_IT+0xa4>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10d      	bne.n	8005c6e <UART_Start_Receive_IT+0x76>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <UART_Start_Receive_IT+0x6c>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	22ff      	movs	r2, #255	; 0xff
 8005c5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c62:	e01b      	b.n	8005c9c <UART_Start_Receive_IT+0xa4>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	227f      	movs	r2, #127	; 0x7f
 8005c68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c6c:	e016      	b.n	8005c9c <UART_Start_Receive_IT+0xa4>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c76:	d10d      	bne.n	8005c94 <UART_Start_Receive_IT+0x9c>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <UART_Start_Receive_IT+0x92>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	227f      	movs	r2, #127	; 0x7f
 8005c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c88:	e008      	b.n	8005c9c <UART_Start_Receive_IT+0xa4>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	223f      	movs	r2, #63	; 0x3f
 8005c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c92:	e003      	b.n	8005c9c <UART_Start_Receive_IT+0xa4>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2222      	movs	r2, #34	; 0x22
 8005ca8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	f043 0301 	orr.w	r3, r3, #1
 8005cc0:	657b      	str	r3, [r7, #84]	; 0x54
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cca:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e5      	bne.n	8005caa <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce6:	d107      	bne.n	8005cf8 <UART_Start_Receive_IT+0x100>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d103      	bne.n	8005cf8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <UART_Start_Receive_IT+0x18c>)
 8005cf4:	665a      	str	r2, [r3, #100]	; 0x64
 8005cf6:	e002      	b.n	8005cfe <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a23      	ldr	r2, [pc, #140]	; (8005d88 <UART_Start_Receive_IT+0x190>)
 8005cfc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d019      	beq.n	8005d42 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e6      	bne.n	8005d0e <UART_Start_Receive_IT+0x116>
 8005d40:	e018      	b.n	8005d74 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f043 0320 	orr.w	r3, r3, #32
 8005d56:	653b      	str	r3, [r7, #80]	; 0x50
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	69f9      	ldr	r1, [r7, #28]
 8005d66:	6a3a      	ldr	r2, [r7, #32]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e6      	bne.n	8005d42 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	375c      	adds	r7, #92	; 0x5c
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	08006033 	.word	0x08006033
 8005d88:	08005ed3 	.word	0x08005ed3

08005d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b095      	sub	sp, #84	; 0x54
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db2:	643b      	str	r3, [r7, #64]	; 0x40
 8005db4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005db8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e6      	bne.n	8005d94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3308      	adds	r3, #8
 8005dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f023 0301 	bic.w	r3, r3, #1
 8005ddc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3308      	adds	r3, #8
 8005de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e5      	bne.n	8005dc6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d118      	bne.n	8005e34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	647b      	str	r3, [r7, #68]	; 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e6      	bne.n	8005e02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e46:	bf00      	nop
 8005e48:	3754      	adds	r7, #84	; 0x54
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7ff fa71 	bl	8005358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e76:	bf00      	nop
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b088      	sub	sp, #32
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6979      	ldr	r1, [r7, #20]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e6      	bne.n	8005e86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fa3d 	bl	8005344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eca:	bf00      	nop
 8005ecc:	3720      	adds	r7, #32
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b096      	sub	sp, #88	; 0x58
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ee0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee8:	2b22      	cmp	r3, #34	; 0x22
 8005eea:	f040 8094 	bne.w	8006016 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ef4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ef8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005efc:	b2d9      	uxtb	r1, r3
 8005efe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f08:	400a      	ands	r2, r1
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d179      	bne.n	800602a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f54:	647b      	str	r3, [r7, #68]	; 0x44
 8005f56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e6      	bne.n	8005f36 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	623b      	str	r3, [r7, #32]
   return(result);
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	f023 0301 	bic.w	r3, r3, #1
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3308      	adds	r3, #8
 8005f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f88:	633a      	str	r2, [r7, #48]	; 0x30
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e5      	bne.n	8005f68 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d12e      	bne.n	800600e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0310 	bic.w	r3, r3, #16
 8005fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e6      	bne.n	8005fb6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b10      	cmp	r3, #16
 8005ff4:	d103      	bne.n	8005ffe <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff f9b0 	bl	800536c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800600c:	e00d      	b.n	800602a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fb fc1c 	bl	800184c <HAL_UART_RxCpltCallback>
}
 8006014:	e009      	b.n	800602a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	8b1b      	ldrh	r3, [r3, #24]
 800601c:	b29a      	uxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0208 	orr.w	r2, r2, #8
 8006026:	b292      	uxth	r2, r2
 8006028:	831a      	strh	r2, [r3, #24]
}
 800602a:	bf00      	nop
 800602c:	3758      	adds	r7, #88	; 0x58
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b096      	sub	sp, #88	; 0x58
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006040:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006048:	2b22      	cmp	r3, #34	; 0x22
 800604a:	f040 8094 	bne.w	8006176 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006054:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800605e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006062:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006066:	4013      	ands	r3, r2
 8006068:	b29a      	uxth	r2, r3
 800606a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006072:	1c9a      	adds	r2, r3, #2
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d179      	bne.n	800618a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b4:	643b      	str	r3, [r7, #64]	; 0x40
 80060b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e6      	bne.n	8006096 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e5      	bne.n	80060c8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610c:	2b01      	cmp	r3, #1
 800610e:	d12e      	bne.n	800616e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	60bb      	str	r3, [r7, #8]
   return(result);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f023 0310 	bic.w	r3, r3, #16
 800612a:	647b      	str	r3, [r7, #68]	; 0x44
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6979      	ldr	r1, [r7, #20]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	613b      	str	r3, [r7, #16]
   return(result);
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e6      	bne.n	8006116 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f003 0310 	and.w	r3, r3, #16
 8006152:	2b10      	cmp	r3, #16
 8006154:	d103      	bne.n	800615e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2210      	movs	r2, #16
 800615c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff f900 	bl	800536c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800616c:	e00d      	b.n	800618a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fb fb6c 	bl	800184c <HAL_UART_RxCpltCallback>
}
 8006174:	e009      	b.n	800618a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	8b1b      	ldrh	r3, [r3, #24]
 800617c:	b29a      	uxth	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0208 	orr.w	r2, r2, #8
 8006186:	b292      	uxth	r2, r2
 8006188:	831a      	strh	r2, [r3, #24]
}
 800618a:	bf00      	nop
 800618c:	3758      	adds	r7, #88	; 0x58
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <__errno>:
 80061a8:	4b01      	ldr	r3, [pc, #4]	; (80061b0 <__errno+0x8>)
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	2000000c 	.word	0x2000000c

080061b4 <__libc_init_array>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	4d0d      	ldr	r5, [pc, #52]	; (80061ec <__libc_init_array+0x38>)
 80061b8:	4c0d      	ldr	r4, [pc, #52]	; (80061f0 <__libc_init_array+0x3c>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	2600      	movs	r6, #0
 80061c0:	42a6      	cmp	r6, r4
 80061c2:	d109      	bne.n	80061d8 <__libc_init_array+0x24>
 80061c4:	4d0b      	ldr	r5, [pc, #44]	; (80061f4 <__libc_init_array+0x40>)
 80061c6:	4c0c      	ldr	r4, [pc, #48]	; (80061f8 <__libc_init_array+0x44>)
 80061c8:	f001 fa5c 	bl	8007684 <_init>
 80061cc:	1b64      	subs	r4, r4, r5
 80061ce:	10a4      	asrs	r4, r4, #2
 80061d0:	2600      	movs	r6, #0
 80061d2:	42a6      	cmp	r6, r4
 80061d4:	d105      	bne.n	80061e2 <__libc_init_array+0x2e>
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061dc:	4798      	blx	r3
 80061de:	3601      	adds	r6, #1
 80061e0:	e7ee      	b.n	80061c0 <__libc_init_array+0xc>
 80061e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e6:	4798      	blx	r3
 80061e8:	3601      	adds	r6, #1
 80061ea:	e7f2      	b.n	80061d2 <__libc_init_array+0x1e>
 80061ec:	08007a04 	.word	0x08007a04
 80061f0:	08007a04 	.word	0x08007a04
 80061f4:	08007a04 	.word	0x08007a04
 80061f8:	08007a08 	.word	0x08007a08

080061fc <memset>:
 80061fc:	4402      	add	r2, r0
 80061fe:	4603      	mov	r3, r0
 8006200:	4293      	cmp	r3, r2
 8006202:	d100      	bne.n	8006206 <memset+0xa>
 8006204:	4770      	bx	lr
 8006206:	f803 1b01 	strb.w	r1, [r3], #1
 800620a:	e7f9      	b.n	8006200 <memset+0x4>

0800620c <sniprintf>:
 800620c:	b40c      	push	{r2, r3}
 800620e:	b530      	push	{r4, r5, lr}
 8006210:	4b17      	ldr	r3, [pc, #92]	; (8006270 <sniprintf+0x64>)
 8006212:	1e0c      	subs	r4, r1, #0
 8006214:	681d      	ldr	r5, [r3, #0]
 8006216:	b09d      	sub	sp, #116	; 0x74
 8006218:	da08      	bge.n	800622c <sniprintf+0x20>
 800621a:	238b      	movs	r3, #139	; 0x8b
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	f04f 30ff 	mov.w	r0, #4294967295
 8006222:	b01d      	add	sp, #116	; 0x74
 8006224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006228:	b002      	add	sp, #8
 800622a:	4770      	bx	lr
 800622c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006230:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006234:	bf14      	ite	ne
 8006236:	f104 33ff 	addne.w	r3, r4, #4294967295
 800623a:	4623      	moveq	r3, r4
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	9307      	str	r3, [sp, #28]
 8006240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006244:	9002      	str	r0, [sp, #8]
 8006246:	9006      	str	r0, [sp, #24]
 8006248:	f8ad 3016 	strh.w	r3, [sp, #22]
 800624c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800624e:	ab21      	add	r3, sp, #132	; 0x84
 8006250:	a902      	add	r1, sp, #8
 8006252:	4628      	mov	r0, r5
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	f000 f9df 	bl	8006618 <_svfiprintf_r>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	bfbc      	itt	lt
 800625e:	238b      	movlt	r3, #139	; 0x8b
 8006260:	602b      	strlt	r3, [r5, #0]
 8006262:	2c00      	cmp	r4, #0
 8006264:	d0dd      	beq.n	8006222 <sniprintf+0x16>
 8006266:	9b02      	ldr	r3, [sp, #8]
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	e7d9      	b.n	8006222 <sniprintf+0x16>
 800626e:	bf00      	nop
 8006270:	2000000c 	.word	0x2000000c

08006274 <siprintf>:
 8006274:	b40e      	push	{r1, r2, r3}
 8006276:	b500      	push	{lr}
 8006278:	b09c      	sub	sp, #112	; 0x70
 800627a:	ab1d      	add	r3, sp, #116	; 0x74
 800627c:	9002      	str	r0, [sp, #8]
 800627e:	9006      	str	r0, [sp, #24]
 8006280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006284:	4809      	ldr	r0, [pc, #36]	; (80062ac <siprintf+0x38>)
 8006286:	9107      	str	r1, [sp, #28]
 8006288:	9104      	str	r1, [sp, #16]
 800628a:	4909      	ldr	r1, [pc, #36]	; (80062b0 <siprintf+0x3c>)
 800628c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006290:	9105      	str	r1, [sp, #20]
 8006292:	6800      	ldr	r0, [r0, #0]
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	a902      	add	r1, sp, #8
 8006298:	f000 f9be 	bl	8006618 <_svfiprintf_r>
 800629c:	9b02      	ldr	r3, [sp, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	b01c      	add	sp, #112	; 0x70
 80062a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a8:	b003      	add	sp, #12
 80062aa:	4770      	bx	lr
 80062ac:	2000000c 	.word	0x2000000c
 80062b0:	ffff0208 	.word	0xffff0208

080062b4 <strcat>:
 80062b4:	b510      	push	{r4, lr}
 80062b6:	4602      	mov	r2, r0
 80062b8:	7814      	ldrb	r4, [r2, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	3201      	adds	r2, #1
 80062be:	2c00      	cmp	r4, #0
 80062c0:	d1fa      	bne.n	80062b8 <strcat+0x4>
 80062c2:	3b01      	subs	r3, #1
 80062c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062cc:	2a00      	cmp	r2, #0
 80062ce:	d1f9      	bne.n	80062c4 <strcat+0x10>
 80062d0:	bd10      	pop	{r4, pc}

080062d2 <strcpy>:
 80062d2:	4603      	mov	r3, r0
 80062d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062d8:	f803 2b01 	strb.w	r2, [r3], #1
 80062dc:	2a00      	cmp	r2, #0
 80062de:	d1f9      	bne.n	80062d4 <strcpy+0x2>
 80062e0:	4770      	bx	lr
	...

080062e4 <strtok>:
 80062e4:	4b16      	ldr	r3, [pc, #88]	; (8006340 <strtok+0x5c>)
 80062e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062e8:	681e      	ldr	r6, [r3, #0]
 80062ea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80062ec:	4605      	mov	r5, r0
 80062ee:	b9fc      	cbnz	r4, 8006330 <strtok+0x4c>
 80062f0:	2050      	movs	r0, #80	; 0x50
 80062f2:	9101      	str	r1, [sp, #4]
 80062f4:	f000 f882 	bl	80063fc <malloc>
 80062f8:	9901      	ldr	r1, [sp, #4]
 80062fa:	65b0      	str	r0, [r6, #88]	; 0x58
 80062fc:	4602      	mov	r2, r0
 80062fe:	b920      	cbnz	r0, 800630a <strtok+0x26>
 8006300:	4b10      	ldr	r3, [pc, #64]	; (8006344 <strtok+0x60>)
 8006302:	4811      	ldr	r0, [pc, #68]	; (8006348 <strtok+0x64>)
 8006304:	2157      	movs	r1, #87	; 0x57
 8006306:	f000 f849 	bl	800639c <__assert_func>
 800630a:	e9c0 4400 	strd	r4, r4, [r0]
 800630e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006312:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006316:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800631a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800631e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006322:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006326:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800632a:	6184      	str	r4, [r0, #24]
 800632c:	7704      	strb	r4, [r0, #28]
 800632e:	6244      	str	r4, [r0, #36]	; 0x24
 8006330:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006332:	2301      	movs	r3, #1
 8006334:	4628      	mov	r0, r5
 8006336:	b002      	add	sp, #8
 8006338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800633c:	f000 b806 	b.w	800634c <__strtok_r>
 8006340:	2000000c 	.word	0x2000000c
 8006344:	080078b4 	.word	0x080078b4
 8006348:	080078cb 	.word	0x080078cb

0800634c <__strtok_r>:
 800634c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634e:	b908      	cbnz	r0, 8006354 <__strtok_r+0x8>
 8006350:	6810      	ldr	r0, [r2, #0]
 8006352:	b188      	cbz	r0, 8006378 <__strtok_r+0x2c>
 8006354:	4604      	mov	r4, r0
 8006356:	4620      	mov	r0, r4
 8006358:	f814 5b01 	ldrb.w	r5, [r4], #1
 800635c:	460f      	mov	r7, r1
 800635e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006362:	b91e      	cbnz	r6, 800636c <__strtok_r+0x20>
 8006364:	b965      	cbnz	r5, 8006380 <__strtok_r+0x34>
 8006366:	6015      	str	r5, [r2, #0]
 8006368:	4628      	mov	r0, r5
 800636a:	e005      	b.n	8006378 <__strtok_r+0x2c>
 800636c:	42b5      	cmp	r5, r6
 800636e:	d1f6      	bne.n	800635e <__strtok_r+0x12>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1f0      	bne.n	8006356 <__strtok_r+0xa>
 8006374:	6014      	str	r4, [r2, #0]
 8006376:	7003      	strb	r3, [r0, #0]
 8006378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800637a:	461c      	mov	r4, r3
 800637c:	e00c      	b.n	8006398 <__strtok_r+0x4c>
 800637e:	b915      	cbnz	r5, 8006386 <__strtok_r+0x3a>
 8006380:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006384:	460e      	mov	r6, r1
 8006386:	f816 5b01 	ldrb.w	r5, [r6], #1
 800638a:	42ab      	cmp	r3, r5
 800638c:	d1f7      	bne.n	800637e <__strtok_r+0x32>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0f3      	beq.n	800637a <__strtok_r+0x2e>
 8006392:	2300      	movs	r3, #0
 8006394:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006398:	6014      	str	r4, [r2, #0]
 800639a:	e7ed      	b.n	8006378 <__strtok_r+0x2c>

0800639c <__assert_func>:
 800639c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800639e:	4614      	mov	r4, r2
 80063a0:	461a      	mov	r2, r3
 80063a2:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <__assert_func+0x2c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4605      	mov	r5, r0
 80063a8:	68d8      	ldr	r0, [r3, #12]
 80063aa:	b14c      	cbz	r4, 80063c0 <__assert_func+0x24>
 80063ac:	4b07      	ldr	r3, [pc, #28]	; (80063cc <__assert_func+0x30>)
 80063ae:	9100      	str	r1, [sp, #0]
 80063b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063b4:	4906      	ldr	r1, [pc, #24]	; (80063d0 <__assert_func+0x34>)
 80063b6:	462b      	mov	r3, r5
 80063b8:	f000 f80e 	bl	80063d8 <fiprintf>
 80063bc:	f000 fdea 	bl	8006f94 <abort>
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <__assert_func+0x38>)
 80063c2:	461c      	mov	r4, r3
 80063c4:	e7f3      	b.n	80063ae <__assert_func+0x12>
 80063c6:	bf00      	nop
 80063c8:	2000000c 	.word	0x2000000c
 80063cc:	0800792c 	.word	0x0800792c
 80063d0:	08007939 	.word	0x08007939
 80063d4:	08007967 	.word	0x08007967

080063d8 <fiprintf>:
 80063d8:	b40e      	push	{r1, r2, r3}
 80063da:	b503      	push	{r0, r1, lr}
 80063dc:	4601      	mov	r1, r0
 80063de:	ab03      	add	r3, sp, #12
 80063e0:	4805      	ldr	r0, [pc, #20]	; (80063f8 <fiprintf+0x20>)
 80063e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063e6:	6800      	ldr	r0, [r0, #0]
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	f000 fa3f 	bl	800686c <_vfiprintf_r>
 80063ee:	b002      	add	sp, #8
 80063f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063f4:	b003      	add	sp, #12
 80063f6:	4770      	bx	lr
 80063f8:	2000000c 	.word	0x2000000c

080063fc <malloc>:
 80063fc:	4b02      	ldr	r3, [pc, #8]	; (8006408 <malloc+0xc>)
 80063fe:	4601      	mov	r1, r0
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	f000 b853 	b.w	80064ac <_malloc_r>
 8006406:	bf00      	nop
 8006408:	2000000c 	.word	0x2000000c

0800640c <_free_r>:
 800640c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800640e:	2900      	cmp	r1, #0
 8006410:	d048      	beq.n	80064a4 <_free_r+0x98>
 8006412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006416:	9001      	str	r0, [sp, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f1a1 0404 	sub.w	r4, r1, #4
 800641e:	bfb8      	it	lt
 8006420:	18e4      	addlt	r4, r4, r3
 8006422:	f001 f805 	bl	8007430 <__malloc_lock>
 8006426:	4a20      	ldr	r2, [pc, #128]	; (80064a8 <_free_r+0x9c>)
 8006428:	9801      	ldr	r0, [sp, #4]
 800642a:	6813      	ldr	r3, [r2, #0]
 800642c:	4615      	mov	r5, r2
 800642e:	b933      	cbnz	r3, 800643e <_free_r+0x32>
 8006430:	6063      	str	r3, [r4, #4]
 8006432:	6014      	str	r4, [r2, #0]
 8006434:	b003      	add	sp, #12
 8006436:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800643a:	f000 bfff 	b.w	800743c <__malloc_unlock>
 800643e:	42a3      	cmp	r3, r4
 8006440:	d90b      	bls.n	800645a <_free_r+0x4e>
 8006442:	6821      	ldr	r1, [r4, #0]
 8006444:	1862      	adds	r2, r4, r1
 8006446:	4293      	cmp	r3, r2
 8006448:	bf04      	itt	eq
 800644a:	681a      	ldreq	r2, [r3, #0]
 800644c:	685b      	ldreq	r3, [r3, #4]
 800644e:	6063      	str	r3, [r4, #4]
 8006450:	bf04      	itt	eq
 8006452:	1852      	addeq	r2, r2, r1
 8006454:	6022      	streq	r2, [r4, #0]
 8006456:	602c      	str	r4, [r5, #0]
 8006458:	e7ec      	b.n	8006434 <_free_r+0x28>
 800645a:	461a      	mov	r2, r3
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	b10b      	cbz	r3, 8006464 <_free_r+0x58>
 8006460:	42a3      	cmp	r3, r4
 8006462:	d9fa      	bls.n	800645a <_free_r+0x4e>
 8006464:	6811      	ldr	r1, [r2, #0]
 8006466:	1855      	adds	r5, r2, r1
 8006468:	42a5      	cmp	r5, r4
 800646a:	d10b      	bne.n	8006484 <_free_r+0x78>
 800646c:	6824      	ldr	r4, [r4, #0]
 800646e:	4421      	add	r1, r4
 8006470:	1854      	adds	r4, r2, r1
 8006472:	42a3      	cmp	r3, r4
 8006474:	6011      	str	r1, [r2, #0]
 8006476:	d1dd      	bne.n	8006434 <_free_r+0x28>
 8006478:	681c      	ldr	r4, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	6053      	str	r3, [r2, #4]
 800647e:	4421      	add	r1, r4
 8006480:	6011      	str	r1, [r2, #0]
 8006482:	e7d7      	b.n	8006434 <_free_r+0x28>
 8006484:	d902      	bls.n	800648c <_free_r+0x80>
 8006486:	230c      	movs	r3, #12
 8006488:	6003      	str	r3, [r0, #0]
 800648a:	e7d3      	b.n	8006434 <_free_r+0x28>
 800648c:	6825      	ldr	r5, [r4, #0]
 800648e:	1961      	adds	r1, r4, r5
 8006490:	428b      	cmp	r3, r1
 8006492:	bf04      	itt	eq
 8006494:	6819      	ldreq	r1, [r3, #0]
 8006496:	685b      	ldreq	r3, [r3, #4]
 8006498:	6063      	str	r3, [r4, #4]
 800649a:	bf04      	itt	eq
 800649c:	1949      	addeq	r1, r1, r5
 800649e:	6021      	streq	r1, [r4, #0]
 80064a0:	6054      	str	r4, [r2, #4]
 80064a2:	e7c7      	b.n	8006434 <_free_r+0x28>
 80064a4:	b003      	add	sp, #12
 80064a6:	bd30      	pop	{r4, r5, pc}
 80064a8:	20000120 	.word	0x20000120

080064ac <_malloc_r>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	1ccd      	adds	r5, r1, #3
 80064b0:	f025 0503 	bic.w	r5, r5, #3
 80064b4:	3508      	adds	r5, #8
 80064b6:	2d0c      	cmp	r5, #12
 80064b8:	bf38      	it	cc
 80064ba:	250c      	movcc	r5, #12
 80064bc:	2d00      	cmp	r5, #0
 80064be:	4606      	mov	r6, r0
 80064c0:	db01      	blt.n	80064c6 <_malloc_r+0x1a>
 80064c2:	42a9      	cmp	r1, r5
 80064c4:	d903      	bls.n	80064ce <_malloc_r+0x22>
 80064c6:	230c      	movs	r3, #12
 80064c8:	6033      	str	r3, [r6, #0]
 80064ca:	2000      	movs	r0, #0
 80064cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ce:	f000 ffaf 	bl	8007430 <__malloc_lock>
 80064d2:	4921      	ldr	r1, [pc, #132]	; (8006558 <_malloc_r+0xac>)
 80064d4:	680a      	ldr	r2, [r1, #0]
 80064d6:	4614      	mov	r4, r2
 80064d8:	b99c      	cbnz	r4, 8006502 <_malloc_r+0x56>
 80064da:	4f20      	ldr	r7, [pc, #128]	; (800655c <_malloc_r+0xb0>)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	b923      	cbnz	r3, 80064ea <_malloc_r+0x3e>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4630      	mov	r0, r6
 80064e4:	f000 fc86 	bl	8006df4 <_sbrk_r>
 80064e8:	6038      	str	r0, [r7, #0]
 80064ea:	4629      	mov	r1, r5
 80064ec:	4630      	mov	r0, r6
 80064ee:	f000 fc81 	bl	8006df4 <_sbrk_r>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d123      	bne.n	800653e <_malloc_r+0x92>
 80064f6:	230c      	movs	r3, #12
 80064f8:	6033      	str	r3, [r6, #0]
 80064fa:	4630      	mov	r0, r6
 80064fc:	f000 ff9e 	bl	800743c <__malloc_unlock>
 8006500:	e7e3      	b.n	80064ca <_malloc_r+0x1e>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	1b5b      	subs	r3, r3, r5
 8006506:	d417      	bmi.n	8006538 <_malloc_r+0x8c>
 8006508:	2b0b      	cmp	r3, #11
 800650a:	d903      	bls.n	8006514 <_malloc_r+0x68>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	441c      	add	r4, r3
 8006510:	6025      	str	r5, [r4, #0]
 8006512:	e004      	b.n	800651e <_malloc_r+0x72>
 8006514:	6863      	ldr	r3, [r4, #4]
 8006516:	42a2      	cmp	r2, r4
 8006518:	bf0c      	ite	eq
 800651a:	600b      	streq	r3, [r1, #0]
 800651c:	6053      	strne	r3, [r2, #4]
 800651e:	4630      	mov	r0, r6
 8006520:	f000 ff8c 	bl	800743c <__malloc_unlock>
 8006524:	f104 000b 	add.w	r0, r4, #11
 8006528:	1d23      	adds	r3, r4, #4
 800652a:	f020 0007 	bic.w	r0, r0, #7
 800652e:	1ac2      	subs	r2, r0, r3
 8006530:	d0cc      	beq.n	80064cc <_malloc_r+0x20>
 8006532:	1a1b      	subs	r3, r3, r0
 8006534:	50a3      	str	r3, [r4, r2]
 8006536:	e7c9      	b.n	80064cc <_malloc_r+0x20>
 8006538:	4622      	mov	r2, r4
 800653a:	6864      	ldr	r4, [r4, #4]
 800653c:	e7cc      	b.n	80064d8 <_malloc_r+0x2c>
 800653e:	1cc4      	adds	r4, r0, #3
 8006540:	f024 0403 	bic.w	r4, r4, #3
 8006544:	42a0      	cmp	r0, r4
 8006546:	d0e3      	beq.n	8006510 <_malloc_r+0x64>
 8006548:	1a21      	subs	r1, r4, r0
 800654a:	4630      	mov	r0, r6
 800654c:	f000 fc52 	bl	8006df4 <_sbrk_r>
 8006550:	3001      	adds	r0, #1
 8006552:	d1dd      	bne.n	8006510 <_malloc_r+0x64>
 8006554:	e7cf      	b.n	80064f6 <_malloc_r+0x4a>
 8006556:	bf00      	nop
 8006558:	20000120 	.word	0x20000120
 800655c:	20000124 	.word	0x20000124

08006560 <__ssputs_r>:
 8006560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	688e      	ldr	r6, [r1, #8]
 8006566:	429e      	cmp	r6, r3
 8006568:	4682      	mov	sl, r0
 800656a:	460c      	mov	r4, r1
 800656c:	4690      	mov	r8, r2
 800656e:	461f      	mov	r7, r3
 8006570:	d838      	bhi.n	80065e4 <__ssputs_r+0x84>
 8006572:	898a      	ldrh	r2, [r1, #12]
 8006574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006578:	d032      	beq.n	80065e0 <__ssputs_r+0x80>
 800657a:	6825      	ldr	r5, [r4, #0]
 800657c:	6909      	ldr	r1, [r1, #16]
 800657e:	eba5 0901 	sub.w	r9, r5, r1
 8006582:	6965      	ldr	r5, [r4, #20]
 8006584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800658c:	3301      	adds	r3, #1
 800658e:	444b      	add	r3, r9
 8006590:	106d      	asrs	r5, r5, #1
 8006592:	429d      	cmp	r5, r3
 8006594:	bf38      	it	cc
 8006596:	461d      	movcc	r5, r3
 8006598:	0553      	lsls	r3, r2, #21
 800659a:	d531      	bpl.n	8006600 <__ssputs_r+0xa0>
 800659c:	4629      	mov	r1, r5
 800659e:	f7ff ff85 	bl	80064ac <_malloc_r>
 80065a2:	4606      	mov	r6, r0
 80065a4:	b950      	cbnz	r0, 80065bc <__ssputs_r+0x5c>
 80065a6:	230c      	movs	r3, #12
 80065a8:	f8ca 3000 	str.w	r3, [sl]
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	6921      	ldr	r1, [r4, #16]
 80065be:	464a      	mov	r2, r9
 80065c0:	f000 ff0e 	bl	80073e0 <memcpy>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ce:	81a3      	strh	r3, [r4, #12]
 80065d0:	6126      	str	r6, [r4, #16]
 80065d2:	6165      	str	r5, [r4, #20]
 80065d4:	444e      	add	r6, r9
 80065d6:	eba5 0509 	sub.w	r5, r5, r9
 80065da:	6026      	str	r6, [r4, #0]
 80065dc:	60a5      	str	r5, [r4, #8]
 80065de:	463e      	mov	r6, r7
 80065e0:	42be      	cmp	r6, r7
 80065e2:	d900      	bls.n	80065e6 <__ssputs_r+0x86>
 80065e4:	463e      	mov	r6, r7
 80065e6:	4632      	mov	r2, r6
 80065e8:	6820      	ldr	r0, [r4, #0]
 80065ea:	4641      	mov	r1, r8
 80065ec:	f000 ff06 	bl	80073fc <memmove>
 80065f0:	68a3      	ldr	r3, [r4, #8]
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	1b9b      	subs	r3, r3, r6
 80065f6:	4432      	add	r2, r6
 80065f8:	60a3      	str	r3, [r4, #8]
 80065fa:	6022      	str	r2, [r4, #0]
 80065fc:	2000      	movs	r0, #0
 80065fe:	e7db      	b.n	80065b8 <__ssputs_r+0x58>
 8006600:	462a      	mov	r2, r5
 8006602:	f000 ff21 	bl	8007448 <_realloc_r>
 8006606:	4606      	mov	r6, r0
 8006608:	2800      	cmp	r0, #0
 800660a:	d1e1      	bne.n	80065d0 <__ssputs_r+0x70>
 800660c:	6921      	ldr	r1, [r4, #16]
 800660e:	4650      	mov	r0, sl
 8006610:	f7ff fefc 	bl	800640c <_free_r>
 8006614:	e7c7      	b.n	80065a6 <__ssputs_r+0x46>
	...

08006618 <_svfiprintf_r>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	4698      	mov	r8, r3
 800661e:	898b      	ldrh	r3, [r1, #12]
 8006620:	061b      	lsls	r3, r3, #24
 8006622:	b09d      	sub	sp, #116	; 0x74
 8006624:	4607      	mov	r7, r0
 8006626:	460d      	mov	r5, r1
 8006628:	4614      	mov	r4, r2
 800662a:	d50e      	bpl.n	800664a <_svfiprintf_r+0x32>
 800662c:	690b      	ldr	r3, [r1, #16]
 800662e:	b963      	cbnz	r3, 800664a <_svfiprintf_r+0x32>
 8006630:	2140      	movs	r1, #64	; 0x40
 8006632:	f7ff ff3b 	bl	80064ac <_malloc_r>
 8006636:	6028      	str	r0, [r5, #0]
 8006638:	6128      	str	r0, [r5, #16]
 800663a:	b920      	cbnz	r0, 8006646 <_svfiprintf_r+0x2e>
 800663c:	230c      	movs	r3, #12
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	e0d1      	b.n	80067ea <_svfiprintf_r+0x1d2>
 8006646:	2340      	movs	r3, #64	; 0x40
 8006648:	616b      	str	r3, [r5, #20]
 800664a:	2300      	movs	r3, #0
 800664c:	9309      	str	r3, [sp, #36]	; 0x24
 800664e:	2320      	movs	r3, #32
 8006650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006654:	f8cd 800c 	str.w	r8, [sp, #12]
 8006658:	2330      	movs	r3, #48	; 0x30
 800665a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006804 <_svfiprintf_r+0x1ec>
 800665e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006662:	f04f 0901 	mov.w	r9, #1
 8006666:	4623      	mov	r3, r4
 8006668:	469a      	mov	sl, r3
 800666a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800666e:	b10a      	cbz	r2, 8006674 <_svfiprintf_r+0x5c>
 8006670:	2a25      	cmp	r2, #37	; 0x25
 8006672:	d1f9      	bne.n	8006668 <_svfiprintf_r+0x50>
 8006674:	ebba 0b04 	subs.w	fp, sl, r4
 8006678:	d00b      	beq.n	8006692 <_svfiprintf_r+0x7a>
 800667a:	465b      	mov	r3, fp
 800667c:	4622      	mov	r2, r4
 800667e:	4629      	mov	r1, r5
 8006680:	4638      	mov	r0, r7
 8006682:	f7ff ff6d 	bl	8006560 <__ssputs_r>
 8006686:	3001      	adds	r0, #1
 8006688:	f000 80aa 	beq.w	80067e0 <_svfiprintf_r+0x1c8>
 800668c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800668e:	445a      	add	r2, fp
 8006690:	9209      	str	r2, [sp, #36]	; 0x24
 8006692:	f89a 3000 	ldrb.w	r3, [sl]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 80a2 	beq.w	80067e0 <_svfiprintf_r+0x1c8>
 800669c:	2300      	movs	r3, #0
 800669e:	f04f 32ff 	mov.w	r2, #4294967295
 80066a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066a6:	f10a 0a01 	add.w	sl, sl, #1
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	9307      	str	r3, [sp, #28]
 80066ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066b2:	931a      	str	r3, [sp, #104]	; 0x68
 80066b4:	4654      	mov	r4, sl
 80066b6:	2205      	movs	r2, #5
 80066b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066bc:	4851      	ldr	r0, [pc, #324]	; (8006804 <_svfiprintf_r+0x1ec>)
 80066be:	f7f9 fd9f 	bl	8000200 <memchr>
 80066c2:	9a04      	ldr	r2, [sp, #16]
 80066c4:	b9d8      	cbnz	r0, 80066fe <_svfiprintf_r+0xe6>
 80066c6:	06d0      	lsls	r0, r2, #27
 80066c8:	bf44      	itt	mi
 80066ca:	2320      	movmi	r3, #32
 80066cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d0:	0711      	lsls	r1, r2, #28
 80066d2:	bf44      	itt	mi
 80066d4:	232b      	movmi	r3, #43	; 0x2b
 80066d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066da:	f89a 3000 	ldrb.w	r3, [sl]
 80066de:	2b2a      	cmp	r3, #42	; 0x2a
 80066e0:	d015      	beq.n	800670e <_svfiprintf_r+0xf6>
 80066e2:	9a07      	ldr	r2, [sp, #28]
 80066e4:	4654      	mov	r4, sl
 80066e6:	2000      	movs	r0, #0
 80066e8:	f04f 0c0a 	mov.w	ip, #10
 80066ec:	4621      	mov	r1, r4
 80066ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f2:	3b30      	subs	r3, #48	; 0x30
 80066f4:	2b09      	cmp	r3, #9
 80066f6:	d94e      	bls.n	8006796 <_svfiprintf_r+0x17e>
 80066f8:	b1b0      	cbz	r0, 8006728 <_svfiprintf_r+0x110>
 80066fa:	9207      	str	r2, [sp, #28]
 80066fc:	e014      	b.n	8006728 <_svfiprintf_r+0x110>
 80066fe:	eba0 0308 	sub.w	r3, r0, r8
 8006702:	fa09 f303 	lsl.w	r3, r9, r3
 8006706:	4313      	orrs	r3, r2
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	46a2      	mov	sl, r4
 800670c:	e7d2      	b.n	80066b4 <_svfiprintf_r+0x9c>
 800670e:	9b03      	ldr	r3, [sp, #12]
 8006710:	1d19      	adds	r1, r3, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	9103      	str	r1, [sp, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	bfbb      	ittet	lt
 800671a:	425b      	neglt	r3, r3
 800671c:	f042 0202 	orrlt.w	r2, r2, #2
 8006720:	9307      	strge	r3, [sp, #28]
 8006722:	9307      	strlt	r3, [sp, #28]
 8006724:	bfb8      	it	lt
 8006726:	9204      	strlt	r2, [sp, #16]
 8006728:	7823      	ldrb	r3, [r4, #0]
 800672a:	2b2e      	cmp	r3, #46	; 0x2e
 800672c:	d10c      	bne.n	8006748 <_svfiprintf_r+0x130>
 800672e:	7863      	ldrb	r3, [r4, #1]
 8006730:	2b2a      	cmp	r3, #42	; 0x2a
 8006732:	d135      	bne.n	80067a0 <_svfiprintf_r+0x188>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	1d1a      	adds	r2, r3, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	9203      	str	r2, [sp, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	bfb8      	it	lt
 8006740:	f04f 33ff 	movlt.w	r3, #4294967295
 8006744:	3402      	adds	r4, #2
 8006746:	9305      	str	r3, [sp, #20]
 8006748:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006814 <_svfiprintf_r+0x1fc>
 800674c:	7821      	ldrb	r1, [r4, #0]
 800674e:	2203      	movs	r2, #3
 8006750:	4650      	mov	r0, sl
 8006752:	f7f9 fd55 	bl	8000200 <memchr>
 8006756:	b140      	cbz	r0, 800676a <_svfiprintf_r+0x152>
 8006758:	2340      	movs	r3, #64	; 0x40
 800675a:	eba0 000a 	sub.w	r0, r0, sl
 800675e:	fa03 f000 	lsl.w	r0, r3, r0
 8006762:	9b04      	ldr	r3, [sp, #16]
 8006764:	4303      	orrs	r3, r0
 8006766:	3401      	adds	r4, #1
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676e:	4826      	ldr	r0, [pc, #152]	; (8006808 <_svfiprintf_r+0x1f0>)
 8006770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006774:	2206      	movs	r2, #6
 8006776:	f7f9 fd43 	bl	8000200 <memchr>
 800677a:	2800      	cmp	r0, #0
 800677c:	d038      	beq.n	80067f0 <_svfiprintf_r+0x1d8>
 800677e:	4b23      	ldr	r3, [pc, #140]	; (800680c <_svfiprintf_r+0x1f4>)
 8006780:	bb1b      	cbnz	r3, 80067ca <_svfiprintf_r+0x1b2>
 8006782:	9b03      	ldr	r3, [sp, #12]
 8006784:	3307      	adds	r3, #7
 8006786:	f023 0307 	bic.w	r3, r3, #7
 800678a:	3308      	adds	r3, #8
 800678c:	9303      	str	r3, [sp, #12]
 800678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006790:	4433      	add	r3, r6
 8006792:	9309      	str	r3, [sp, #36]	; 0x24
 8006794:	e767      	b.n	8006666 <_svfiprintf_r+0x4e>
 8006796:	fb0c 3202 	mla	r2, ip, r2, r3
 800679a:	460c      	mov	r4, r1
 800679c:	2001      	movs	r0, #1
 800679e:	e7a5      	b.n	80066ec <_svfiprintf_r+0xd4>
 80067a0:	2300      	movs	r3, #0
 80067a2:	3401      	adds	r4, #1
 80067a4:	9305      	str	r3, [sp, #20]
 80067a6:	4619      	mov	r1, r3
 80067a8:	f04f 0c0a 	mov.w	ip, #10
 80067ac:	4620      	mov	r0, r4
 80067ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067b2:	3a30      	subs	r2, #48	; 0x30
 80067b4:	2a09      	cmp	r2, #9
 80067b6:	d903      	bls.n	80067c0 <_svfiprintf_r+0x1a8>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0c5      	beq.n	8006748 <_svfiprintf_r+0x130>
 80067bc:	9105      	str	r1, [sp, #20]
 80067be:	e7c3      	b.n	8006748 <_svfiprintf_r+0x130>
 80067c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80067c4:	4604      	mov	r4, r0
 80067c6:	2301      	movs	r3, #1
 80067c8:	e7f0      	b.n	80067ac <_svfiprintf_r+0x194>
 80067ca:	ab03      	add	r3, sp, #12
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	462a      	mov	r2, r5
 80067d0:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <_svfiprintf_r+0x1f8>)
 80067d2:	a904      	add	r1, sp, #16
 80067d4:	4638      	mov	r0, r7
 80067d6:	f3af 8000 	nop.w
 80067da:	1c42      	adds	r2, r0, #1
 80067dc:	4606      	mov	r6, r0
 80067de:	d1d6      	bne.n	800678e <_svfiprintf_r+0x176>
 80067e0:	89ab      	ldrh	r3, [r5, #12]
 80067e2:	065b      	lsls	r3, r3, #25
 80067e4:	f53f af2c 	bmi.w	8006640 <_svfiprintf_r+0x28>
 80067e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ea:	b01d      	add	sp, #116	; 0x74
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f0:	ab03      	add	r3, sp, #12
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	462a      	mov	r2, r5
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <_svfiprintf_r+0x1f8>)
 80067f8:	a904      	add	r1, sp, #16
 80067fa:	4638      	mov	r0, r7
 80067fc:	f000 f9d4 	bl	8006ba8 <_printf_i>
 8006800:	e7eb      	b.n	80067da <_svfiprintf_r+0x1c2>
 8006802:	bf00      	nop
 8006804:	08007968 	.word	0x08007968
 8006808:	08007972 	.word	0x08007972
 800680c:	00000000 	.word	0x00000000
 8006810:	08006561 	.word	0x08006561
 8006814:	0800796e 	.word	0x0800796e

08006818 <__sfputc_r>:
 8006818:	6893      	ldr	r3, [r2, #8]
 800681a:	3b01      	subs	r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	b410      	push	{r4}
 8006820:	6093      	str	r3, [r2, #8]
 8006822:	da08      	bge.n	8006836 <__sfputc_r+0x1e>
 8006824:	6994      	ldr	r4, [r2, #24]
 8006826:	42a3      	cmp	r3, r4
 8006828:	db01      	blt.n	800682e <__sfputc_r+0x16>
 800682a:	290a      	cmp	r1, #10
 800682c:	d103      	bne.n	8006836 <__sfputc_r+0x1e>
 800682e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006832:	f000 baef 	b.w	8006e14 <__swbuf_r>
 8006836:	6813      	ldr	r3, [r2, #0]
 8006838:	1c58      	adds	r0, r3, #1
 800683a:	6010      	str	r0, [r2, #0]
 800683c:	7019      	strb	r1, [r3, #0]
 800683e:	4608      	mov	r0, r1
 8006840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006844:	4770      	bx	lr

08006846 <__sfputs_r>:
 8006846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006848:	4606      	mov	r6, r0
 800684a:	460f      	mov	r7, r1
 800684c:	4614      	mov	r4, r2
 800684e:	18d5      	adds	r5, r2, r3
 8006850:	42ac      	cmp	r4, r5
 8006852:	d101      	bne.n	8006858 <__sfputs_r+0x12>
 8006854:	2000      	movs	r0, #0
 8006856:	e007      	b.n	8006868 <__sfputs_r+0x22>
 8006858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800685c:	463a      	mov	r2, r7
 800685e:	4630      	mov	r0, r6
 8006860:	f7ff ffda 	bl	8006818 <__sfputc_r>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d1f3      	bne.n	8006850 <__sfputs_r+0xa>
 8006868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800686c <_vfiprintf_r>:
 800686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006870:	460d      	mov	r5, r1
 8006872:	b09d      	sub	sp, #116	; 0x74
 8006874:	4614      	mov	r4, r2
 8006876:	4698      	mov	r8, r3
 8006878:	4606      	mov	r6, r0
 800687a:	b118      	cbz	r0, 8006884 <_vfiprintf_r+0x18>
 800687c:	6983      	ldr	r3, [r0, #24]
 800687e:	b90b      	cbnz	r3, 8006884 <_vfiprintf_r+0x18>
 8006880:	f000 fcaa 	bl	80071d8 <__sinit>
 8006884:	4b89      	ldr	r3, [pc, #548]	; (8006aac <_vfiprintf_r+0x240>)
 8006886:	429d      	cmp	r5, r3
 8006888:	d11b      	bne.n	80068c2 <_vfiprintf_r+0x56>
 800688a:	6875      	ldr	r5, [r6, #4]
 800688c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800688e:	07d9      	lsls	r1, r3, #31
 8006890:	d405      	bmi.n	800689e <_vfiprintf_r+0x32>
 8006892:	89ab      	ldrh	r3, [r5, #12]
 8006894:	059a      	lsls	r2, r3, #22
 8006896:	d402      	bmi.n	800689e <_vfiprintf_r+0x32>
 8006898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800689a:	f000 fd3b 	bl	8007314 <__retarget_lock_acquire_recursive>
 800689e:	89ab      	ldrh	r3, [r5, #12]
 80068a0:	071b      	lsls	r3, r3, #28
 80068a2:	d501      	bpl.n	80068a8 <_vfiprintf_r+0x3c>
 80068a4:	692b      	ldr	r3, [r5, #16]
 80068a6:	b9eb      	cbnz	r3, 80068e4 <_vfiprintf_r+0x78>
 80068a8:	4629      	mov	r1, r5
 80068aa:	4630      	mov	r0, r6
 80068ac:	f000 fb04 	bl	8006eb8 <__swsetup_r>
 80068b0:	b1c0      	cbz	r0, 80068e4 <_vfiprintf_r+0x78>
 80068b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068b4:	07dc      	lsls	r4, r3, #31
 80068b6:	d50e      	bpl.n	80068d6 <_vfiprintf_r+0x6a>
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	b01d      	add	sp, #116	; 0x74
 80068be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c2:	4b7b      	ldr	r3, [pc, #492]	; (8006ab0 <_vfiprintf_r+0x244>)
 80068c4:	429d      	cmp	r5, r3
 80068c6:	d101      	bne.n	80068cc <_vfiprintf_r+0x60>
 80068c8:	68b5      	ldr	r5, [r6, #8]
 80068ca:	e7df      	b.n	800688c <_vfiprintf_r+0x20>
 80068cc:	4b79      	ldr	r3, [pc, #484]	; (8006ab4 <_vfiprintf_r+0x248>)
 80068ce:	429d      	cmp	r5, r3
 80068d0:	bf08      	it	eq
 80068d2:	68f5      	ldreq	r5, [r6, #12]
 80068d4:	e7da      	b.n	800688c <_vfiprintf_r+0x20>
 80068d6:	89ab      	ldrh	r3, [r5, #12]
 80068d8:	0598      	lsls	r0, r3, #22
 80068da:	d4ed      	bmi.n	80068b8 <_vfiprintf_r+0x4c>
 80068dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068de:	f000 fd1a 	bl	8007316 <__retarget_lock_release_recursive>
 80068e2:	e7e9      	b.n	80068b8 <_vfiprintf_r+0x4c>
 80068e4:	2300      	movs	r3, #0
 80068e6:	9309      	str	r3, [sp, #36]	; 0x24
 80068e8:	2320      	movs	r3, #32
 80068ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80068f2:	2330      	movs	r3, #48	; 0x30
 80068f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ab8 <_vfiprintf_r+0x24c>
 80068f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068fc:	f04f 0901 	mov.w	r9, #1
 8006900:	4623      	mov	r3, r4
 8006902:	469a      	mov	sl, r3
 8006904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006908:	b10a      	cbz	r2, 800690e <_vfiprintf_r+0xa2>
 800690a:	2a25      	cmp	r2, #37	; 0x25
 800690c:	d1f9      	bne.n	8006902 <_vfiprintf_r+0x96>
 800690e:	ebba 0b04 	subs.w	fp, sl, r4
 8006912:	d00b      	beq.n	800692c <_vfiprintf_r+0xc0>
 8006914:	465b      	mov	r3, fp
 8006916:	4622      	mov	r2, r4
 8006918:	4629      	mov	r1, r5
 800691a:	4630      	mov	r0, r6
 800691c:	f7ff ff93 	bl	8006846 <__sfputs_r>
 8006920:	3001      	adds	r0, #1
 8006922:	f000 80aa 	beq.w	8006a7a <_vfiprintf_r+0x20e>
 8006926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006928:	445a      	add	r2, fp
 800692a:	9209      	str	r2, [sp, #36]	; 0x24
 800692c:	f89a 3000 	ldrb.w	r3, [sl]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80a2 	beq.w	8006a7a <_vfiprintf_r+0x20e>
 8006936:	2300      	movs	r3, #0
 8006938:	f04f 32ff 	mov.w	r2, #4294967295
 800693c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006940:	f10a 0a01 	add.w	sl, sl, #1
 8006944:	9304      	str	r3, [sp, #16]
 8006946:	9307      	str	r3, [sp, #28]
 8006948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800694c:	931a      	str	r3, [sp, #104]	; 0x68
 800694e:	4654      	mov	r4, sl
 8006950:	2205      	movs	r2, #5
 8006952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006956:	4858      	ldr	r0, [pc, #352]	; (8006ab8 <_vfiprintf_r+0x24c>)
 8006958:	f7f9 fc52 	bl	8000200 <memchr>
 800695c:	9a04      	ldr	r2, [sp, #16]
 800695e:	b9d8      	cbnz	r0, 8006998 <_vfiprintf_r+0x12c>
 8006960:	06d1      	lsls	r1, r2, #27
 8006962:	bf44      	itt	mi
 8006964:	2320      	movmi	r3, #32
 8006966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800696a:	0713      	lsls	r3, r2, #28
 800696c:	bf44      	itt	mi
 800696e:	232b      	movmi	r3, #43	; 0x2b
 8006970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006974:	f89a 3000 	ldrb.w	r3, [sl]
 8006978:	2b2a      	cmp	r3, #42	; 0x2a
 800697a:	d015      	beq.n	80069a8 <_vfiprintf_r+0x13c>
 800697c:	9a07      	ldr	r2, [sp, #28]
 800697e:	4654      	mov	r4, sl
 8006980:	2000      	movs	r0, #0
 8006982:	f04f 0c0a 	mov.w	ip, #10
 8006986:	4621      	mov	r1, r4
 8006988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800698c:	3b30      	subs	r3, #48	; 0x30
 800698e:	2b09      	cmp	r3, #9
 8006990:	d94e      	bls.n	8006a30 <_vfiprintf_r+0x1c4>
 8006992:	b1b0      	cbz	r0, 80069c2 <_vfiprintf_r+0x156>
 8006994:	9207      	str	r2, [sp, #28]
 8006996:	e014      	b.n	80069c2 <_vfiprintf_r+0x156>
 8006998:	eba0 0308 	sub.w	r3, r0, r8
 800699c:	fa09 f303 	lsl.w	r3, r9, r3
 80069a0:	4313      	orrs	r3, r2
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	46a2      	mov	sl, r4
 80069a6:	e7d2      	b.n	800694e <_vfiprintf_r+0xe2>
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	1d19      	adds	r1, r3, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	9103      	str	r1, [sp, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfbb      	ittet	lt
 80069b4:	425b      	neglt	r3, r3
 80069b6:	f042 0202 	orrlt.w	r2, r2, #2
 80069ba:	9307      	strge	r3, [sp, #28]
 80069bc:	9307      	strlt	r3, [sp, #28]
 80069be:	bfb8      	it	lt
 80069c0:	9204      	strlt	r2, [sp, #16]
 80069c2:	7823      	ldrb	r3, [r4, #0]
 80069c4:	2b2e      	cmp	r3, #46	; 0x2e
 80069c6:	d10c      	bne.n	80069e2 <_vfiprintf_r+0x176>
 80069c8:	7863      	ldrb	r3, [r4, #1]
 80069ca:	2b2a      	cmp	r3, #42	; 0x2a
 80069cc:	d135      	bne.n	8006a3a <_vfiprintf_r+0x1ce>
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	1d1a      	adds	r2, r3, #4
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	9203      	str	r2, [sp, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bfb8      	it	lt
 80069da:	f04f 33ff 	movlt.w	r3, #4294967295
 80069de:	3402      	adds	r4, #2
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ac8 <_vfiprintf_r+0x25c>
 80069e6:	7821      	ldrb	r1, [r4, #0]
 80069e8:	2203      	movs	r2, #3
 80069ea:	4650      	mov	r0, sl
 80069ec:	f7f9 fc08 	bl	8000200 <memchr>
 80069f0:	b140      	cbz	r0, 8006a04 <_vfiprintf_r+0x198>
 80069f2:	2340      	movs	r3, #64	; 0x40
 80069f4:	eba0 000a 	sub.w	r0, r0, sl
 80069f8:	fa03 f000 	lsl.w	r0, r3, r0
 80069fc:	9b04      	ldr	r3, [sp, #16]
 80069fe:	4303      	orrs	r3, r0
 8006a00:	3401      	adds	r4, #1
 8006a02:	9304      	str	r3, [sp, #16]
 8006a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a08:	482c      	ldr	r0, [pc, #176]	; (8006abc <_vfiprintf_r+0x250>)
 8006a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a0e:	2206      	movs	r2, #6
 8006a10:	f7f9 fbf6 	bl	8000200 <memchr>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d03f      	beq.n	8006a98 <_vfiprintf_r+0x22c>
 8006a18:	4b29      	ldr	r3, [pc, #164]	; (8006ac0 <_vfiprintf_r+0x254>)
 8006a1a:	bb1b      	cbnz	r3, 8006a64 <_vfiprintf_r+0x1f8>
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	3307      	adds	r3, #7
 8006a20:	f023 0307 	bic.w	r3, r3, #7
 8006a24:	3308      	adds	r3, #8
 8006a26:	9303      	str	r3, [sp, #12]
 8006a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2a:	443b      	add	r3, r7
 8006a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2e:	e767      	b.n	8006900 <_vfiprintf_r+0x94>
 8006a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a34:	460c      	mov	r4, r1
 8006a36:	2001      	movs	r0, #1
 8006a38:	e7a5      	b.n	8006986 <_vfiprintf_r+0x11a>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	3401      	adds	r4, #1
 8006a3e:	9305      	str	r3, [sp, #20]
 8006a40:	4619      	mov	r1, r3
 8006a42:	f04f 0c0a 	mov.w	ip, #10
 8006a46:	4620      	mov	r0, r4
 8006a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a4c:	3a30      	subs	r2, #48	; 0x30
 8006a4e:	2a09      	cmp	r2, #9
 8006a50:	d903      	bls.n	8006a5a <_vfiprintf_r+0x1ee>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0c5      	beq.n	80069e2 <_vfiprintf_r+0x176>
 8006a56:	9105      	str	r1, [sp, #20]
 8006a58:	e7c3      	b.n	80069e2 <_vfiprintf_r+0x176>
 8006a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a5e:	4604      	mov	r4, r0
 8006a60:	2301      	movs	r3, #1
 8006a62:	e7f0      	b.n	8006a46 <_vfiprintf_r+0x1da>
 8006a64:	ab03      	add	r3, sp, #12
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	462a      	mov	r2, r5
 8006a6a:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <_vfiprintf_r+0x258>)
 8006a6c:	a904      	add	r1, sp, #16
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f3af 8000 	nop.w
 8006a74:	4607      	mov	r7, r0
 8006a76:	1c78      	adds	r0, r7, #1
 8006a78:	d1d6      	bne.n	8006a28 <_vfiprintf_r+0x1bc>
 8006a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a7c:	07d9      	lsls	r1, r3, #31
 8006a7e:	d405      	bmi.n	8006a8c <_vfiprintf_r+0x220>
 8006a80:	89ab      	ldrh	r3, [r5, #12]
 8006a82:	059a      	lsls	r2, r3, #22
 8006a84:	d402      	bmi.n	8006a8c <_vfiprintf_r+0x220>
 8006a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a88:	f000 fc45 	bl	8007316 <__retarget_lock_release_recursive>
 8006a8c:	89ab      	ldrh	r3, [r5, #12]
 8006a8e:	065b      	lsls	r3, r3, #25
 8006a90:	f53f af12 	bmi.w	80068b8 <_vfiprintf_r+0x4c>
 8006a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a96:	e711      	b.n	80068bc <_vfiprintf_r+0x50>
 8006a98:	ab03      	add	r3, sp, #12
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	462a      	mov	r2, r5
 8006a9e:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <_vfiprintf_r+0x258>)
 8006aa0:	a904      	add	r1, sp, #16
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f000 f880 	bl	8006ba8 <_printf_i>
 8006aa8:	e7e4      	b.n	8006a74 <_vfiprintf_r+0x208>
 8006aaa:	bf00      	nop
 8006aac:	080079bc 	.word	0x080079bc
 8006ab0:	080079dc 	.word	0x080079dc
 8006ab4:	0800799c 	.word	0x0800799c
 8006ab8:	08007968 	.word	0x08007968
 8006abc:	08007972 	.word	0x08007972
 8006ac0:	00000000 	.word	0x00000000
 8006ac4:	08006847 	.word	0x08006847
 8006ac8:	0800796e 	.word	0x0800796e

08006acc <_printf_common>:
 8006acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	4699      	mov	r9, r3
 8006ad4:	688a      	ldr	r2, [r1, #8]
 8006ad6:	690b      	ldr	r3, [r1, #16]
 8006ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006adc:	4293      	cmp	r3, r2
 8006ade:	bfb8      	it	lt
 8006ae0:	4613      	movlt	r3, r2
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ae8:	4607      	mov	r7, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	b10a      	cbz	r2, 8006af2 <_printf_common+0x26>
 8006aee:	3301      	adds	r3, #1
 8006af0:	6033      	str	r3, [r6, #0]
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	0699      	lsls	r1, r3, #26
 8006af6:	bf42      	ittt	mi
 8006af8:	6833      	ldrmi	r3, [r6, #0]
 8006afa:	3302      	addmi	r3, #2
 8006afc:	6033      	strmi	r3, [r6, #0]
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	f015 0506 	ands.w	r5, r5, #6
 8006b04:	d106      	bne.n	8006b14 <_printf_common+0x48>
 8006b06:	f104 0a19 	add.w	sl, r4, #25
 8006b0a:	68e3      	ldr	r3, [r4, #12]
 8006b0c:	6832      	ldr	r2, [r6, #0]
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	dc26      	bgt.n	8006b62 <_printf_common+0x96>
 8006b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b18:	1e13      	subs	r3, r2, #0
 8006b1a:	6822      	ldr	r2, [r4, #0]
 8006b1c:	bf18      	it	ne
 8006b1e:	2301      	movne	r3, #1
 8006b20:	0692      	lsls	r2, r2, #26
 8006b22:	d42b      	bmi.n	8006b7c <_printf_common+0xb0>
 8006b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	47c0      	blx	r8
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d01e      	beq.n	8006b70 <_printf_common+0xa4>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	68e5      	ldr	r5, [r4, #12]
 8006b36:	6832      	ldr	r2, [r6, #0]
 8006b38:	f003 0306 	and.w	r3, r3, #6
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	bf08      	it	eq
 8006b40:	1aad      	subeq	r5, r5, r2
 8006b42:	68a3      	ldr	r3, [r4, #8]
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	bf0c      	ite	eq
 8006b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b4c:	2500      	movne	r5, #0
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	bfc4      	itt	gt
 8006b52:	1a9b      	subgt	r3, r3, r2
 8006b54:	18ed      	addgt	r5, r5, r3
 8006b56:	2600      	movs	r6, #0
 8006b58:	341a      	adds	r4, #26
 8006b5a:	42b5      	cmp	r5, r6
 8006b5c:	d11a      	bne.n	8006b94 <_printf_common+0xc8>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e008      	b.n	8006b74 <_printf_common+0xa8>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4652      	mov	r2, sl
 8006b66:	4649      	mov	r1, r9
 8006b68:	4638      	mov	r0, r7
 8006b6a:	47c0      	blx	r8
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d103      	bne.n	8006b78 <_printf_common+0xac>
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295
 8006b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b78:	3501      	adds	r5, #1
 8006b7a:	e7c6      	b.n	8006b0a <_printf_common+0x3e>
 8006b7c:	18e1      	adds	r1, r4, r3
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	2030      	movs	r0, #48	; 0x30
 8006b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b86:	4422      	add	r2, r4
 8006b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b90:	3302      	adds	r3, #2
 8006b92:	e7c7      	b.n	8006b24 <_printf_common+0x58>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4622      	mov	r2, r4
 8006b98:	4649      	mov	r1, r9
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	47c0      	blx	r8
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d0e6      	beq.n	8006b70 <_printf_common+0xa4>
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7d9      	b.n	8006b5a <_printf_common+0x8e>
	...

08006ba8 <_printf_i>:
 8006ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	460c      	mov	r4, r1
 8006bae:	4691      	mov	r9, r2
 8006bb0:	7e27      	ldrb	r7, [r4, #24]
 8006bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bb4:	2f78      	cmp	r7, #120	; 0x78
 8006bb6:	4680      	mov	r8, r0
 8006bb8:	469a      	mov	sl, r3
 8006bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bbe:	d807      	bhi.n	8006bd0 <_printf_i+0x28>
 8006bc0:	2f62      	cmp	r7, #98	; 0x62
 8006bc2:	d80a      	bhi.n	8006bda <_printf_i+0x32>
 8006bc4:	2f00      	cmp	r7, #0
 8006bc6:	f000 80d8 	beq.w	8006d7a <_printf_i+0x1d2>
 8006bca:	2f58      	cmp	r7, #88	; 0x58
 8006bcc:	f000 80a3 	beq.w	8006d16 <_printf_i+0x16e>
 8006bd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bd8:	e03a      	b.n	8006c50 <_printf_i+0xa8>
 8006bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bde:	2b15      	cmp	r3, #21
 8006be0:	d8f6      	bhi.n	8006bd0 <_printf_i+0x28>
 8006be2:	a001      	add	r0, pc, #4	; (adr r0, 8006be8 <_printf_i+0x40>)
 8006be4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c55 	.word	0x08006c55
 8006bf0:	08006bd1 	.word	0x08006bd1
 8006bf4:	08006bd1 	.word	0x08006bd1
 8006bf8:	08006bd1 	.word	0x08006bd1
 8006bfc:	08006bd1 	.word	0x08006bd1
 8006c00:	08006c55 	.word	0x08006c55
 8006c04:	08006bd1 	.word	0x08006bd1
 8006c08:	08006bd1 	.word	0x08006bd1
 8006c0c:	08006bd1 	.word	0x08006bd1
 8006c10:	08006bd1 	.word	0x08006bd1
 8006c14:	08006d61 	.word	0x08006d61
 8006c18:	08006c85 	.word	0x08006c85
 8006c1c:	08006d43 	.word	0x08006d43
 8006c20:	08006bd1 	.word	0x08006bd1
 8006c24:	08006bd1 	.word	0x08006bd1
 8006c28:	08006d83 	.word	0x08006d83
 8006c2c:	08006bd1 	.word	0x08006bd1
 8006c30:	08006c85 	.word	0x08006c85
 8006c34:	08006bd1 	.word	0x08006bd1
 8006c38:	08006bd1 	.word	0x08006bd1
 8006c3c:	08006d4b 	.word	0x08006d4b
 8006c40:	680b      	ldr	r3, [r1, #0]
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	600a      	str	r2, [r1, #0]
 8006c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0a3      	b.n	8006d9c <_printf_i+0x1f4>
 8006c54:	6825      	ldr	r5, [r4, #0]
 8006c56:	6808      	ldr	r0, [r1, #0]
 8006c58:	062e      	lsls	r6, r5, #24
 8006c5a:	f100 0304 	add.w	r3, r0, #4
 8006c5e:	d50a      	bpl.n	8006c76 <_printf_i+0xce>
 8006c60:	6805      	ldr	r5, [r0, #0]
 8006c62:	600b      	str	r3, [r1, #0]
 8006c64:	2d00      	cmp	r5, #0
 8006c66:	da03      	bge.n	8006c70 <_printf_i+0xc8>
 8006c68:	232d      	movs	r3, #45	; 0x2d
 8006c6a:	426d      	negs	r5, r5
 8006c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c70:	485e      	ldr	r0, [pc, #376]	; (8006dec <_printf_i+0x244>)
 8006c72:	230a      	movs	r3, #10
 8006c74:	e019      	b.n	8006caa <_printf_i+0x102>
 8006c76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c7a:	6805      	ldr	r5, [r0, #0]
 8006c7c:	600b      	str	r3, [r1, #0]
 8006c7e:	bf18      	it	ne
 8006c80:	b22d      	sxthne	r5, r5
 8006c82:	e7ef      	b.n	8006c64 <_printf_i+0xbc>
 8006c84:	680b      	ldr	r3, [r1, #0]
 8006c86:	6825      	ldr	r5, [r4, #0]
 8006c88:	1d18      	adds	r0, r3, #4
 8006c8a:	6008      	str	r0, [r1, #0]
 8006c8c:	0628      	lsls	r0, r5, #24
 8006c8e:	d501      	bpl.n	8006c94 <_printf_i+0xec>
 8006c90:	681d      	ldr	r5, [r3, #0]
 8006c92:	e002      	b.n	8006c9a <_printf_i+0xf2>
 8006c94:	0669      	lsls	r1, r5, #25
 8006c96:	d5fb      	bpl.n	8006c90 <_printf_i+0xe8>
 8006c98:	881d      	ldrh	r5, [r3, #0]
 8006c9a:	4854      	ldr	r0, [pc, #336]	; (8006dec <_printf_i+0x244>)
 8006c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2308      	moveq	r3, #8
 8006ca2:	230a      	movne	r3, #10
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006caa:	6866      	ldr	r6, [r4, #4]
 8006cac:	60a6      	str	r6, [r4, #8]
 8006cae:	2e00      	cmp	r6, #0
 8006cb0:	bfa2      	ittt	ge
 8006cb2:	6821      	ldrge	r1, [r4, #0]
 8006cb4:	f021 0104 	bicge.w	r1, r1, #4
 8006cb8:	6021      	strge	r1, [r4, #0]
 8006cba:	b90d      	cbnz	r5, 8006cc0 <_printf_i+0x118>
 8006cbc:	2e00      	cmp	r6, #0
 8006cbe:	d04d      	beq.n	8006d5c <_printf_i+0x1b4>
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8006cca:	5dc7      	ldrb	r7, [r0, r7]
 8006ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cd0:	462f      	mov	r7, r5
 8006cd2:	42bb      	cmp	r3, r7
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	d9f4      	bls.n	8006cc2 <_printf_i+0x11a>
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d10b      	bne.n	8006cf4 <_printf_i+0x14c>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	07df      	lsls	r7, r3, #31
 8006ce0:	d508      	bpl.n	8006cf4 <_printf_i+0x14c>
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	6861      	ldr	r1, [r4, #4]
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	bfde      	ittt	le
 8006cea:	2330      	movle	r3, #48	; 0x30
 8006cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cf4:	1b92      	subs	r2, r2, r6
 8006cf6:	6122      	str	r2, [r4, #16]
 8006cf8:	f8cd a000 	str.w	sl, [sp]
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	aa03      	add	r2, sp, #12
 8006d00:	4621      	mov	r1, r4
 8006d02:	4640      	mov	r0, r8
 8006d04:	f7ff fee2 	bl	8006acc <_printf_common>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d14c      	bne.n	8006da6 <_printf_i+0x1fe>
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	b004      	add	sp, #16
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	4835      	ldr	r0, [pc, #212]	; (8006dec <_printf_i+0x244>)
 8006d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	680e      	ldr	r6, [r1, #0]
 8006d20:	061f      	lsls	r7, r3, #24
 8006d22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d26:	600e      	str	r6, [r1, #0]
 8006d28:	d514      	bpl.n	8006d54 <_printf_i+0x1ac>
 8006d2a:	07d9      	lsls	r1, r3, #31
 8006d2c:	bf44      	itt	mi
 8006d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d32:	6023      	strmi	r3, [r4, #0]
 8006d34:	b91d      	cbnz	r5, 8006d3e <_printf_i+0x196>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f023 0320 	bic.w	r3, r3, #32
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	2310      	movs	r3, #16
 8006d40:	e7b0      	b.n	8006ca4 <_printf_i+0xfc>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f043 0320 	orr.w	r3, r3, #32
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	2378      	movs	r3, #120	; 0x78
 8006d4c:	4828      	ldr	r0, [pc, #160]	; (8006df0 <_printf_i+0x248>)
 8006d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d52:	e7e3      	b.n	8006d1c <_printf_i+0x174>
 8006d54:	065e      	lsls	r6, r3, #25
 8006d56:	bf48      	it	mi
 8006d58:	b2ad      	uxthmi	r5, r5
 8006d5a:	e7e6      	b.n	8006d2a <_printf_i+0x182>
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	e7bb      	b.n	8006cd8 <_printf_i+0x130>
 8006d60:	680b      	ldr	r3, [r1, #0]
 8006d62:	6826      	ldr	r6, [r4, #0]
 8006d64:	6960      	ldr	r0, [r4, #20]
 8006d66:	1d1d      	adds	r5, r3, #4
 8006d68:	600d      	str	r5, [r1, #0]
 8006d6a:	0635      	lsls	r5, r6, #24
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	d501      	bpl.n	8006d74 <_printf_i+0x1cc>
 8006d70:	6018      	str	r0, [r3, #0]
 8006d72:	e002      	b.n	8006d7a <_printf_i+0x1d2>
 8006d74:	0671      	lsls	r1, r6, #25
 8006d76:	d5fb      	bpl.n	8006d70 <_printf_i+0x1c8>
 8006d78:	8018      	strh	r0, [r3, #0]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	4616      	mov	r6, r2
 8006d80:	e7ba      	b.n	8006cf8 <_printf_i+0x150>
 8006d82:	680b      	ldr	r3, [r1, #0]
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	600a      	str	r2, [r1, #0]
 8006d88:	681e      	ldr	r6, [r3, #0]
 8006d8a:	6862      	ldr	r2, [r4, #4]
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7f9 fa36 	bl	8000200 <memchr>
 8006d94:	b108      	cbz	r0, 8006d9a <_printf_i+0x1f2>
 8006d96:	1b80      	subs	r0, r0, r6
 8006d98:	6060      	str	r0, [r4, #4]
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da4:	e7a8      	b.n	8006cf8 <_printf_i+0x150>
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	4632      	mov	r2, r6
 8006daa:	4649      	mov	r1, r9
 8006dac:	4640      	mov	r0, r8
 8006dae:	47d0      	blx	sl
 8006db0:	3001      	adds	r0, #1
 8006db2:	d0ab      	beq.n	8006d0c <_printf_i+0x164>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	079b      	lsls	r3, r3, #30
 8006db8:	d413      	bmi.n	8006de2 <_printf_i+0x23a>
 8006dba:	68e0      	ldr	r0, [r4, #12]
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	4298      	cmp	r0, r3
 8006dc0:	bfb8      	it	lt
 8006dc2:	4618      	movlt	r0, r3
 8006dc4:	e7a4      	b.n	8006d10 <_printf_i+0x168>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4632      	mov	r2, r6
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4640      	mov	r0, r8
 8006dce:	47d0      	blx	sl
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d09b      	beq.n	8006d0c <_printf_i+0x164>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	68e3      	ldr	r3, [r4, #12]
 8006dd8:	9903      	ldr	r1, [sp, #12]
 8006dda:	1a5b      	subs	r3, r3, r1
 8006ddc:	42ab      	cmp	r3, r5
 8006dde:	dcf2      	bgt.n	8006dc6 <_printf_i+0x21e>
 8006de0:	e7eb      	b.n	8006dba <_printf_i+0x212>
 8006de2:	2500      	movs	r5, #0
 8006de4:	f104 0619 	add.w	r6, r4, #25
 8006de8:	e7f5      	b.n	8006dd6 <_printf_i+0x22e>
 8006dea:	bf00      	nop
 8006dec:	08007979 	.word	0x08007979
 8006df0:	0800798a 	.word	0x0800798a

08006df4 <_sbrk_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4d06      	ldr	r5, [pc, #24]	; (8006e10 <_sbrk_r+0x1c>)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	602b      	str	r3, [r5, #0]
 8006e00:	f7fa ffc0 	bl	8001d84 <_sbrk>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_sbrk_r+0x1a>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_sbrk_r+0x1a>
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20000698 	.word	0x20000698

08006e14 <__swbuf_r>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	460e      	mov	r6, r1
 8006e18:	4614      	mov	r4, r2
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	b118      	cbz	r0, 8006e26 <__swbuf_r+0x12>
 8006e1e:	6983      	ldr	r3, [r0, #24]
 8006e20:	b90b      	cbnz	r3, 8006e26 <__swbuf_r+0x12>
 8006e22:	f000 f9d9 	bl	80071d8 <__sinit>
 8006e26:	4b21      	ldr	r3, [pc, #132]	; (8006eac <__swbuf_r+0x98>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	d12b      	bne.n	8006e84 <__swbuf_r+0x70>
 8006e2c:	686c      	ldr	r4, [r5, #4]
 8006e2e:	69a3      	ldr	r3, [r4, #24]
 8006e30:	60a3      	str	r3, [r4, #8]
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	071a      	lsls	r2, r3, #28
 8006e36:	d52f      	bpl.n	8006e98 <__swbuf_r+0x84>
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	b36b      	cbz	r3, 8006e98 <__swbuf_r+0x84>
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	6820      	ldr	r0, [r4, #0]
 8006e40:	1ac0      	subs	r0, r0, r3
 8006e42:	6963      	ldr	r3, [r4, #20]
 8006e44:	b2f6      	uxtb	r6, r6
 8006e46:	4283      	cmp	r3, r0
 8006e48:	4637      	mov	r7, r6
 8006e4a:	dc04      	bgt.n	8006e56 <__swbuf_r+0x42>
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 f92e 	bl	80070b0 <_fflush_r>
 8006e54:	bb30      	cbnz	r0, 8006ea4 <__swbuf_r+0x90>
 8006e56:	68a3      	ldr	r3, [r4, #8]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	60a3      	str	r3, [r4, #8]
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	701e      	strb	r6, [r3, #0]
 8006e64:	6963      	ldr	r3, [r4, #20]
 8006e66:	3001      	adds	r0, #1
 8006e68:	4283      	cmp	r3, r0
 8006e6a:	d004      	beq.n	8006e76 <__swbuf_r+0x62>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	07db      	lsls	r3, r3, #31
 8006e70:	d506      	bpl.n	8006e80 <__swbuf_r+0x6c>
 8006e72:	2e0a      	cmp	r6, #10
 8006e74:	d104      	bne.n	8006e80 <__swbuf_r+0x6c>
 8006e76:	4621      	mov	r1, r4
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f000 f919 	bl	80070b0 <_fflush_r>
 8006e7e:	b988      	cbnz	r0, 8006ea4 <__swbuf_r+0x90>
 8006e80:	4638      	mov	r0, r7
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <__swbuf_r+0x9c>)
 8006e86:	429c      	cmp	r4, r3
 8006e88:	d101      	bne.n	8006e8e <__swbuf_r+0x7a>
 8006e8a:	68ac      	ldr	r4, [r5, #8]
 8006e8c:	e7cf      	b.n	8006e2e <__swbuf_r+0x1a>
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <__swbuf_r+0xa0>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	bf08      	it	eq
 8006e94:	68ec      	ldreq	r4, [r5, #12]
 8006e96:	e7ca      	b.n	8006e2e <__swbuf_r+0x1a>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f80c 	bl	8006eb8 <__swsetup_r>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d0cb      	beq.n	8006e3c <__swbuf_r+0x28>
 8006ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ea8:	e7ea      	b.n	8006e80 <__swbuf_r+0x6c>
 8006eaa:	bf00      	nop
 8006eac:	080079bc 	.word	0x080079bc
 8006eb0:	080079dc 	.word	0x080079dc
 8006eb4:	0800799c 	.word	0x0800799c

08006eb8 <__swsetup_r>:
 8006eb8:	4b32      	ldr	r3, [pc, #200]	; (8006f84 <__swsetup_r+0xcc>)
 8006eba:	b570      	push	{r4, r5, r6, lr}
 8006ebc:	681d      	ldr	r5, [r3, #0]
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	b125      	cbz	r5, 8006ece <__swsetup_r+0x16>
 8006ec4:	69ab      	ldr	r3, [r5, #24]
 8006ec6:	b913      	cbnz	r3, 8006ece <__swsetup_r+0x16>
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 f985 	bl	80071d8 <__sinit>
 8006ece:	4b2e      	ldr	r3, [pc, #184]	; (8006f88 <__swsetup_r+0xd0>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	d10f      	bne.n	8006ef4 <__swsetup_r+0x3c>
 8006ed4:	686c      	ldr	r4, [r5, #4]
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006edc:	0719      	lsls	r1, r3, #28
 8006ede:	d42c      	bmi.n	8006f3a <__swsetup_r+0x82>
 8006ee0:	06dd      	lsls	r5, r3, #27
 8006ee2:	d411      	bmi.n	8006f08 <__swsetup_r+0x50>
 8006ee4:	2309      	movs	r3, #9
 8006ee6:	6033      	str	r3, [r6, #0]
 8006ee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef2:	e03e      	b.n	8006f72 <__swsetup_r+0xba>
 8006ef4:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <__swsetup_r+0xd4>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d101      	bne.n	8006efe <__swsetup_r+0x46>
 8006efa:	68ac      	ldr	r4, [r5, #8]
 8006efc:	e7eb      	b.n	8006ed6 <__swsetup_r+0x1e>
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <__swsetup_r+0xd8>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	bf08      	it	eq
 8006f04:	68ec      	ldreq	r4, [r5, #12]
 8006f06:	e7e6      	b.n	8006ed6 <__swsetup_r+0x1e>
 8006f08:	0758      	lsls	r0, r3, #29
 8006f0a:	d512      	bpl.n	8006f32 <__swsetup_r+0x7a>
 8006f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f0e:	b141      	cbz	r1, 8006f22 <__swsetup_r+0x6a>
 8006f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f14:	4299      	cmp	r1, r3
 8006f16:	d002      	beq.n	8006f1e <__swsetup_r+0x66>
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f7ff fa77 	bl	800640c <_free_r>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6363      	str	r3, [r4, #52]	; 0x34
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f043 0308 	orr.w	r3, r3, #8
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	b94b      	cbnz	r3, 8006f52 <__swsetup_r+0x9a>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f48:	d003      	beq.n	8006f52 <__swsetup_r+0x9a>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f000 fa07 	bl	8007360 <__smakebuf_r>
 8006f52:	89a0      	ldrh	r0, [r4, #12]
 8006f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f58:	f010 0301 	ands.w	r3, r0, #1
 8006f5c:	d00a      	beq.n	8006f74 <__swsetup_r+0xbc>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60a3      	str	r3, [r4, #8]
 8006f62:	6963      	ldr	r3, [r4, #20]
 8006f64:	425b      	negs	r3, r3
 8006f66:	61a3      	str	r3, [r4, #24]
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	b943      	cbnz	r3, 8006f7e <__swsetup_r+0xc6>
 8006f6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f70:	d1ba      	bne.n	8006ee8 <__swsetup_r+0x30>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	0781      	lsls	r1, r0, #30
 8006f76:	bf58      	it	pl
 8006f78:	6963      	ldrpl	r3, [r4, #20]
 8006f7a:	60a3      	str	r3, [r4, #8]
 8006f7c:	e7f4      	b.n	8006f68 <__swsetup_r+0xb0>
 8006f7e:	2000      	movs	r0, #0
 8006f80:	e7f7      	b.n	8006f72 <__swsetup_r+0xba>
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c
 8006f88:	080079bc 	.word	0x080079bc
 8006f8c:	080079dc 	.word	0x080079dc
 8006f90:	0800799c 	.word	0x0800799c

08006f94 <abort>:
 8006f94:	b508      	push	{r3, lr}
 8006f96:	2006      	movs	r0, #6
 8006f98:	f000 faa4 	bl	80074e4 <raise>
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f7fa fe79 	bl	8001c94 <_exit>
	...

08006fa4 <__sflush_r>:
 8006fa4:	898a      	ldrh	r2, [r1, #12]
 8006fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006faa:	4605      	mov	r5, r0
 8006fac:	0710      	lsls	r0, r2, #28
 8006fae:	460c      	mov	r4, r1
 8006fb0:	d458      	bmi.n	8007064 <__sflush_r+0xc0>
 8006fb2:	684b      	ldr	r3, [r1, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	dc05      	bgt.n	8006fc4 <__sflush_r+0x20>
 8006fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	dc02      	bgt.n	8006fc4 <__sflush_r+0x20>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	d0f9      	beq.n	8006fbe <__sflush_r+0x1a>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fd0:	682f      	ldr	r7, [r5, #0]
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	d032      	beq.n	800703c <__sflush_r+0x98>
 8006fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	075a      	lsls	r2, r3, #29
 8006fdc:	d505      	bpl.n	8006fea <__sflush_r+0x46>
 8006fde:	6863      	ldr	r3, [r4, #4]
 8006fe0:	1ac0      	subs	r0, r0, r3
 8006fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fe4:	b10b      	cbz	r3, 8006fea <__sflush_r+0x46>
 8006fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fe8:	1ac0      	subs	r0, r0, r3
 8006fea:	2300      	movs	r3, #0
 8006fec:	4602      	mov	r2, r0
 8006fee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ff0:	6a21      	ldr	r1, [r4, #32]
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b0      	blx	r6
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	d106      	bne.n	800700a <__sflush_r+0x66>
 8006ffc:	6829      	ldr	r1, [r5, #0]
 8006ffe:	291d      	cmp	r1, #29
 8007000:	d82c      	bhi.n	800705c <__sflush_r+0xb8>
 8007002:	4a2a      	ldr	r2, [pc, #168]	; (80070ac <__sflush_r+0x108>)
 8007004:	40ca      	lsrs	r2, r1
 8007006:	07d6      	lsls	r6, r2, #31
 8007008:	d528      	bpl.n	800705c <__sflush_r+0xb8>
 800700a:	2200      	movs	r2, #0
 800700c:	6062      	str	r2, [r4, #4]
 800700e:	04d9      	lsls	r1, r3, #19
 8007010:	6922      	ldr	r2, [r4, #16]
 8007012:	6022      	str	r2, [r4, #0]
 8007014:	d504      	bpl.n	8007020 <__sflush_r+0x7c>
 8007016:	1c42      	adds	r2, r0, #1
 8007018:	d101      	bne.n	800701e <__sflush_r+0x7a>
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	b903      	cbnz	r3, 8007020 <__sflush_r+0x7c>
 800701e:	6560      	str	r0, [r4, #84]	; 0x54
 8007020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007022:	602f      	str	r7, [r5, #0]
 8007024:	2900      	cmp	r1, #0
 8007026:	d0ca      	beq.n	8006fbe <__sflush_r+0x1a>
 8007028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800702c:	4299      	cmp	r1, r3
 800702e:	d002      	beq.n	8007036 <__sflush_r+0x92>
 8007030:	4628      	mov	r0, r5
 8007032:	f7ff f9eb 	bl	800640c <_free_r>
 8007036:	2000      	movs	r0, #0
 8007038:	6360      	str	r0, [r4, #52]	; 0x34
 800703a:	e7c1      	b.n	8006fc0 <__sflush_r+0x1c>
 800703c:	6a21      	ldr	r1, [r4, #32]
 800703e:	2301      	movs	r3, #1
 8007040:	4628      	mov	r0, r5
 8007042:	47b0      	blx	r6
 8007044:	1c41      	adds	r1, r0, #1
 8007046:	d1c7      	bne.n	8006fd8 <__sflush_r+0x34>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0c4      	beq.n	8006fd8 <__sflush_r+0x34>
 800704e:	2b1d      	cmp	r3, #29
 8007050:	d001      	beq.n	8007056 <__sflush_r+0xb2>
 8007052:	2b16      	cmp	r3, #22
 8007054:	d101      	bne.n	800705a <__sflush_r+0xb6>
 8007056:	602f      	str	r7, [r5, #0]
 8007058:	e7b1      	b.n	8006fbe <__sflush_r+0x1a>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007060:	81a3      	strh	r3, [r4, #12]
 8007062:	e7ad      	b.n	8006fc0 <__sflush_r+0x1c>
 8007064:	690f      	ldr	r7, [r1, #16]
 8007066:	2f00      	cmp	r7, #0
 8007068:	d0a9      	beq.n	8006fbe <__sflush_r+0x1a>
 800706a:	0793      	lsls	r3, r2, #30
 800706c:	680e      	ldr	r6, [r1, #0]
 800706e:	bf08      	it	eq
 8007070:	694b      	ldreq	r3, [r1, #20]
 8007072:	600f      	str	r7, [r1, #0]
 8007074:	bf18      	it	ne
 8007076:	2300      	movne	r3, #0
 8007078:	eba6 0807 	sub.w	r8, r6, r7
 800707c:	608b      	str	r3, [r1, #8]
 800707e:	f1b8 0f00 	cmp.w	r8, #0
 8007082:	dd9c      	ble.n	8006fbe <__sflush_r+0x1a>
 8007084:	6a21      	ldr	r1, [r4, #32]
 8007086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007088:	4643      	mov	r3, r8
 800708a:	463a      	mov	r2, r7
 800708c:	4628      	mov	r0, r5
 800708e:	47b0      	blx	r6
 8007090:	2800      	cmp	r0, #0
 8007092:	dc06      	bgt.n	80070a2 <__sflush_r+0xfe>
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e78e      	b.n	8006fc0 <__sflush_r+0x1c>
 80070a2:	4407      	add	r7, r0
 80070a4:	eba8 0800 	sub.w	r8, r8, r0
 80070a8:	e7e9      	b.n	800707e <__sflush_r+0xda>
 80070aa:	bf00      	nop
 80070ac:	20400001 	.word	0x20400001

080070b0 <_fflush_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	690b      	ldr	r3, [r1, #16]
 80070b4:	4605      	mov	r5, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	b913      	cbnz	r3, 80070c0 <_fflush_r+0x10>
 80070ba:	2500      	movs	r5, #0
 80070bc:	4628      	mov	r0, r5
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	b118      	cbz	r0, 80070ca <_fflush_r+0x1a>
 80070c2:	6983      	ldr	r3, [r0, #24]
 80070c4:	b90b      	cbnz	r3, 80070ca <_fflush_r+0x1a>
 80070c6:	f000 f887 	bl	80071d8 <__sinit>
 80070ca:	4b14      	ldr	r3, [pc, #80]	; (800711c <_fflush_r+0x6c>)
 80070cc:	429c      	cmp	r4, r3
 80070ce:	d11b      	bne.n	8007108 <_fflush_r+0x58>
 80070d0:	686c      	ldr	r4, [r5, #4]
 80070d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0ef      	beq.n	80070ba <_fflush_r+0xa>
 80070da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070dc:	07d0      	lsls	r0, r2, #31
 80070de:	d404      	bmi.n	80070ea <_fflush_r+0x3a>
 80070e0:	0599      	lsls	r1, r3, #22
 80070e2:	d402      	bmi.n	80070ea <_fflush_r+0x3a>
 80070e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070e6:	f000 f915 	bl	8007314 <__retarget_lock_acquire_recursive>
 80070ea:	4628      	mov	r0, r5
 80070ec:	4621      	mov	r1, r4
 80070ee:	f7ff ff59 	bl	8006fa4 <__sflush_r>
 80070f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070f4:	07da      	lsls	r2, r3, #31
 80070f6:	4605      	mov	r5, r0
 80070f8:	d4e0      	bmi.n	80070bc <_fflush_r+0xc>
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	059b      	lsls	r3, r3, #22
 80070fe:	d4dd      	bmi.n	80070bc <_fflush_r+0xc>
 8007100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007102:	f000 f908 	bl	8007316 <__retarget_lock_release_recursive>
 8007106:	e7d9      	b.n	80070bc <_fflush_r+0xc>
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <_fflush_r+0x70>)
 800710a:	429c      	cmp	r4, r3
 800710c:	d101      	bne.n	8007112 <_fflush_r+0x62>
 800710e:	68ac      	ldr	r4, [r5, #8]
 8007110:	e7df      	b.n	80070d2 <_fflush_r+0x22>
 8007112:	4b04      	ldr	r3, [pc, #16]	; (8007124 <_fflush_r+0x74>)
 8007114:	429c      	cmp	r4, r3
 8007116:	bf08      	it	eq
 8007118:	68ec      	ldreq	r4, [r5, #12]
 800711a:	e7da      	b.n	80070d2 <_fflush_r+0x22>
 800711c:	080079bc 	.word	0x080079bc
 8007120:	080079dc 	.word	0x080079dc
 8007124:	0800799c 	.word	0x0800799c

08007128 <std>:
 8007128:	2300      	movs	r3, #0
 800712a:	b510      	push	{r4, lr}
 800712c:	4604      	mov	r4, r0
 800712e:	e9c0 3300 	strd	r3, r3, [r0]
 8007132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007136:	6083      	str	r3, [r0, #8]
 8007138:	8181      	strh	r1, [r0, #12]
 800713a:	6643      	str	r3, [r0, #100]	; 0x64
 800713c:	81c2      	strh	r2, [r0, #14]
 800713e:	6183      	str	r3, [r0, #24]
 8007140:	4619      	mov	r1, r3
 8007142:	2208      	movs	r2, #8
 8007144:	305c      	adds	r0, #92	; 0x5c
 8007146:	f7ff f859 	bl	80061fc <memset>
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <std+0x38>)
 800714c:	6263      	str	r3, [r4, #36]	; 0x24
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <std+0x3c>)
 8007150:	62a3      	str	r3, [r4, #40]	; 0x28
 8007152:	4b05      	ldr	r3, [pc, #20]	; (8007168 <std+0x40>)
 8007154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007156:	4b05      	ldr	r3, [pc, #20]	; (800716c <std+0x44>)
 8007158:	6224      	str	r4, [r4, #32]
 800715a:	6323      	str	r3, [r4, #48]	; 0x30
 800715c:	bd10      	pop	{r4, pc}
 800715e:	bf00      	nop
 8007160:	0800751d 	.word	0x0800751d
 8007164:	0800753f 	.word	0x0800753f
 8007168:	08007577 	.word	0x08007577
 800716c:	0800759b 	.word	0x0800759b

08007170 <_cleanup_r>:
 8007170:	4901      	ldr	r1, [pc, #4]	; (8007178 <_cleanup_r+0x8>)
 8007172:	f000 b8af 	b.w	80072d4 <_fwalk_reent>
 8007176:	bf00      	nop
 8007178:	080070b1 	.word	0x080070b1

0800717c <__sfmoreglue>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	1e4a      	subs	r2, r1, #1
 8007180:	2568      	movs	r5, #104	; 0x68
 8007182:	4355      	muls	r5, r2
 8007184:	460e      	mov	r6, r1
 8007186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800718a:	f7ff f98f 	bl	80064ac <_malloc_r>
 800718e:	4604      	mov	r4, r0
 8007190:	b140      	cbz	r0, 80071a4 <__sfmoreglue+0x28>
 8007192:	2100      	movs	r1, #0
 8007194:	e9c0 1600 	strd	r1, r6, [r0]
 8007198:	300c      	adds	r0, #12
 800719a:	60a0      	str	r0, [r4, #8]
 800719c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071a0:	f7ff f82c 	bl	80061fc <memset>
 80071a4:	4620      	mov	r0, r4
 80071a6:	bd70      	pop	{r4, r5, r6, pc}

080071a8 <__sfp_lock_acquire>:
 80071a8:	4801      	ldr	r0, [pc, #4]	; (80071b0 <__sfp_lock_acquire+0x8>)
 80071aa:	f000 b8b3 	b.w	8007314 <__retarget_lock_acquire_recursive>
 80071ae:	bf00      	nop
 80071b0:	20000694 	.word	0x20000694

080071b4 <__sfp_lock_release>:
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <__sfp_lock_release+0x8>)
 80071b6:	f000 b8ae 	b.w	8007316 <__retarget_lock_release_recursive>
 80071ba:	bf00      	nop
 80071bc:	20000694 	.word	0x20000694

080071c0 <__sinit_lock_acquire>:
 80071c0:	4801      	ldr	r0, [pc, #4]	; (80071c8 <__sinit_lock_acquire+0x8>)
 80071c2:	f000 b8a7 	b.w	8007314 <__retarget_lock_acquire_recursive>
 80071c6:	bf00      	nop
 80071c8:	2000068f 	.word	0x2000068f

080071cc <__sinit_lock_release>:
 80071cc:	4801      	ldr	r0, [pc, #4]	; (80071d4 <__sinit_lock_release+0x8>)
 80071ce:	f000 b8a2 	b.w	8007316 <__retarget_lock_release_recursive>
 80071d2:	bf00      	nop
 80071d4:	2000068f 	.word	0x2000068f

080071d8 <__sinit>:
 80071d8:	b510      	push	{r4, lr}
 80071da:	4604      	mov	r4, r0
 80071dc:	f7ff fff0 	bl	80071c0 <__sinit_lock_acquire>
 80071e0:	69a3      	ldr	r3, [r4, #24]
 80071e2:	b11b      	cbz	r3, 80071ec <__sinit+0x14>
 80071e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e8:	f7ff bff0 	b.w	80071cc <__sinit_lock_release>
 80071ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071f0:	6523      	str	r3, [r4, #80]	; 0x50
 80071f2:	4b13      	ldr	r3, [pc, #76]	; (8007240 <__sinit+0x68>)
 80071f4:	4a13      	ldr	r2, [pc, #76]	; (8007244 <__sinit+0x6c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80071fa:	42a3      	cmp	r3, r4
 80071fc:	bf04      	itt	eq
 80071fe:	2301      	moveq	r3, #1
 8007200:	61a3      	streq	r3, [r4, #24]
 8007202:	4620      	mov	r0, r4
 8007204:	f000 f820 	bl	8007248 <__sfp>
 8007208:	6060      	str	r0, [r4, #4]
 800720a:	4620      	mov	r0, r4
 800720c:	f000 f81c 	bl	8007248 <__sfp>
 8007210:	60a0      	str	r0, [r4, #8]
 8007212:	4620      	mov	r0, r4
 8007214:	f000 f818 	bl	8007248 <__sfp>
 8007218:	2200      	movs	r2, #0
 800721a:	60e0      	str	r0, [r4, #12]
 800721c:	2104      	movs	r1, #4
 800721e:	6860      	ldr	r0, [r4, #4]
 8007220:	f7ff ff82 	bl	8007128 <std>
 8007224:	68a0      	ldr	r0, [r4, #8]
 8007226:	2201      	movs	r2, #1
 8007228:	2109      	movs	r1, #9
 800722a:	f7ff ff7d 	bl	8007128 <std>
 800722e:	68e0      	ldr	r0, [r4, #12]
 8007230:	2202      	movs	r2, #2
 8007232:	2112      	movs	r1, #18
 8007234:	f7ff ff78 	bl	8007128 <std>
 8007238:	2301      	movs	r3, #1
 800723a:	61a3      	str	r3, [r4, #24]
 800723c:	e7d2      	b.n	80071e4 <__sinit+0xc>
 800723e:	bf00      	nop
 8007240:	080078b0 	.word	0x080078b0
 8007244:	08007171 	.word	0x08007171

08007248 <__sfp>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	4607      	mov	r7, r0
 800724c:	f7ff ffac 	bl	80071a8 <__sfp_lock_acquire>
 8007250:	4b1e      	ldr	r3, [pc, #120]	; (80072cc <__sfp+0x84>)
 8007252:	681e      	ldr	r6, [r3, #0]
 8007254:	69b3      	ldr	r3, [r6, #24]
 8007256:	b913      	cbnz	r3, 800725e <__sfp+0x16>
 8007258:	4630      	mov	r0, r6
 800725a:	f7ff ffbd 	bl	80071d8 <__sinit>
 800725e:	3648      	adds	r6, #72	; 0x48
 8007260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007264:	3b01      	subs	r3, #1
 8007266:	d503      	bpl.n	8007270 <__sfp+0x28>
 8007268:	6833      	ldr	r3, [r6, #0]
 800726a:	b30b      	cbz	r3, 80072b0 <__sfp+0x68>
 800726c:	6836      	ldr	r6, [r6, #0]
 800726e:	e7f7      	b.n	8007260 <__sfp+0x18>
 8007270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007274:	b9d5      	cbnz	r5, 80072ac <__sfp+0x64>
 8007276:	4b16      	ldr	r3, [pc, #88]	; (80072d0 <__sfp+0x88>)
 8007278:	60e3      	str	r3, [r4, #12]
 800727a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800727e:	6665      	str	r5, [r4, #100]	; 0x64
 8007280:	f000 f847 	bl	8007312 <__retarget_lock_init_recursive>
 8007284:	f7ff ff96 	bl	80071b4 <__sfp_lock_release>
 8007288:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800728c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007290:	6025      	str	r5, [r4, #0]
 8007292:	61a5      	str	r5, [r4, #24]
 8007294:	2208      	movs	r2, #8
 8007296:	4629      	mov	r1, r5
 8007298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800729c:	f7fe ffae 	bl	80061fc <memset>
 80072a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072a8:	4620      	mov	r0, r4
 80072aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ac:	3468      	adds	r4, #104	; 0x68
 80072ae:	e7d9      	b.n	8007264 <__sfp+0x1c>
 80072b0:	2104      	movs	r1, #4
 80072b2:	4638      	mov	r0, r7
 80072b4:	f7ff ff62 	bl	800717c <__sfmoreglue>
 80072b8:	4604      	mov	r4, r0
 80072ba:	6030      	str	r0, [r6, #0]
 80072bc:	2800      	cmp	r0, #0
 80072be:	d1d5      	bne.n	800726c <__sfp+0x24>
 80072c0:	f7ff ff78 	bl	80071b4 <__sfp_lock_release>
 80072c4:	230c      	movs	r3, #12
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	e7ee      	b.n	80072a8 <__sfp+0x60>
 80072ca:	bf00      	nop
 80072cc:	080078b0 	.word	0x080078b0
 80072d0:	ffff0001 	.word	0xffff0001

080072d4 <_fwalk_reent>:
 80072d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d8:	4606      	mov	r6, r0
 80072da:	4688      	mov	r8, r1
 80072dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072e0:	2700      	movs	r7, #0
 80072e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072e6:	f1b9 0901 	subs.w	r9, r9, #1
 80072ea:	d505      	bpl.n	80072f8 <_fwalk_reent+0x24>
 80072ec:	6824      	ldr	r4, [r4, #0]
 80072ee:	2c00      	cmp	r4, #0
 80072f0:	d1f7      	bne.n	80072e2 <_fwalk_reent+0xe>
 80072f2:	4638      	mov	r0, r7
 80072f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f8:	89ab      	ldrh	r3, [r5, #12]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d907      	bls.n	800730e <_fwalk_reent+0x3a>
 80072fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007302:	3301      	adds	r3, #1
 8007304:	d003      	beq.n	800730e <_fwalk_reent+0x3a>
 8007306:	4629      	mov	r1, r5
 8007308:	4630      	mov	r0, r6
 800730a:	47c0      	blx	r8
 800730c:	4307      	orrs	r7, r0
 800730e:	3568      	adds	r5, #104	; 0x68
 8007310:	e7e9      	b.n	80072e6 <_fwalk_reent+0x12>

08007312 <__retarget_lock_init_recursive>:
 8007312:	4770      	bx	lr

08007314 <__retarget_lock_acquire_recursive>:
 8007314:	4770      	bx	lr

08007316 <__retarget_lock_release_recursive>:
 8007316:	4770      	bx	lr

08007318 <__swhatbuf_r>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	460e      	mov	r6, r1
 800731c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007320:	2900      	cmp	r1, #0
 8007322:	b096      	sub	sp, #88	; 0x58
 8007324:	4614      	mov	r4, r2
 8007326:	461d      	mov	r5, r3
 8007328:	da07      	bge.n	800733a <__swhatbuf_r+0x22>
 800732a:	2300      	movs	r3, #0
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	89b3      	ldrh	r3, [r6, #12]
 8007330:	061a      	lsls	r2, r3, #24
 8007332:	d410      	bmi.n	8007356 <__swhatbuf_r+0x3e>
 8007334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007338:	e00e      	b.n	8007358 <__swhatbuf_r+0x40>
 800733a:	466a      	mov	r2, sp
 800733c:	f000 f954 	bl	80075e8 <_fstat_r>
 8007340:	2800      	cmp	r0, #0
 8007342:	dbf2      	blt.n	800732a <__swhatbuf_r+0x12>
 8007344:	9a01      	ldr	r2, [sp, #4]
 8007346:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800734a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800734e:	425a      	negs	r2, r3
 8007350:	415a      	adcs	r2, r3
 8007352:	602a      	str	r2, [r5, #0]
 8007354:	e7ee      	b.n	8007334 <__swhatbuf_r+0x1c>
 8007356:	2340      	movs	r3, #64	; 0x40
 8007358:	2000      	movs	r0, #0
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	b016      	add	sp, #88	; 0x58
 800735e:	bd70      	pop	{r4, r5, r6, pc}

08007360 <__smakebuf_r>:
 8007360:	898b      	ldrh	r3, [r1, #12]
 8007362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007364:	079d      	lsls	r5, r3, #30
 8007366:	4606      	mov	r6, r0
 8007368:	460c      	mov	r4, r1
 800736a:	d507      	bpl.n	800737c <__smakebuf_r+0x1c>
 800736c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	2301      	movs	r3, #1
 8007376:	6163      	str	r3, [r4, #20]
 8007378:	b002      	add	sp, #8
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	ab01      	add	r3, sp, #4
 800737e:	466a      	mov	r2, sp
 8007380:	f7ff ffca 	bl	8007318 <__swhatbuf_r>
 8007384:	9900      	ldr	r1, [sp, #0]
 8007386:	4605      	mov	r5, r0
 8007388:	4630      	mov	r0, r6
 800738a:	f7ff f88f 	bl	80064ac <_malloc_r>
 800738e:	b948      	cbnz	r0, 80073a4 <__smakebuf_r+0x44>
 8007390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007394:	059a      	lsls	r2, r3, #22
 8007396:	d4ef      	bmi.n	8007378 <__smakebuf_r+0x18>
 8007398:	f023 0303 	bic.w	r3, r3, #3
 800739c:	f043 0302 	orr.w	r3, r3, #2
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	e7e3      	b.n	800736c <__smakebuf_r+0xc>
 80073a4:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <__smakebuf_r+0x7c>)
 80073a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	6020      	str	r0, [r4, #0]
 80073ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	9b00      	ldr	r3, [sp, #0]
 80073b4:	6163      	str	r3, [r4, #20]
 80073b6:	9b01      	ldr	r3, [sp, #4]
 80073b8:	6120      	str	r0, [r4, #16]
 80073ba:	b15b      	cbz	r3, 80073d4 <__smakebuf_r+0x74>
 80073bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 f923 	bl	800760c <_isatty_r>
 80073c6:	b128      	cbz	r0, 80073d4 <__smakebuf_r+0x74>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	f043 0301 	orr.w	r3, r3, #1
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	89a0      	ldrh	r0, [r4, #12]
 80073d6:	4305      	orrs	r5, r0
 80073d8:	81a5      	strh	r5, [r4, #12]
 80073da:	e7cd      	b.n	8007378 <__smakebuf_r+0x18>
 80073dc:	08007171 	.word	0x08007171

080073e0 <memcpy>:
 80073e0:	440a      	add	r2, r1
 80073e2:	4291      	cmp	r1, r2
 80073e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e8:	d100      	bne.n	80073ec <memcpy+0xc>
 80073ea:	4770      	bx	lr
 80073ec:	b510      	push	{r4, lr}
 80073ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f6:	4291      	cmp	r1, r2
 80073f8:	d1f9      	bne.n	80073ee <memcpy+0xe>
 80073fa:	bd10      	pop	{r4, pc}

080073fc <memmove>:
 80073fc:	4288      	cmp	r0, r1
 80073fe:	b510      	push	{r4, lr}
 8007400:	eb01 0402 	add.w	r4, r1, r2
 8007404:	d902      	bls.n	800740c <memmove+0x10>
 8007406:	4284      	cmp	r4, r0
 8007408:	4623      	mov	r3, r4
 800740a:	d807      	bhi.n	800741c <memmove+0x20>
 800740c:	1e43      	subs	r3, r0, #1
 800740e:	42a1      	cmp	r1, r4
 8007410:	d008      	beq.n	8007424 <memmove+0x28>
 8007412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800741a:	e7f8      	b.n	800740e <memmove+0x12>
 800741c:	4402      	add	r2, r0
 800741e:	4601      	mov	r1, r0
 8007420:	428a      	cmp	r2, r1
 8007422:	d100      	bne.n	8007426 <memmove+0x2a>
 8007424:	bd10      	pop	{r4, pc}
 8007426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800742a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800742e:	e7f7      	b.n	8007420 <memmove+0x24>

08007430 <__malloc_lock>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__malloc_lock+0x8>)
 8007432:	f7ff bf6f 	b.w	8007314 <__retarget_lock_acquire_recursive>
 8007436:	bf00      	nop
 8007438:	20000690 	.word	0x20000690

0800743c <__malloc_unlock>:
 800743c:	4801      	ldr	r0, [pc, #4]	; (8007444 <__malloc_unlock+0x8>)
 800743e:	f7ff bf6a 	b.w	8007316 <__retarget_lock_release_recursive>
 8007442:	bf00      	nop
 8007444:	20000690 	.word	0x20000690

08007448 <_realloc_r>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	4607      	mov	r7, r0
 800744c:	4614      	mov	r4, r2
 800744e:	460e      	mov	r6, r1
 8007450:	b921      	cbnz	r1, 800745c <_realloc_r+0x14>
 8007452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007456:	4611      	mov	r1, r2
 8007458:	f7ff b828 	b.w	80064ac <_malloc_r>
 800745c:	b922      	cbnz	r2, 8007468 <_realloc_r+0x20>
 800745e:	f7fe ffd5 	bl	800640c <_free_r>
 8007462:	4625      	mov	r5, r4
 8007464:	4628      	mov	r0, r5
 8007466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007468:	f000 f8f2 	bl	8007650 <_malloc_usable_size_r>
 800746c:	42a0      	cmp	r0, r4
 800746e:	d20f      	bcs.n	8007490 <_realloc_r+0x48>
 8007470:	4621      	mov	r1, r4
 8007472:	4638      	mov	r0, r7
 8007474:	f7ff f81a 	bl	80064ac <_malloc_r>
 8007478:	4605      	mov	r5, r0
 800747a:	2800      	cmp	r0, #0
 800747c:	d0f2      	beq.n	8007464 <_realloc_r+0x1c>
 800747e:	4631      	mov	r1, r6
 8007480:	4622      	mov	r2, r4
 8007482:	f7ff ffad 	bl	80073e0 <memcpy>
 8007486:	4631      	mov	r1, r6
 8007488:	4638      	mov	r0, r7
 800748a:	f7fe ffbf 	bl	800640c <_free_r>
 800748e:	e7e9      	b.n	8007464 <_realloc_r+0x1c>
 8007490:	4635      	mov	r5, r6
 8007492:	e7e7      	b.n	8007464 <_realloc_r+0x1c>

08007494 <_raise_r>:
 8007494:	291f      	cmp	r1, #31
 8007496:	b538      	push	{r3, r4, r5, lr}
 8007498:	4604      	mov	r4, r0
 800749a:	460d      	mov	r5, r1
 800749c:	d904      	bls.n	80074a8 <_raise_r+0x14>
 800749e:	2316      	movs	r3, #22
 80074a0:	6003      	str	r3, [r0, #0]
 80074a2:	f04f 30ff 	mov.w	r0, #4294967295
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074aa:	b112      	cbz	r2, 80074b2 <_raise_r+0x1e>
 80074ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074b0:	b94b      	cbnz	r3, 80074c6 <_raise_r+0x32>
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 f830 	bl	8007518 <_getpid_r>
 80074b8:	462a      	mov	r2, r5
 80074ba:	4601      	mov	r1, r0
 80074bc:	4620      	mov	r0, r4
 80074be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074c2:	f000 b817 	b.w	80074f4 <_kill_r>
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d00a      	beq.n	80074e0 <_raise_r+0x4c>
 80074ca:	1c59      	adds	r1, r3, #1
 80074cc:	d103      	bne.n	80074d6 <_raise_r+0x42>
 80074ce:	2316      	movs	r3, #22
 80074d0:	6003      	str	r3, [r0, #0]
 80074d2:	2001      	movs	r0, #1
 80074d4:	e7e7      	b.n	80074a6 <_raise_r+0x12>
 80074d6:	2400      	movs	r4, #0
 80074d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074dc:	4628      	mov	r0, r5
 80074de:	4798      	blx	r3
 80074e0:	2000      	movs	r0, #0
 80074e2:	e7e0      	b.n	80074a6 <_raise_r+0x12>

080074e4 <raise>:
 80074e4:	4b02      	ldr	r3, [pc, #8]	; (80074f0 <raise+0xc>)
 80074e6:	4601      	mov	r1, r0
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	f7ff bfd3 	b.w	8007494 <_raise_r>
 80074ee:	bf00      	nop
 80074f0:	2000000c 	.word	0x2000000c

080074f4 <_kill_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	; (8007514 <_kill_r+0x20>)
 80074f8:	2300      	movs	r3, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	602b      	str	r3, [r5, #0]
 8007502:	f7fa fbb7 	bl	8001c74 <_kill>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d102      	bne.n	8007510 <_kill_r+0x1c>
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	b103      	cbz	r3, 8007510 <_kill_r+0x1c>
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	bd38      	pop	{r3, r4, r5, pc}
 8007512:	bf00      	nop
 8007514:	20000698 	.word	0x20000698

08007518 <_getpid_r>:
 8007518:	f7fa bba4 	b.w	8001c64 <_getpid>

0800751c <__sread>:
 800751c:	b510      	push	{r4, lr}
 800751e:	460c      	mov	r4, r1
 8007520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007524:	f000 f89c 	bl	8007660 <_read_r>
 8007528:	2800      	cmp	r0, #0
 800752a:	bfab      	itete	ge
 800752c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800752e:	89a3      	ldrhlt	r3, [r4, #12]
 8007530:	181b      	addge	r3, r3, r0
 8007532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007536:	bfac      	ite	ge
 8007538:	6563      	strge	r3, [r4, #84]	; 0x54
 800753a:	81a3      	strhlt	r3, [r4, #12]
 800753c:	bd10      	pop	{r4, pc}

0800753e <__swrite>:
 800753e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007542:	461f      	mov	r7, r3
 8007544:	898b      	ldrh	r3, [r1, #12]
 8007546:	05db      	lsls	r3, r3, #23
 8007548:	4605      	mov	r5, r0
 800754a:	460c      	mov	r4, r1
 800754c:	4616      	mov	r6, r2
 800754e:	d505      	bpl.n	800755c <__swrite+0x1e>
 8007550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007554:	2302      	movs	r3, #2
 8007556:	2200      	movs	r2, #0
 8007558:	f000 f868 	bl	800762c <_lseek_r>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	4632      	mov	r2, r6
 800756a:	463b      	mov	r3, r7
 800756c:	4628      	mov	r0, r5
 800756e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007572:	f000 b817 	b.w	80075a4 <_write_r>

08007576 <__sseek>:
 8007576:	b510      	push	{r4, lr}
 8007578:	460c      	mov	r4, r1
 800757a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757e:	f000 f855 	bl	800762c <_lseek_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	bf15      	itete	ne
 8007588:	6560      	strne	r0, [r4, #84]	; 0x54
 800758a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800758e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007592:	81a3      	strheq	r3, [r4, #12]
 8007594:	bf18      	it	ne
 8007596:	81a3      	strhne	r3, [r4, #12]
 8007598:	bd10      	pop	{r4, pc}

0800759a <__sclose>:
 800759a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759e:	f000 b813 	b.w	80075c8 <_close_r>
	...

080075a4 <_write_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d07      	ldr	r5, [pc, #28]	; (80075c4 <_write_r+0x20>)
 80075a8:	4604      	mov	r4, r0
 80075aa:	4608      	mov	r0, r1
 80075ac:	4611      	mov	r1, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	602a      	str	r2, [r5, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f7fa fb95 	bl	8001ce2 <_write>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_write_r+0x1e>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_write_r+0x1e>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	20000698 	.word	0x20000698

080075c8 <_close_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	; (80075e4 <_close_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7fa fba1 	bl	8001d1a <_close>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_close_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_close_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	20000698 	.word	0x20000698

080075e8 <_fstat_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	; (8007608 <_fstat_r+0x20>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	4611      	mov	r1, r2
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	f7fa fb9c 	bl	8001d32 <_fstat>
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	d102      	bne.n	8007604 <_fstat_r+0x1c>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	b103      	cbz	r3, 8007604 <_fstat_r+0x1c>
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	bd38      	pop	{r3, r4, r5, pc}
 8007606:	bf00      	nop
 8007608:	20000698 	.word	0x20000698

0800760c <_isatty_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	; (8007628 <_isatty_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7fa fb9b 	bl	8001d52 <_isatty>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_isatty_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_isatty_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20000698 	.word	0x20000698

0800762c <_lseek_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	; (800764c <_lseek_r+0x20>)
 8007630:	4604      	mov	r4, r0
 8007632:	4608      	mov	r0, r1
 8007634:	4611      	mov	r1, r2
 8007636:	2200      	movs	r2, #0
 8007638:	602a      	str	r2, [r5, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	f7fa fb94 	bl	8001d68 <_lseek>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_lseek_r+0x1e>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_lseek_r+0x1e>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20000698 	.word	0x20000698

08007650 <_malloc_usable_size_r>:
 8007650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007654:	1f18      	subs	r0, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	bfbc      	itt	lt
 800765a:	580b      	ldrlt	r3, [r1, r0]
 800765c:	18c0      	addlt	r0, r0, r3
 800765e:	4770      	bx	lr

08007660 <_read_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d07      	ldr	r5, [pc, #28]	; (8007680 <_read_r+0x20>)
 8007664:	4604      	mov	r4, r0
 8007666:	4608      	mov	r0, r1
 8007668:	4611      	mov	r1, r2
 800766a:	2200      	movs	r2, #0
 800766c:	602a      	str	r2, [r5, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	f7fa fb1a 	bl	8001ca8 <_read>
 8007674:	1c43      	adds	r3, r0, #1
 8007676:	d102      	bne.n	800767e <_read_r+0x1e>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b103      	cbz	r3, 800767e <_read_r+0x1e>
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	20000698 	.word	0x20000698

08007684 <_init>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr

08007690 <_fini>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr
